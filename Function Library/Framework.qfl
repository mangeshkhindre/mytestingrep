''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Assert.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
' @defgroup: Framework_Assert Framework_Assert
' This is the function group for assertions and checkpoints
' 
' List of functions here
' @code
'   Function FRM_AssertFailure(strEvent,strDetails)
'   Function FRM_AssertTrue(boolExpression, strEvent, strDetails)
'   Function FRM_AssertFalse(boolExpression, strEvent, strDetails)
'   Function FRM_AssertNull(theVal, strEvent, strDetails)
'   Function FRM_AssertNotNull(ByRef theVal, strEvent, strDetails)
'   Function FRM_AssertNothing(ByRef objVal, strEvent, strDetails)
'   Function FRM_AssertNotNothing(ByRef objVal, strEvent, strDetails)
'   Function FRM_AssertEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'   Function FRM_AssertNotEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'   Function FRM_AssertEmpty(ByRef objVal, strEvent, strDetails)
'   Function FRM_AssertNotEmpty(ByRef objVal, strEvent, strDetails)
'
'   Function FRM_VerifyTrue(boolExpression, strEvent, strDetails)
'   Function FRM_VerifyFalse(boolExpression, strEvent, strDetails)
'   Function FRM_VerifyNull(ByRef theVal, strEvent, strDetails)
'   Function FRM_VerifyNotNull(ByRef theVal, strEvent, strDetails)
'   Function FRM_VerifyNothing(ByRef objVal, strEvent, strDetails)
'   Function FRM_VerifyNotNothing(ByRef objVal, strEvent, strDetails)
'   Function FRM_VerifyEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'   Function FRM_VerifyNotEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'   Function FRM_VerifyEmpty(ByRef objVal, strEvent, strDetails)
'   Function FRM_VerifyNotEmpty(ByRef objVal, strEvent, strDetails)
'   Private Function FRM_ValidateCondition(boolExpression,strEvent,strDetails,strSource)
'
' @endcode
'
' @{
''''''''''''''''''''''''''''''''''''''''''

'Assertion result is failure
'@code
'    FRM_AssertFailure(strEvent,strDetails)
'@endcode
'@param strEvent - event description to be reported 
'@param strDetails - detail message to be reported 
'@see FRM_ValidateCondition

Function FRM_AssertFailure(strEvent,strDetails)
    FRM_ValidateCondition false, strEvent, strDetails, "FRM_AssertFailure"
End Function 



'Assertion to see if specified expression evaluates to true
'@code
'    FRM_AssertTrue(boolExpression, strEvent, strDetails)
'@endcode
'@param boolExpression - expression to be checked
'@param strEvent - event description to be reported 
'@param strDetails - detail message to be reported 
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_AssertTrue(boolExpression, strEvent, strDetails)
    FRM_AssertTrue = FRM_ValidateCondition(boolExpression, strEvent, strDetails, "FRM_AssertTrue")
End Function



'Assertion to see if specified expression evaluates to false
'@code
'    FRM_AssertFalse(boolExpression, strEvent, strDetails)
'@endcode
'@param boolExpression - expression to be checked
'@param strEvent - event description to be reported 
'@param strDetails - detail message to be reported 
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_AssertFalse(boolExpression, strEvent, strDetails)
    FRM_AssertFalse = FRM_ValidateCondition((not boolExpression), strEvent, strDetails, "FRM_AssertFalse")
End Function



'Assertion to see if specified variant is null
'@code
'    FRM_AssertNull(theVal, strEvent, strDetails
'@endcode
'@param theVal - variant to be checked
'@param strEvent - event description to be reported 
'@param strDetails - detail message to be reported 
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_AssertNull(theVal, strEvent, strDetails)
    FRM_AssertNull = FRM_ValidateCondition(IsNull(theVal), strEvent, strDetails, "FRM_AssertNull")
End Function



'Assertion to see if specified variant is not null
'@code
'    FRM_AssertNotNull(ByRef theVal, strEvent, strDetails)
'@endcode
'@param theVal - variant to be checked
'@param strEvent - event description to be reported 
'@param strDetails - detail message to be reported 
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_AssertNotNull(ByRef theVal, strEvent, strDetails)
    FRM_AssertNotNull = FRM_ValidateCondition((Not IsNull(theVal)), strEvent, strDetails, "FRM_AssertNotNull")
End Function



'Assertion to see if variable refers to nothing
'@code
'    FRM_AssertNothing(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported 
'@param strDetails - detail message to be reported 
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_AssertNothing(ByRef objVal, strEvent, strDetails)
    FRM_AssertNothing = FRM_ValidateCondition(objVal Is Nothing, strEvent, strDetails, "FRM_AssertNothing")
End Function



'Assertion to see if variable is initialized or has a reference
'@code
'    FRM_AssertNotNothing(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported 
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_AssertNotNothing(ByRef objVal, strEvent, strDetails)
    FRM_AssertNotNothing = FRM_ValidateCondition(Not objVal Is Nothing, strEvent, strDetails, "FRM_AssertNotNothing")
End Function



'Assertion to see if two variables hold the same value
'@code
'    FRM_AssertEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'@endcode
'@param val1 - variant to be compared
'@param val2 - variant to be compared
'@param strEvent - event description to be reported 
'@param strDetails - detail message to be reported 
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_AssertEqual(ByRef val1, ByRef val2, strEvent, strDetails)
    FRM_AssertEqual = FRM_ValidateCondition(val1=val2, strEvent, strDetails, "FRM_AssertEqual")
End Function



'Assertion to see if two variables hold different values
'@code
'    FRM_AssertNotEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'@endcode
'@param val1 - variant to be compared
'@param val2 - variant to be compared
'@param strEvent - event description to be reported 
'@param strDetails - detail message to be reported 
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_AssertNotEqual(ByRef val1, ByRef val2, strEvent, strDetails)
    FRM_AssertNotEqual = FRM_ValidateCondition((Not val1=val2), strEvent, strDetails, "FRM_AssertNotEqual")
End Function



'Assertion to see if a variable is uninitialized
'@code
'    FRM_AssertEmpty(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported 
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_AssertEmpty(ByRef objVal, strEvent, strDetails)
   FRM_AssertEmpty = FRM_ValidateCondition(IsEmpty(objVal), strEvent, strDetails, "FRM_AssertEmpty")
End Function



'Assertion to see if a variable is initialized
'@code
'    FRM_AssertNotEmpty(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_AssertNotEmpty(ByRef objVal, strEvent, strDetails)
   FRM_AssertNotEmpty = FRM_ValidateCondition(Not IsEmpty(objVal), strEvent, strDetails, "FRM_AssertNotEmpty")
End Function



'Checkpoint to see if specified expression evaluates to true
'@code
'    FRM_VerifyTrue(boolExpression, strEvent, strDetails)
'@endcode
'@param boolExpression - expression to be checked
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_VerifyTrue(boolExpression, strEvent, strDetails)
    FRM_VerifyTrue = FRM_ValidateCondition(boolExpression, strEvent, strDetails, "FRM_VerifyTrue")
End Function
	
	
    
'Checkpoint to see if specified expression evaluates to false
'@code
'    FRM_VerifyFalse(boolExpression, strEvent, strDetails)
'@endcode
'@param boolExpression - expression to be checked
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_VerifyFalse(boolExpression, strEvent, strDetails)
    FRM_VerifyFalse = FRM_ValidateCondition(not boolExpression, strEvent, strDetails, "FRM_VerifyFalse")
End Function



'Checkpoint to see if specified variant is null
'@code
'    FRM_VerifyNull(ByRef theVal, strEvent, strDetails)
'@endcode
'@param theVal - variant to be checked
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_VerifyNull(ByRef theVal, strEvent, strDetails)
    FRM_VerifyNull = FRM_ValidateCondition(IsNull(theVal), strEvent, strDetails, "FRM_VerifyNull")
End Function



'Checkpoint to see if specified variant is not null
'@code
'    FRM_VerifyNotNull(ByRef theVal, strEvent, strDetails)
'@endcode
'@param theVal - variant to be checked
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_VerifyNotNull(ByRef theVal, strEvent, strDetails)
    FRM_VerifyNotNull = FRM_ValidateCondition((Not IsNull(theVal)), strEvent, strDetails, "FRM_VerifyNotNull")
End Function



'Checkpoint to see if variable refers to nothing
'@code
'    FRM_VerifyNothing(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_VerifyNothing(ByRef objVal, strEvent, strDetails)
    FRM_VerifyNothing = FRM_ValidateCondition(objVal Is Nothing, strEvent, strDetails, "FRM_VerifyNothing")
End Function



'Checkpoint to see if variable is initialized or has a reference
'@code
'    FRM_VerifyNotNothing(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_VerifyNotNothing(ByRef objVal, strEvent, strDetails)
    FRM_VerifyNotNothing = FRM_ValidateCondition(Not objVal Is Nothing, strEvent, strDetails, "FRM_VerifyNotNothing")
End Function



'Checkpoint to see if two variables hold the same value
'@code
'    FRM_VerifyEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'@endcode
'@param val1 - variant to be compared
'@param val2 - variant to be compared
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_VerifyEqual(ByRef val1, ByRef val2, strEvent, strDetails)
    FRM_VerifyEqual = FRM_ValidateCondition(val1=val2, "Verify "&strEvent, strDetails&", ActualValue="&val1&", ExpectedValue="&val2, "FRM_VerifyEqual")
End Function



'Checkpoint to see if two variables hold different values
'@code
'    FRM_VerifyNotEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'@endcode
'@param val1 - variant to be compared
'@param val2 - variant to be compared
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_VerifyNotEqual(ByRef val1, ByRef val2, strEvent, strDetails)
    FRM_VerifyNotEqual = FRM_ValidateCondition(Not val1=val2, "Verify "&strEvent, strDetails&", ActualValue="&val1&", ExpectedValue="&val2, "FRM_VerifyNotEqual")
End Function



'Checkpoint to see if a variable is uninitialized
'@code
'    FRM_VerifyEmpty(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_VerifyEmpty(ByRef objVal, strEvent, strDetails)
   FRM_VerifyEmpty = FRM_ValidateCondition(IsEmpty(objVal), strEvent, strDetails, "FRM_VerifyEmpty")
End Function



'Checkpoint to see if  a variable is initialized
'@code
'    FRM_VerifyNotEmpty(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@return if validation passes, return True; if validation fails, return False
'@see FRM_ValidateCondition

Function FRM_VerifyNotEmpty(ByRef objVal, strEvent, strDetails)
   FRM_VerifyNotEmpty = FRM_ValidateCondition((Not IsEmpty(objVal)), strEvent, strDetails, "FRM_VerifyNotEmpty")
End Function



'Validation to see if the specificed expression is true <br>
'@code
'    FRM_ValidateCondition(boolExpression,strEvent,strDetails,strSource)
'@endcode
'If strSource is a checkpoint, a runtime error will be raised
'@param boolExpression - expression to be evaluated
'@param strEvent - event description to be reported
'@param strDetails - detail message to be reported
'@param strSource - description of caller method
'@return if validation passes, return True; if validation fails, return False

Private Function FRM_ValidateCondition(boolExpression,strEvent,strDetails,strSource)
	
	If boolExpression Then
        If instr(strSource,"Verify")>0 Then
            FRM_Logger_ReportPassEvent strEvent, strDetails, null    
        Elseif instr(strSource,"Assert")>0 Then
            FRM_Logger_ReportDebugEvent strEvent, strDetails, null 
        End If
	Else
		FRM_Logger_ReportFailEvent strEvent, strDetails, null

        boolRaiseError = FRM_RT_GetPropValue(g_FRM_Prop_RaiseError, False)
        If LCase(boolRaiseError) <> "true" Then boolRaiseError = False
        
		'raise error if assert function or boolRaiseError is true and is Check function
		If instr(strSource,"Assert")>0 or (instr(strSource,"Verify")>0 and boolRaiseError) Then
			Err.raise vbObjectError+100, strSource, "["&strSource&"] "& strEvent&" - " & strDetails
		End If
    End If  
    
    FRM_ValidateCondition = boolExpression
End Function



'@}''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Assert.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Batch.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
' @defgroup: Framework_Batch Framework_Batch
' This is the function group for Batch 
' 
' List of functions here
' @code
'
'	Function FRM_Batch_GetCurrentPath()
'	Function FRM_Batch_ProjectBase()
'	Function FRM_Batch_ReportDirPath
'	Function FRM_Batch_ObjectRepositoryDirPath
'	Function FRM_Batch_FunctionLibraryDirPath
'	Function FRM_Batch_RecoveryScenarioDirPath
'	Function FRM_Batch_TestCaseDirPath
'	Function FRM_Batch_TestScriptDirPath
'	Function FRM_Batch_TestConfigurationDirPath
'	Function FRM_Batch_RecoveryLogFile
'	Function FRM_Batch_ExecuteGlobal(strFileName)
'	Function FRM_Batch_SetupTest(arrArgs)
'	Function FRM_Batch_TeardownTest(arrArgs)
'   Function FRM_Batch_ArrayOfTestCasesToRun(strTestCaseFileName)
'	Function FRM_Batch_GenerateLoadAndRunScript()
'	Function FRM_Batch_WriteDetailReport(strSummaryFilePath, strResultXML)
'	Function FRM_Batch_InitialExcelReport(strReportSummaryPath)
'   Function FRM_Batch_TestSummaryReport_MergeLatestReport(strMergedReportFilePath, strTestSuiteName)
'   Function FRM_Batch_TestSummaryReport_Merge(strMergedReportFilePath, strTestSuiteName, strTestSuiteReportFile)
'   Function FRM_Batch_TestSummaryReport_ReadDetails(strFilePath, strTestSuiteName)
'   Function FRM_Batch_CreateBatchTestCaseFiles()
'   Function FRM_Batch_ArrayOfTestCasesToReRun(strMergedReportName)
'   Function FRM_Batch_CreateReRunBatchTestCaseFiles(strTestCaseFileName,strMergedReportFileToRead)
'   Function FRM_Batch_CreateBatchFilesFromArray(arrTestCases2Dimension, strDestinationSubDir)
' @{
''''''''''''''''''''''''''''''''''''''''''


g_FRM_Prop_MergedBatchSummaryFile = "MergedBatchSummaryFile"
g_FRM_Prop_BatchSummaryFile = "BatchSummaryFile"



'Return the current script path
'@return the current script path

Function FRM_Batch_GetCurrentPath()
	On Error Resume Next
	FRM_Batch_GetCurrentPath = Left(WScript.scriptfullname, InstrRev(WScript.scriptfullname, "\") - 1)
	If Err.Number <> 0 Then
		strTest = Environment.Value("TestDir")
		FRM_Batch_GetCurrentPath = Left(strTest, InStrRev(strTest, "Test Script\"))
	End If
	Err.Clear
	On Error GoTo 0
	
End Function


'Return the current project base path
'@return the current project base path

Function FRM_Batch_ProjectBase()

	strCurrentPath = FRM_Batch_GetCurrentPath
	FRM_Batch_ProjectBase = Left(strCurrentPath, InStrRev(strCurrentPath, "\")-1)
	
End Function


'This function returns the directory path to the RuntimeProp File
'@code
'    FRM_Batch_RuntimePropFilePath()
'@endcode

Function FRM_Batch_RuntimePropFilePath()
	FRM_Batch_RuntimePropFilePath = FRM_Batch_ProjectBase() + "\Test Configuration\" + g_FRM_RuntimePropFile
End Function



'Return the path to "Test Report" folder
'@return the path to "Test Report" folder

Function FRM_Batch_ReportDirPath

	FRM_Batch_ReportDirPath = FRM_Batch_ProjectBase() + "\Test Report\"
	
End Function



'Return the path to "Object Repository" folder
'@return the path to "Object Repository" folder
	
Function FRM_Batch_ObjectRepositoryDirPath

	FRM_Batch_ObjectRepositoryDirPath = FRM_Batch_ProjectBase() + "\Object Repository\"
	
End Function



'Return the path to "Function Library" folder
'@return the path to "Function Library" folder

Function FRM_Batch_FunctionLibraryDirPath

	FRM_Batch_FunctionLibraryDirPath = FRM_Batch_ProjectBase() + "\Function Library\"
	
End Function



'Return the path to "Recovery Scenario" folder
'@return the path to "Recovery Scenario" folder

Function FRM_Batch_RecoveryScenarioDirPath

	FRM_Batch_RecoveryScenarioDirPath = FRM_Batch_ProjectBase() + "\Recovery Scenario\"
	
End Function
	
	
'Return the path to "Test Case" folder
'@return the path to "Test Case" folder

Function FRM_Batch_TestCaseDirPath

	FRM_Batch_TestCaseDirPath = FRM_Batch_ProjectBase() + "\Test Case\"
	
End Function
	

'Return the path to "Test Script" folder
'@return the path to "Test Script" folder

Function FRM_Batch_TestScriptDirPath

	FRM_Batch_TestScriptDirPath = FRM_Batch_ProjectBase() + "\Test Script\"
	
End Function
	

'Return the path to "Test Configuration" folder
'@return the path to "Test Configuration" folder

Function FRM_Batch_TestConfigurationDirPath

	FRM_Batch_TestConfigurationDirPath = FRM_Batch_ProjectBase() + "\Test Configuration\"
	
End Function

	
'Return the path to "Recovery Scenario" log file
'@return the path to "Recovery Scenario" log file
	
Function FRM_Batch_RecoveryLogFile

	FRM_Batch_RecoveryLogFile = FRM_Batch_RecoveryScenarioDirPath() + "log.txt"
	
End Function

	
	
'Include a library file
'@param strFileName path to file to be included
	
Function FRM_Batch_ExecuteGlobal(strFileName)
	
	Set objFileContent = CreateObject("Scripting.FileSystemObject").OpenTextFile(strFileName,1,False) 
	ExecuteGlobal objFileContent.ReadAll
	Set objFileContent = Nothing
	
End Function	



'This function is for Initialize test
'@code
'    FRM_Batch_SetupTest(arrArgs)
'@endcode
'@param an array of arguments

Function FRM_Batch_SetupTest(arrArgs)

	UTIL_File_SetFolderAndFilesPermissionNotReadOnly FRM_Batch_TestCaseDirPath()
	UTIL_File_SetFolderAndFilesPermissionNotReadOnly FRM_Batch_RecoveryScenarioDirPath()
	UTIL_File_SetFolderAndFilesPermissionNotReadOnly FRM_Batch_TestConfigurationDirPath()
	UTIL_File_SetFolderAndFilesPermissionNotReadOnly FRM_Batch_ReportDirPath()
	UTIL_File_SetFolderAndFilesPermissionNotReadOnly FRM_Batch_FunctionLibraryDirPath()
    UTIL_Prop_ResetAll(FRM_RT_RuntimePropFilePath())
    strReportFilePath = FRM_Batch_ReportDirPath() & "Batch_" & UTIL_Date_Now_mmddyyyy_HHnnss()
    strHTMLReportFile = strReportFilePath & ".html"
    strWordDocFile = strReportFilePath & ".doc"
    FRM_RT_SetPropValue g_FRM_Prop_ReportFile, strHTMLReportFile
    FRM_RT_SetPropValue g_FRM_Prop_ScreenshotFile, strWordDocFile
    UTIL_Report_Initialize strHTMLReportFile	
   'FRM_Logger_ReportInfoEvent "Report File", strHTMLReportFile, null
   'FRM_Logger_ReportInfoEvent "Start To Run Batch Test", "Test Start Time: " & Now, Null
	strLogFilePath = FRM_Batch_RecoveryScenarioDirPath + "log.txt"
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	Set objTextFile = objFSO.CreateTextFile(strLogFilePath, true) 
	objFSO.GetFile(strLogFilePath).Attributes = 0
	Set objTextFile = Nothing 
	Set objFSO = Nothing
	''FRM_Logger_ReportInfoEvent  "Create a Txt file to log Recovery Scenario information.", strLogFilePath, Null
End Function 


'This function is for Tear Down test
'@code
'    FRM_Batch_TeardownTest(arrArgs)
'@endcode
'@param an array of arguments

Function FRM_Batch_TeardownTest(arrArgs)
    UTIL_Report_Terminate()
	UTIL_Prop_ResetAll(FRM_Batch_RuntimePropFilePath())
	
End Function


'Read the TestCase spreadsheet and returns an array of test cases to be executed
'@param strTestCaseFileName - The test case file name.  If empty string provide, default "TestCase.xlsx" is used
'@return an array of test cases to be executed

Function FRM_Batch_ArrayOfTestCasesToRun(strTestCaseFileName)

	arrTestCases = Array()
	
	' Create Excel Object
	Set objExcelApp = CreateObject("Excel.Application")
    If UTIL_String_IsEmpty(strTestCaseFileName) Then    
        strTestCaseFileName = "TestCase.xlsx"
    End If
	Set objWorkbook = objExcelApp.Workbooks.Open(FRM_Batch_TestCaseDirPath + strTestCaseFileName)
	'Locate <Suite & Action> sheet and its total count
	boolTestSuite = UTIL_Excel_SheetExistsInWorkbook(objWorkbook, "TestSuite")

	Set objSuiteList = CreateObject("System.Collections.ArrayList")
	If boolTestSuite Then	
		Set objTestSuiteSheet = objExcelApp.Sheets.Item("TestSuite")
		intTestSuiteRowCount = objTestSuiteSheet.UsedRange.Rows.Count
		'Loop for the <Test Suite>
		For i = 1 to intTestSuiteRowCount + 1
			'judge whether the Module run or not
			If objTestSuiteSheet.Cells(i, 2) = "Y" Then 
				objSuiteList.Add CStr(objTestSuiteSheet.Cells(i, 1).Value)
			End If	
		Next	
		Set objTestSuiteSheet = Nothing
	End If
	
	Set objTestCaseSheet = objExcelApp.Sheets.Item("TestCase")
	intTestCaseRowCount = objTestCaseSheet.UsedRange.Rows.Count

	' Loop for <Test Name>
	For j = 2 to intTestCaseRowCount
	    'If test suite name matches and execution marked "Y" or if test suite doesn't exist and test case is marked as "Y"
		If (boolTestSuite AND objSuiteList.Contains(CStr(objTestCaseSheet.Cells(j, 1))) And objTestCaseSheet.Cells(j, 3) = "Y") OR _
			(Not boolTestSuite AND objTestCaseSheet.Cells(j, 3) = "Y") Then
			'set runtimes testname so that data file can be found
			strTestCase = objTestCaseSheet.Cells(j, 2)
			arrTestCases = UTIL_Array_InsertAtEnd(arrTestCases, strTestCase)
		End If
	Next

	objExcelApp.Quit	 
	Set objTestSuiteSheet = Nothing
	Set objExcelApp = Nothing

	FRM_Batch_ArrayOfTestCasesToRun = arrTestCases
	
End Function 



'Generate LoanAndRun scripts
'@param arrTestCases - array of test cases

Function FRM_Batch_GenerateLoadAndRunScript(arrTestCases)

	For i = 0 to UBound(arrTestCases)
		strTestCasePath = FRM_Batch_TestScriptDirPath + arrTestCases(i)  
		'temp=""
		'strScript = strScript + "Environment.value("+UTIL_String_DblQuote("BatchTestCasePath")+") = "+UTIL_String_DblQuote(temp)+vblf
		''strScript = strScript + "Environment("+UTIL_String_DblQuote("BatchTestCasePath")+") = "+UTIL_String_DblQuote(strTestCasePath)+vblf	                      
		strScript = strScript + "Environment.value("+UTIL_String_DblQuote("BatchTestCasePath")+") = "+UTIL_String_DblQuote(strTestCasePath)+vblf	 
		strScript = strScript + "LoadAndRunAction " + UTIL_String_DblQuote(strTestCasePath) + "," +_
		UTIL_String_DblQuote("MainAction") + "," + "oneiteration" + vbCrLf
	Next
	FRM_Batch_GenerateLoadAndRunScript = strScript	  
	
End Function


	
'Write detail report in excel format
'@param strSummaryFilePath path of the report excel file to be generated 
'@param strResultXML path of QTP Results.xml 

Function FRM_Batch_WriteDetailReport(strSummaryFilePath, strResultXML)

	' Create Excel Object
	Set objExcelApplication = CreateObject("Excel.Application")
	objExcelApplication.DisplayAlerts = False

'	objExcelApp.Visible = true
	Set objHtmlFile = objExcelApplication.Workbooks.Open(strSummaryFilePath)
	Set objTestSummarySheet = objExcelApplication.Sheets.Item("Report")
	
	Dim objXML, objRoot, arrActionNodes, objActionNode, arrErrors
	If UTIL_File_FileExists(strResultXML) Then
	
		On Error Resume Next
		Set objXML = UTIL_Xml_LoadFromFile(strResultXML)
		If Err.Number = 0 Then
		''FRM_Logger_ReportInfoEvent "Load XML result file successfully.", strResultXML, null
			Set objRoot = objXML.documentElement
					
			' For total run time
			Dim startTime, endTime
			startTime = objRoot.SelectSingleNode("//Doc").SelectSingleNode("Summary").getAttribute("sTime")
			endTime = objRoot.SelectSingleNode("//Doc").SelectSingleNode("Summary").getAttribute("eTime")
			'objTestSummarySheet.Cells(4, 2) = Split(startTime, "-")(0) & Split(startTime, "-")(1)
			'objTestSummarySheet.Cells(5, 2) = Split(endTime, "-")(0) & Split(endTime, "-")(1)
            objTestSummarySheet.Cells(4, 2) = Replace(startTime, "- ", "")
            objTestSummarySheet.Cells(5, 2) = Replace(endTime, "- ", "")
					
			' For detail action
			Dim objIter
			Set objIter = objRoot.SelectSingleNode("//Doc/DIter/Action")
			If objIter Is Nothing Then
			   Set objIter = objRoot.SelectSingleNode("//Doc/Action")
			End If
			
			Set arrActionNodes = objIter.SelectNodes("Action")
			Dim j : j = 12
			For Each objActionNode In arrActionNodes
				
				FRM_Batch_ParseActionNodeInResultsXML objTestSummarySheet, j, objActionNode
				' If trigger RS, write detail info to report
				arrErrors = UTIL_File_ReadContentIntoArray(ProjectPath + "\Recovery Scenario\log.txt")
				Dim i
				If UBound(arrErrors) <> 0 Then
					For i=1 to UBound(arrErrors)
						If Split(arrErrors(i), "|") (0) = objActionNode.SelectSingleNode("AName").text Then 
							objTestSummarySheet.Cells(j, 6) =  Replace(Split(arrErrors(i), "|") (1), ",", Chr(10))
						End If 
					Next 	
				End If 					
				j = j + 1
				
				Set arrActionSubNodes = objActionNode.SelectNodes("Action")
				For Each objActionSubNode In arrActionSubNodes
					FRM_Batch_ParseActionNodeInResultsXML objTestSummarySheet, j, objActionSubNode
					j = j + 1
				Next
				
			Next				
			Set arrActionNodes = Nothing
			Set objRoot = Nothing
			Set objXML = Nothing
		Else
			' If Error, Inserts detail
			objTestSummarySheet.Cells(12, 1) = "All"
			objTestSummarySheet.Cells(12, 2) = "Error"
			objTestSummarySheet.Cells(12, 3) = 0
			objTestSummarySheet.Cells(12, 4) = 0
			objTestSummarySheet.Cells(12, 5) = 0
			objTestSummarySheet.Cells(12, 9) = ""
			objTestSummarySheet.Cells(12, 10) = ""
		''FRM_Logger_ReportFailEvent "Cannot load XML result file: " & strResultXML & ".", "Error number=" & Err.Number & ", Error description=" & Err.Description, null
		End If
		Err.Clear
		On Error Goto 0
	Else 
		''FRM_Logger_ReportFailEvent "Cannot find XML result file", strResultXML, null
	End If

	'Set format for detail report
	objTestSummarySheet.Range("A12:K" & j - 1).Borders.LineStyle = True
	objTestSummarySheet.Range("A12:K" & j - 1).VerticalAlignment = 2
	objTestSummarySheet.Range("A12:K" & j - 1).EntireColumn.Autofit()
	objTestSummarySheet.Range("A12:K" & j - 1).EntireRow.Autofit()
	objTestSummarySheet.Range("B12:E" & j - 1).HorizontalAlignment = 3
	objTestSummarySheet.Range("G12:K" & j - 1).HorizontalAlignment = 3

	'Transform Excel to HTML report
	'objExcelApplication.Save
	'Save Excel workbook.
	strHTMLFilePath = replace(strSummaryFilePath, ".xlsx", ".mht")
    objHtmlFile.Save
	objHtmlFile.PublishObjects(1).FileName = strHTMLFilePath
	objHtmlFile.PublishObjects(1).Publish
	objExcelApplication.Quit
	
    FRM_RT_SetPropValue g_FRM_Prop_BatchSummaryFile, strSummaryFilePath
''FRM_Logger_ReportInfoEvent  "End of creating detail Excel & HTML report", strSummaryFilePath, null
	
	Set objXML = Nothing
	Set objHtmlFile = Nothing
	Set objExcelApplication = Nothing

End Function 	


Function FRM_Batch_ParseActionNodeInResultsXML(ByRef objTestSummarySheet, j, objActionNode)
				' Inserts detail
				objTestSummarySheet.Cells(j, 1) = Trim(objActionNode.SelectSingleNode("AName").text)
				objTestSummarySheet.Cells(j, 2) = objActionNode.SelectSingleNode("NodeArgs").getAttribute("status")
				Select Case objActionNode.SelectSingleNode("NodeArgs").getAttribute("status")
					Case "Passed"
						 objTestSummarySheet.Cells(j, 2).Font.ColorIndex = 50
					Case "Failed"
						 objTestSummarySheet.Cells(j, 2).Font.ColorIndex = 3
					Case "Warning"
						 objTestSummarySheet.Cells(j, 2).Font.ColorIndex = 45
				End Select
				objTestSummarySheet.Cells(j, 3) = objActionNode.SelectSingleNode("Summary").getAttribute("passed")
				objTestSummarySheet.Cells(j, 4) = objActionNode.SelectSingleNode("Summary").getAttribute("failed")
				objTestSummarySheet.Cells(j, 5) = objActionNode.SelectSingleNode("Summary").getAttribute("warnings")				
                objTestSummarySheet.Cells(j, 7) = Replace(objActionNode.SelectSingleNode("Summary").getAttribute("sTime"), "- ", "")
                objTestSummarySheet.Cells(j, 9) = Replace(objActionNode.SelectSingleNode("Summary").getAttribute("eTime"), "- ", "")
End Function 



'Initial report in excel format
'@param strTemplateFolder template file to be used
'@param strReportSummaryPath excel summary report file copied from the template

Function FRM_Batch_InitialExcelReport(strTemplateFolder, strReportSummaryPath)

  ''FRM_Logger_ReportInfoEvent  "Initial test summary report",  "Template folder="&strTemplateFolder&", Report Summary File="&strReportSummaryPath, Null
    
	Dim objFSO	
	'Copy the report template
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	objFSO.CopyFile strTemplateFolder & "TestReportTemplate.xlsx", strReportSummaryPath
	objFSO.GetFile(strReportSummaryPath).Attributes = 0
	Set objFSO = Nothing
	
End Function 



'Merge the latest Test_Summary_Report.*.xlsx file into merged report. 
'It looks for the last modified Test_Summary_Report.*.xlsx under Test Report folder and merges its data into the merged report
'@param strMergedReportFilePath - path of the merged test summary report
'@param strTestSuiteName - Test Suite name of the latest modified report

Function FRM_Batch_TestSummaryReport_MergeLatestReport(strMergedReportFilePath, strTestSuiteName)

	strLatestTestSuiteReportFile = UTIL_File_GetLatestModified( FRM_Batch_ReportDirPath, "^Test_Summary_Report_.*\.xlsx")
    If UTIL_String_IsNotEmpty(strLatestTestSuiteReportFile) Then
        'FRM_Batch_TestSummaryReport_MergeLatestReport strMergedReportFilePath, strTestSuiteName, strLatestTestSuiteReportFile
		FRM_Batch_TestSummaryReport_Merge strMergedReportFilePath, strTestSuiteName, strLatestTestSuiteReportFile
    End If
End Function


'Merge data in the provided test report file into merged report. 
'@param strMergedReportFilePath - path of the merged test summary report
'@param strTestSuiteName - Test Suite name of the latest modified report
'@param strTestSuiteReportFile - the test report file to be merged

Function FRM_Batch_TestSummaryReport_Merge(strMergedReportFilePath, strTestSuiteName, strTestSuiteReportFile)
	
	Set objExcel = CreateObject("Excel.Application")
	objExcel.DisplayAlerts = False	
	Set objWorkbook = objExcel.Workbooks.Open(strMergedReportFilePath)	
	'Set Summary information
	Set objWorksheet = objWorkbook.Worksheets("ReportDetail")
	intRow = 1  
	Do Until objWorksheet.Cells(intRow,1).Value = "Test Suite"
		intRow = intRow + 1
	Loop
	intHeaderRow = intRow
	Do While objWorksheet.Cells(intRow,1).Value <> ""
		intRow = intRow + 1
	Loop
	intLastRow = intRow - 1	

	'Get the details 
	Set objReportDetails = FRM_Batch_TestSummaryReport_ReadDetails(strTestSuiteReportFile, strTestSuiteName)
	arrRows = objReportDetails("Details")
    intPassed = 0
    intFailed = 0
    intWarnings = 0	
	For intCount = 0 To UBound(arrRows)
		For intColumn = 1 To 11 Step 1	
			strKey = objWorksheet.Cells(intHeaderRow, intColumn).Value		
			strValue = arrRows(intCount)(strKey)
		    objWorksheet.Cells(intLastRow+1+intCount, intColumn).Value = strValue
		    
		    If strKey = "Status" Then
		    	If strValue = "Passed" Then		    				    	
			    	intPassed = intPassed + 1
			    ElseIf strValue = "Failed" Then
			    	intFailed = intFailed + 1
			    ElseIf strValue = "Warnings" Then	
			    	intWarnings = intWarnings + 1
			    End If
		    End If
		Next	
	Next
	Set objWorksheet = Nothing
	
	'Set Summary information
	Set objWorksheet2 = objWorkbook.Worksheets("ReportSummary")
	'Get Last Row
	intRow2 = 1  
	Do While objWorksheet2.Cells(intRow2,1).Value <> "Test Suite"
		intRow2 = intRow2 + 1
	Loop
	Do While objWorksheet2.Cells(intRow2,1).Value <> ""
		intRow2 = intRow2 + 1
	Loop	
	objWorksheet2.Cells(intRow2, 1).Value = strTestSuiteName
	objWorksheet2.Cells(intRow2, 2).Value = strTestSuiteReportFile
	objWorksheet2.Cells(intRow2, 3).Value = UBound(arrRows)+1
	objWorksheet2.Cells(intRow2, 4).Value = intPassed
	objWorksheet2.Cells(intRow2, 5).Value = intFailed
	objWorksheet2.Cells(intRow2, 6).Value = intWarnings
	objWorksheet2.Cells(intRow2, 7).Value = objReportDetails("Start Time")
	objWorksheet2.Cells(intRow2, 8).Value = objReportDetails("End Time")
	Set objWorksheet2 = Nothing
	
	objWorkbook.Save
	objWorkbook.Close
	objExcel.Quit
	Set objDict = Nothing
	Set objReportDetails = Nothing
	Set objWorkbook = Nothing
	Set objExcel = Nothing
	
End Function



'Read details of a test summary report 
'@param strFilePath - path of test summary report
'@param strTestSuiteName - Test Suite name of the latest modified report
'@return a dictionary object that holds the details

Function FRM_Batch_TestSummaryReport_ReadDetails(strFilePath, strTestSuiteName)	
	
	Set objExcel = CreateObject("Excel.Application")
	objExcel.DisplayAlerts = False	
	Set objWorkbook = objExcel.Workbooks.Open(strFilePath)
	Set objWorksheet = objWorkbook.Worksheets(1)
	intRow = 1  
	Do Until objWorksheet.Cells(intRow,1).Value = "Test Name"
		intRow = intRow + 1
	Loop
	intHeaderRow = intRow
	Do While objWorksheet.Cells(intRow,1).Value <> ""
		intRow = intRow + 1
	Loop
	intLastRow = intRow - 1
	'intDataRowCount = intLastRow - intHeaderRow
	arrRows = Array()
	'Loop until test name column is empty
	For intCurrRow = intHeaderRow+1 To intLastRow Step 1
		Set objDict = CreateObject("Scripting.Dictionary")
		For intColumn = 1 To 11 Step 1			
		    strKey = objWorksheet.Cells(intHeaderRow, intColumn)
		    strValue = objWorksheet.Cells(intCurrRow, intColumn)
		    If UTIL_String_IsNotEmpty(strKey) Then
		    	objDict.Add strKey, strValue 
		    End If			
		Next
		objDict.Add "Test Suite", strTestSuiteName
		arrRows = UTIL_Array_InsertAtEnd(arrRows, objDict)
	Next	
	
	Set objDetails = CreateObject("Scripting.Dictionary")
	'Start Time
	objDetails.Add "Start Time", objWorksheet.Cells(4, 2).Value
	'End Time
	objDetails.Add "End Time", objWorksheet.Cells(5, 2).Value
	'Details
	objDetails.Add "Details", arrRows
	
	objWorkbook.Close
	objExcel.Quit
	Set objDict = Nothing
	Set objWorksheet = Nothing
	Set objWorkbook = Nothing
	Set objExcel = Nothing
	
	Set FRM_Batch_TestSummaryReport_ReadDetails = objDetails 
	Set objDetails = Nothing
End Function


'Read array of test cases to run and creates files in nneded directory
'@param arrTestCases2Dimension - array with list of test cases to run 
'@param strDestinationSubDir - dir where to create test case file

Function FRM_Batch_CreateBatchFilesFromArray(arrTestCases2Dimension, strDestinationSubDir)
    strSrcFileName = FRM_Batch_TestCaseDirPath & "BatchTestCaseTemplate.xlsx" 
    Set objExcel = CreateObject("Excel.Application")
    objExcel.Visible = False
    objExcel.DisplayAlerts = False    
    For i = 0 To UBound(arrTestCases2Dimension,1)        'Ubound of first dimension   
        intRow = 2 
		intRowID = 1
        strDestFileName = FRM_Batch_TestCaseDirPath & strDestinationSubDir & UTIL_Date_Now_mmddyyyy_HHnnss() & ".xlsx"    
        UTIL_File_Copy strSrcFileName, strDestFileName, True
        WScript.Sleep 2000
        Set objWorkbook = objExcel.Workbooks.Open(strDestFileName)
        Set objWorksheet = objWorkbook.Worksheets("TestCase")
    
        For j = 0 To UBound(arrTestCases2Dimension,2)    'Ubound of Second dimension
		    If NOT UTIL_String_IsEmpty(arrTestCases2Dimension(i,j)) Then
				objWorksheet.Cells(intRow, 1) = intRowID 
				objWorksheet.Cells(intRow, 2) = arrTestCases2Dimension(i,j)
				objWorksheet.Cells(intRow, 3) = "Y"
				intRowID  = intRowID + 1
			End If	
            intRow = intRow + 1
        Next
        
        objExcel.ActiveWorkbook.Save	
        objExcel.ActiveWorkbook.Close        
    Next       

    objExcel.Application.Quit 
    Set objWorksheet = Nothing    
    Set objWorkbook = Nothing    
    Set objExcel = Nothing

End Function


'Creates TestCase files for the first round/run in Suite dir

Function FRM_Batch_CreateBatchTestCaseFiles(strTestCaseFileName)

    'arrTestCases1Dimension = FRM_Batch_ArrayOfTestCasesToRun("TestCase.xlsx")
	arrTestCases1Dimension = FRM_Batch_ArrayOfTestCasesToRun(strTestCaseFileName)
    arrTestCases2Dimension = UTIL_Array_ConvertToTwoDimension(arrTestCases1Dimension, FRM_RT_GetPropValue("BatchFileSize", True))
          
    FRM_Batch_CreateBatchFilesFromArray arrTestCases2Dimension, "Suite\BatchTestCase_" 

End Function


'Creates TestCase files for re-run in Suite\ReRunSuite
'@param strMergedReportFileToRead - path to report  for results data after first run 
'@param strTestCaseFileName - Test data file name 


Function FRM_Batch_CreateReRunBatchTestCaseFiles(strTestCaseFileName,strMergedReportFileToRead)
    arrTestCases1DimensionOrig = FRM_Batch_ArrayOfTestCasesToRun(strTestCaseFileName)
    arrTestCases1DimensionReRun = FRM_Batch_ArrayOfTestCasesToReRun(strMergedReportFileToRead)

    z = 0
    For each tstScriptRerun in arrTestCases1DimensionReRun        
        For each tstScriptOrig in  arrTestCases1DimensionOrig
            If Ubound(split(tstScriptOrig,"\")) > 0 then
			   strTCaseOrig = split(tstScriptOrig,"\")(1)
			Else
 			   strTCaseOrig = split(tstScriptOrig,"\")(0)
			End If
            If tstScriptRerun = strTCaseOrig then
               arrTestCases1DimensionReRun(z)  =  tstScriptOrig  
            End If
        Next 
        z = z + 1
    next
    arrTestCases2Dimension = UTIL_Array_ConvertToTwoDimension(arrTestCases1DimensionReRun, FRM_RT_GetPropValue("BatchFileSize", True))
	
    FRM_Batch_CreateBatchFilesFromArray arrTestCases2Dimension, "Suite\ReRunSuite\FailedTestCases_ToRun_"
End Function



'Read the Merged Summary Report spreadsheet and returns an array of failed tests cases to be re-executed
'@param strMergedReportName - The merged report file name 
'@return an array of test cases to be executed

Function FRM_Batch_ArrayOfTestCasesToReRun(strMergedReportName)

	arrTestCases = Array()
	
	' Create Excel Object
	Set objExcelApp = CreateObject("Excel.Application")
	Set objWorkbook = objExcelApp.Workbooks.Open(strMergedReportName)
   
	'Locate <ReportDetail> sheet 
	boolReportDetail = UTIL_Excel_SheetExistsInWorkbook(objWorkbook, "ReportDetail")

	If boolReportDetail Then		
		Set objTestCaseSheet = objExcelApp.Sheets.Item("ReportDetail")
		intTestCaseRowCount = objTestCaseSheet.UsedRange.Rows.Count

		' Loop for <ReportDetail>
		For j = 12 to intTestCaseRowCount
	    		'If test text matches "MainAction" and marked "Failed" then get to array
			If Left(objTestCaseSheet.Cells(j, 2),10) = "MainAction" AND _
			   objTestCaseSheet.Cells(j, 3) = "Failed" Then
			  'set runtimes testname so that data file can be found
			   strTestCase = replace(split(objTestCaseSheet.Cells(j, 2),"[")(1),"]","")
			   arrTestCases = UTIL_Array_InsertAtEnd(arrTestCases, strTestCase)
			End If
		Next
        End If
	objExcelApp.Quit	 
	Set objTestSuiteSheet = Nothing
	Set objExcelApp = Nothing

	FRM_Batch_ArrayOfTestCasesToReRun = arrTestCases
	
End Function 



'@}''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Batch.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Datasheet.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
' @defgroup: Framework_Datasheet Framework_Datasheet
' 
' List of functions here
' @code
'
'   Function FRM_DS_GetTestDataFromFile(strTestDataFile, strSheetName, strRowID)
'   Function FRM_DS_GetTestData(strDataFileName, strSheetName, strRowID)
'   Function FRM_DS_GetGlobalTestData(strSheetName, strRowID)
'	Function FRM_DS_TestDataRowExists(strTestDataFile, strSheetName, strRowID)
'	Function FRM_DS_GetTestDataRowIndex(strTestDataFile, strSheetName, strRowID)
'	Function FRM_DS_GetTestDataRowIndexByColumnValue(strTestDataFile, strSheetName, strColTitle, strColumnValue)
'	Function FRM_DS_TestDataColumnExists(objDict, strColTitle)
'	Function FRM_DS_TestDataColumnExistsInSheet(strTestDataFile, strSheetName, strColTitle)
'	Function FRM_DS_GetTestDataColumnIndex(strTestDataFile, strSheetName, strColTitle)
'   Function FRM_DS_GetValue(objDict, strKey)
'   Function FRM_DS_GetTestDataFromQTPDataSheetByRowNumber (strTestDataSheet,intRowNumber)
'   Function FRM_DS_GetTestDataFromQTPDataSheet (strTestDataSheet,strRowID)
'	Function FRM_DS_GetCellData(strTestDataFile, strSheetName, strRowNumOrIndex, strColumnNumOrIndex)
'	Function FRM_DS_SetCellData(strDataFileName, strSheetName, strRowID, strColumnName, Value)
'	Function FRM_DS_ChangeExcelReadonlyToReadandWrite(strFileName)
'	Function FRM_DS_ChangeExcelReadandWriteToReadonly(strFileName)
'	
' @endcode
'
' @{
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'Retrieve the test data
'
'@code
'   FRM_DS_GetTestDataFromFile("C:\Automation\Main\Test Data\Global_Data.xlsx", "Borrower", "TESTCO-BLAIR-BRUNO")
'@endcode
'@param strTestDataFile - data file path
'@param strSheetName - data sheet name
'@param strRowID  - data row ID

Function FRM_DS_GetTestDataFromFile(strTestDataFile, strSheetName, strRowID)

	FRM_Logger_ReportDebugEvent "FRM_DS_GetTestDataFromFile", "Get data from " & strTestDataFile & ", row ID '"&strRowID&"' in data datasheet '" &strSheetName&"'", null
	
	Dim objExcel, objWorkbook, objWorksheet, intRowCount, intColumnCount, intTargetColumnNumber
    Set objExcel = CreateObject("Excel.Application")
    objExcel.Visible = False
    objExcel.DisplayAlerts = False
	
	FRM_Logger_ReportDebugEvent "FRM_DS_GetTestData", "Open data file "&strTestDataFile, null
    Set objWorkbook = objExcel.Workbooks.Open( strTestDataFile )
    Set objWorksheet = objWorkbook.Worksheets(strSheetName)

    intColumnCount = objWorksheet.UsedRange.Columns.count  'get columns count 
	
	intTargetColumnNumber = 1 'RowID should always be the first column in data sheet
    'For n = 1 to intColumnCount    'find "target" column number
	    'If  trim(objWorksheet.Cells(1, n).value) = trim("RowID")  Then
		    'intTargetColumnNumber = n
		    'Exit for
	    'End If
    'Next
	
	Dim dictTestData
	boolDataRowFound = False
	Set dictTestData = CreateObject("Scripting.Dictionary")
    intRowCount = objWorksheet.UsedRange.Rows.count        'get rows count	
    For n = 1 to intRowCount                       'get value from "target" column                                                        
        If  trim(objWorksheet.Cells(n, intTargetColumnNumber).value) = strRowID Then
			boolDataRowFound = True
			For m = 1 to intColumnCount
			    If objWorksheet.Cells(1, m).value = "" or isEmpty(objWorksheet.Cells(1, m).value) Then
					dictTestData(cstr(m)) = objWorksheet.Cells(n, m).value
                Else				   
					dictTestData(objWorksheet.Cells(1, m).value) = objWorksheet.Cells(n, m).value
				End If	
			Next
			Exit For
		End If
	Next	
    objWorkbook.Close
    objExcel.Quit
    Set objWorksheet = Nothing    
    Set objWorkbook = Nothing    
    Set objExcel = Nothing
	
	FRM_AssertTrue boolDataRowFound, "FRM_DS_GetTestDataFromFile", "Data file " & strTestDataFile&", datasheet '"&strSheetName&"', rowID="&strRowID 
	Set FRM_DS_GetTestDataFromFile = dictTestData	

End Function



'@see FRM_DS_GetTestDataFromFile
Function FRM_DS_GetGlobalTestData(strSheetName, strRowID)
		
	strTestDataFile = FRM_RT_DataDirPath() + "Global_Data.xlsx"
	Set FRM_DS_GetGlobalTestData = FRM_DS_GetTestDataFromFile(strTestDataFile, strSheetName, strRowID)
	
End Function


'@see FRM_DS_GetTestDataFromFile
Function FRM_DS_GetTestData(strDataFileName, strSheetName, strRowID)	
	
	strTestDataFile = FRM_RT_DataDirPath + strDataFileName + ".xlsx"
	Set FRM_DS_GetTestData = FRM_DS_GetTestDataFromFile(strTestDataFile, strSheetName, strRowID)
	
End Function



'check if specified row ID exists in test data sheet
'
'@code
'   FRM_DS_TestDataRowExists("C:\Automation\Main\Test Data\Global_Data.xlsx", "Borrower", "TESTCO-BLAIR-BRUNO")
'@endcode
'@param strTestDataFile - data file path
'@param strSheetName - data sheet name
'@param strRowID  - data row ID
'@return true if row found; false if not found

Function FRM_DS_TestDataRowExists(strTestDataFile, strSheetName, strRowID)

	intRowIdx = FRM_DS_GetTestDataRowIndex(strTestDataFile, strSheetName, strRowID)
	If intRowIdx = -1 Then
		FRM_DS_TestDataRowExists = False
	Else
		FRM_DS_TestDataRowExists = True
	End If

End Function



'Get the row index of the specified row ID
'
'@code
'   FRM_DS_GetTestDataRowIndex("C:\Automation\Main\Test Data\Global_Data.xlsx", "Borrower", "TESTCO-BLAIR-BRUNO")
'@endcode
'@param strTestDataFile - data file path
'@param strSheetName - data sheet name
'@param strRowID  - data row ID
'@return row index if found; -1 if not found

Function FRM_DS_GetTestDataRowIndex(strTestDataFile, strSheetName, strRowID)

	FRM_DS_GetTestDataRowIndex = -1
	Dim objExcel, objWorkbook, objWorksheet, intRowCount
    Set objExcel = CreateObject("Excel.Application")
    objExcel.Visible = False
    objExcel.DisplayAlerts = False

    Set objWorkbook = objExcel.Workbooks.Open( strTestDataFile )
    Set objWorksheet = objWorkbook.Worksheets(strSheetName)
    intRowCount = objWorksheet.UsedRange.Rows.count        'get rows count	
    For n = 1 to intRowCount                       'get value from "target" column                                                        
        If  trim(objWorksheet.Cells(n, 1).value) = strRowID Then
			FRM_DS_GetTestDataRowIndex = n
			Exit For
		End If
	Next	
    objWorkbook.Close
    objExcel.Quit

    Set objWorksheet = Nothing    
    Set objWorkbook = Nothing    
    Set objExcel = Nothing
	
End Function

'Get the row index of the specified column value
'@code
'   FRM_DS_GetTestDataRowIndexByColumnValue("C:\Automation\Main\Test Data\Global_Data.xlsx", "Borrower", "ColumnTitle", "TESTCO-BLAIR-BRUNO")
'@endcode
'@param strTestDataFile - data file path
'@param strSheetName - data sheet name
'@param strColTitle  - Column Name
'@param strColumnValue - Column Value
'@return row index if found; -1 if not found

Function FRM_DS_GetTestDataRowIndexByColumnValue(strTestDataFile, strSheetName, strColTitle, strColumnValue)

	FRM_DS_GetTestDataRowIndexByColumnValue = -1
	Dim objExcel, objWorkbook, objWorksheet, intRowCount
    Set objExcel = CreateObject("Excel.Application")
    objExcel.Visible = False
    objExcel.DisplayAlerts = False

    Set objWorkbook = objExcel.Workbooks.Open( strTestDataFile )
    Set objWorksheet = objWorkbook.Worksheets(strSheetName)
    intColumnCount = objWorksheet.UsedRange.Columns.count  'get columns count 	
    For n = 1 to intColumnCount    'find "target" column number
	    If  trim(objWorksheet.Cells(1, n).value) = trim(strColTitle)  Then
		    intColNumber = n
		    Exit for
	    End If
    Next

    intRowCount = objWorksheet.UsedRange.Rows.count        'get rows count
    For n = 1 to intRowCount                       'get value from "target" column                                                        
        If  trim(objWorksheet.Cells(n, intColNumber).value) = strColumnValue Then
			FRM_DS_GetTestDataRowIndexByColumnValue = n
		End If
	Next	
    objWorkbook.Close
    objExcel.Quit

    Set objWorksheet = Nothing    
    Set objWorkbook = Nothing    
    Set objExcel = Nothing
	
End Function


'check if specified column title exists in dictionary object
'
'@code
'   FRM_DS_TestDataColumnExists(objDict, "FirstName")
'@endcode
'@param objDict - dictionary object
'@param strKey  - key name
'@return true if column found; false if not found

Function FRM_DS_TestDataColumnExists(objDict, strKey)

    strTypeName = typename(objDict) 
    If strTypeName = "Dictionary" Then  
		FRM_DS_TestDataColumnExists = UTIL_Dict_KeyExists(objDict, strKey) 
	End If

End Function



'check if specified column title exists in test data sheet
'
'@code
'   FRM_DS_TestDataColumnExistsInSheet("C:\Automation\Main\Test Data\Global_Data.xlsx", "Borrower", "FirstName")
'@endcode
'@param strTestDataFile - data file path
'@param strSheetName - data sheet name
'@param strColTitle  - column title
'@return true if column found; false if not found

Function FRM_DS_TestDataColumnExistsInSheet(strTestDataFile, strSheetName, strColTitle)

	intColIdx = FRM_DS_GetTestDataColumnIndex(strTestDataFile, strSheetName, strColTitle)
	If intColIdx = -1 Then
		FRM_DS_TestDataColumnExistsInSheet = False
	Else
		FRM_DS_TestDataColumnExistsInSheet = True
	End If

End Function



'Get the column index of the specified column title
'
'@code
'   FRM_DS_GetTestDataColumnIndex("C:\Automation\Main\Test Data\Global_Data.xlsx", "Borrower", "FirstName")
'@endcode
'@param strTestDataFile - data file path
'@param strSheetName - data sheet name
'@param strColTitle  - column title
'@return column index if found; -1 if not found

Function FRM_DS_GetTestDataColumnIndex(strTestDataFile, strSheetName, strColTitle)

	FRM_DS_GetTestDataColumnIndex = -1
	Dim objExcel, objWorkbook, objWorksheet, intRowCount
    Set objExcel = CreateObject("Excel.Application")
    objExcel.Visible = False
    objExcel.DisplayAlerts = False

    Set objWorkbook = objExcel.Workbooks.Open( strTestDataFile )
    Set objWorksheet = objWorkbook.Worksheets(strSheetName)
	
    intColumnCount = objWorksheet.UsedRange.Columns.count  'get columns count 	
    For n = 1 to intColumnCount    'find "target" column number
	    If  trim(objWorksheet.Cells(1, n).value) = trim(strColTitle)  Then
		    FRM_DS_GetTestDataColumnIndex = n
		    Exit for
	    End If
    Next
    objWorkbook.Close
    objExcel.Quit

    Set objWorksheet = Nothing    
    Set objWorkbook = Nothing    
    Set objExcel = Nothing
	
End Function



'get test value specified by the key
'
'@code
'   FRM_DS_GetValue(objDict, "FirstName")
'@endcode
'@param objDict - dictionary object
'@param strKey  - data key
'@return test value specified by the key

Function FRM_DS_GetValue(objDict, strKey) 

    strTypeName = typename(objDict) 
    If strTypeName = "Dictionary" Then  
		FRM_DS_GetValue = objDict.Item(strKey) 
	End If

End Function




'Retrieve the test data from datasheet by row number and put it to Dictionary object
'
'@code
'   FRM_DS_GetTestDataFromQTPDataSheetByRowNumber "Global",1
'   FRM_DS_GetTestDataFromQTPDataSheetByRowNumber "Localsheet",2 
'   FRM_DS_GetTestDataFromQTPDataSheetByRowNumber "dtGlobalSheet",3
'   FRM_DS_GetTestDataFromQTPDataSheetByRowNumber "Action2",3
'   FRM_DS_GetTestDataFromQTPDataSheetByRowNumber "MainAction",4
'@endcode
'@param strTestDataSheet - datasheet name,string which describes datatable -"Global", "Local","Localsheet", etc 
'@param intRowNumber - row number

Function FRM_DS_GetTestDataFromQTPDataSheetByRowNumber(strTestDataSheet,intRowNumber)

	FRM_Logger_ReportInfoEvent "FRM_DS_GetTestDataFromQTPDataSheetByRowNumber", "Get data from " & strTestDataSheet & " sheet, row # '"&intRowNumber&"'", null
    intRowCount = 0
    intRowNumber = cInt(intRowNumber)
    On Error resume next
    If InStr(UCASE(strTestDataSheet),"GLOBAL") Then
       Set objTargetSheet = DataTable.GetSheet(dtGlobalSheet)	
    ElseIf InStr(UCASE(strTestDataSheet),"LOCAL") Then 
       Set objTargetSheet = DataTable.GetSheet(dtLocalSheet)
    Else
       Set objTargetSheet = DataTable.GetSheet(strTestDataSheet)
    End If
    If Err.Number = 0  Then	
       intRowCount = objTargetSheet.GetRowCount 
       FRM_Logger_ReportDebugEvent "FRM_DS_GetTestDataFromQTPDataSheetByRowNumber", "Datasheet NOT found " & strTestDataSheet, null 	   
    End If
   
    if intRowCount >= intRowNumber then
       objTargetSheet.SetCurrentrow(intRowNumber)
       intColCount = objTargetSheet.GetParametercount
       Set objDictTestData = CreateObject("Scripting.Dictionary")
       For j = 1 To intColCount
    	strColName = objTargetSheet.GetParameter(j).Name
    	objDictTestData(strColName) = objTargetSheet.GetParameter(j).Value
	   Next  
       
       Set FRM_DS_GetTestDataFromQTPDataSheetByRowNumber = objDictTestData 
    Else
       Set FRM_DS_GetTestDataFromQTPDataSheetByRowNumber = Nothing  
       FRM_Logger_ReportDebugEvent "FRM_DS_GetTestDataFromQTPDataSheetByRowNumber", "Row NOT found " & strTestDataSheet & " sheet, row # '"&intRowNumber&"'", null	   
    End if    
    
	Set objDictTestData = NOTHING
	Set objTargetSheet = NOTHING
End Function


'Retrieve the test data from datasheet by rowid and put it to Dictionary object
'@code
'   FRM_DS_GetTestDataFromQTPDataSheet "Global","2456_Borr"
'   FRM_DS_GetTestDataFromQTPDataSheet "MainAction","3456_Item"
'@endcode
'@param strTestDataSheet - datasheet name,string which describes datatable -"Global", "MainAction"
'@param strRowID - any unique string

Function FRM_DS_GetTestDataFromQTPDataSheet(strTestDataSheet,strRowID)

  If FRM_QTP_EnvVariableExist("BatchTestCasePath") Then 
     strPath = Environment.Value("BatchTestCasePath") & "\Default.xls"
  Else
     strPath = Environment.Value("TestDir") & "\Default.xls"  
  End If 
  Set FRM_DS_GetTestDataFromQTPDataSheet = FRM_DS_GetTestDataFromFile(strPath, strTestDataSheet, strRowID)
  
End Function

'This function returns data from the file based on Row  and Column number
'@code
'   FRM_DS_GetCellData("C:\Automation\Main\Test Data\Global_Data.xlsx", "Borrower", 2,3)
'@endcode
'@param strTestDataFile - data file path
'@param strSheetName - data sheet name
'@param strRowNumOrIndex  - Row number or text
'@param strColumnNumOrIndex  - Column number or text

Function FRM_DS_GetCellData(strTestDataFile, strSheetName, strRowNumOrIndex, strColumnNumOrIndex)
	
	FRM_Logger_ReportDebugEvent "FRM_DS_GetDataFromFileByRowColumn", "Get data from " & strTestDataFile & ", row '"&strRowNumOrIndex&_
	", Column '"& strColumnNumOrIndex &"' in data datasheet '" &strSheetName&"'", null
	
	FRM_DS_GetCellData = UTIL_Excel_GetCellData(strTestDataFile, strSheetName, strRowNumOrIndex, strColumnNumOrIndex)
    
End Function

'Set the data in datasheet
'
'@code
'	FRM_DS_SetCellData(strDataFileName, strSheetName, strRowID, strColumnName, Value)
'@endcode
'@param strDataFileName - data file name
'@param strSheetName - data sheet name
'@param strRowID  - data row ID
'@param strColumnName - Column title
'@param value - value to be set in the datasheet

Function FRM_DS_SetCellData(strDataFileName, strSheetName, strRowID, strColumnName, Value)

	FRM_Logger_ReportInfoEvent "FRM_DS_SetCellData", "Set Data in file " & strDataFileName & " datasheet " & strSheetName & _
        " row " & strRowID & " Column " & strColumnName & " to value " & value, Null
	
	strTestDataFile = FRM_RT_DataDirPath() + strDataFileName + ".xlsx"
	

	
	Dim objExcel, objWorkbook, objWorksheet
	Set objExcel = CreateObject("Excel.Application")
	objExcel.Visible = False
	objExcel.DisplayAlerts = False
    
	Set objWorkbook = objExcel.Workbooks.Open( strTestDataFile )
	Set objWorksheet = objWorkbook.Worksheets(strSheetName)

	intRowCount = objWorksheet.UsedRange.Rows.count        'get rows count	
	For n = 1 to intRowCount                       
	        If  trim(objWorksheet.Cells(n, 1).value) = strRowID Then
			rowIndex = n
			Exit For
		End If
	Next	

	intColumnCount = objWorksheet.UsedRange.Columns.count  'get columns count 	
	For n = 1 to intColumnCount    'find "target" column number
		If  trim(objWorksheet.Cells(1, n).value) = trim(strColumnName)  Then
			columnIndex = n
			Exit for
		End If
	Next

    
	objWorksheet.Cells(rowIndex, columnIndex).value = Value

	objWorkbook.Save
	objWorkbook.Close
	objExcel.Quit
	
	
	Set objWorksheet = Nothing    
	Set objWorkbook = Nothing    
	Set objExcel = Nothing


End Function


'This Function Change all file in Test Data Folder in Frame work
' to Read and write mode
'@code
'    FRM_DS_ChangeExcelReadonlyToReadandWrite(strFileName)
'@endcode

Function FRM_DS_ChangeExcelReadonlyToReadandWrite(strFileName)

	Dim objFSO, strTestDataFile, objFile 

	Set objFSO = CreateObject("Scripting.FileSystemObject") 
	strTestDataFile = FRM_RT_DataDirPath() + strFileName + ".xlsx"	
	Set objFile = objFSO.GetFile(strTestDataFile)
	Const ReadOnly = 1	
	If objFile.Attributes AND ReadOnly Then
   		objFile.Attributes = objFile.Attributes XOR ReadOnly
 	End If      
	
	Set objFile =Nothing 
	Set objFSO = Nothing
End Function



'This Function Change all file in Test Data Folder in Frame work
' to Read only mode
'@code
'    FRM_DS_ChangeExcelReadandWriteToReadonly(strFileNameS)
'@endcode

Function FRM_DS_ChangeExcelReadandWriteToReadonly(strFileName)

	Dim objFSO, strTestDataFile, objFile

	Set objFSO = CreateObject("Scripting.FileSystemObject") 
    strTestDataFile = FRM_RT_DataDirPath() + strFileName + ".xlsx"	
	Set objFile = objFSO.GetFile(strTestDataFile)                
    If objFile.Attributes AND 1 then   
    Else
        objFile.Attributes = objFile.Attributes + 1   
    End If

	Set objFile =Nothing 
	Set objFSO = Nothing
End Function
'@}
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Datasheet.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Logger.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
' @defgroup: Framework_Logger Framework_Logger
'
' @code
'
'	Function FRM_Logger_isLogDisabled(ByVal strLevel) 
'	Function FRM_Logger_isLogEnabled(ByVal strLevel) 
'	Function FRM_Logger_ReportEvent(strLoggerLevel,strReportStepName,strDetails,strOptionalArgs)
'	Function FRM_Logger_ReportTraceEvent(strReportStepName,strDetails,strOptionalArgs)
'	Function FRM_Logger_ReportDebugEvent(strReportStepName,strDetails,strOptionalArgs)
'	Function FRM_Logger_ReportInfoEvent(strReportStepName,strDetails,strOptionalArgs)
'	Function FRM_Logger_ReportStepEvent(strReportStepName,strDetails,strOptionalArgs)
'	Function FRM_Logger_ReportPassEvent(strReportStepName,strDetails,strOptionalArgs)
'	Function FRM_Logger_ReportWarnEvent(strReportStepName,strDetails,strOptionalArgs)
'	Function FRM_Logger_ReportErrorEvent(strReportStepName,strDetails,strOptionalArgs)
'	Function FRM_Logger_ReportFailEvent(strReportStepName,strDetails,strOptionalArgs)
'	Function FRM_Logger_ReportFatalEvent(strReportStepName,strDetails,strOptionalArgs)
'	Private Function FRM_Logger_GetIntLogLevel(ByVal strLevel) 
'	Function FRM_Logger_CreateTestCaseXML()
'	Function FRM_Logger_CreateBaseXML(strProjectName, strUser, strEnvironment)
'	Function FRM_Logger_UpdateXML(xmlFileName, xPath, NodeName, NodeValue)
'	Function FRM_Logger_UpdateStepInTestCaseReport(strStepName, strStepDescription, strResult, strRunTime)
' 	Private Function FRM_Logger_ReadBytes(strFile)
' 	Private Function FRM_Logger_encodeBase64(strbytes)
'	Private Function FRM_Logger_decodeBase64(strbase64)
'	Private Sub FRM_Logger_writeBytes(strFile, strbytes)
'	Function FRM_Logger_AppLauncher()
'	
'
' @endcode
'
' @{
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

g_FRM_Prop_Logger = "Logger.level"
g_FRM_XML_Logger = ""


'Check is logger is disabled <br>
'@code
'   FRM_Logger_isLogDisabled(ByVal strLevel)
'@endcode
'@param  strLevel the case-insensitive logger level (trace, debug, warn, error, fatal)
'@return true if logger is disabled, false if not
'@see FRM_Logger_isLogEnabled(ByVal strLevel) 

Function FRM_Logger_isLogDisabled(ByVal strLevel) 
    FRM_Logger_isLogDisabled = (Not FRM_Logger_isLogEnabled(strLevel))
End Function



'Check is logger is enabled <br>
'   Compare provided logger level with current runtime Logger.level, if provided logger level is <br>
'    equal or higher than current runtime logger level, then logger is enabled
'@code
'   FRM_Logger_isLogEnabled(ByVal strLevel)
'@endcode
'@param  strLevel the event status that you would like to pass (trace, debug, warn, error, fatal)
'@return true if logger is enabled, false if not

Function FRM_Logger_isLogEnabled(ByVal strLevel) 
    isLogEnabled = False
    strCurrentLevel = FRM_RT_GetPropValue(g_FRM_Prop_Logger, False)
    If FRM_Logger_GetIntLogLevel(strCurrentLevel) <= FRM_Logger_GetIntLogLevel(strLevel) Then isLogEnabled = True
    FRM_Logger_isLogEnabled = isLogEnabled        
End Function
 
 

'This function is for writing messages in report file.  
'   A message is logged when logging is enabled, otherwise nothing happens
'@code
'   FRM_Logger_ReportEvent "Info", "Re-Enter Loan Reg", "Rate change Completed", null
'@endcode
'@param strLoggerLevel you can chose different level, such as INFO,PASS,WARN,ERROR,FAIL,FATAL,TRACE,DEBUG,ect.
'@param strReportStepName the description of the check step
'@param strDetails the details description of the check result.
'@param strOptionalArgs null
'@see FRM_Logger_isLogEnabled

Function FRM_Logger_ReportEvent(strLoggerLevel,strReportStepName,strDetails,strOptionalArgs)
    If FRM_Logger_isLogEnabled(strLoggerLevel) Then
        strReportFile = FRM_RT_ReportFilePath()
        If Not UTIL_File_FileExists(strReportFile) Then UTIL_Report_Initialize strReportFile
        UTIL_ReportEvent strReportFile, strLoggerLevel, strReportStepName, strDetails, strOptionalArgs
		
		If(InStr(lcase(strLoggerLevel), "pass")> 0 or InStr(lcase(strLoggerLevel),"fail") > 0 or InStr(lcase(strLoggerLevel),"fatal")>0) Then
		    ''FRM_Logger_UpdateStepInTestCaseReport strReportStepName, strDetails, strLoggerLevel, base64Encoded
			 ScreenshotFileName = Replace(Replace(Replace(Replace(Replace(Replace(strReportStepName, " ", ""), "/",""),"\",""),">",""),":",""),"<","")
			 ScreenshotFileName=Replace(ScreenshotFileName,"?","")
			 ScreenshotFileName = ScreenshotFileName&Year(now)&Month(now)&Day(now)&Hour(now)&Minute(now)&Second(now)
			 Set objFSO = CreateObject("Scripting.FileSystemObject")
			 
			If(Not objFSO.FileExists(FRM_RT_ReportDirPath()&FRM_RT_SCRIPTNAME()&g_FRM_XML_Logger&"\"&ScreenshotFileName &".png")) Then 
				Desktop.CaptureBitmap(FRM_RT_ReportDirPath()&FRM_RT_SCRIPTNAME()&g_FRM_XML_Logger&"\"&ScreenshotFileName &".png")
					 inByteArray = FRM_Logger_readBytes(FRM_RT_ReportDirPath()&FRM_RT_SCRIPTNAME()&g_FRM_XML_Logger&"\"&ScreenshotFileName &".png")
					If(Len(inByteArray) > 0) Then 
						 base64Encoded = FRM_Logger_encodeBase64(inByteArray)
						 FRM_Logger_UpdateStepInTestCaseReport strReportStepName, strDetails, strLoggerLevel, base64Encoded
					End If
				End if
		
		 ELSE
		     
			 FRM_Logger_UpdateStepInTestCaseReport strReportStepName, strDetails, strLoggerLevel, ""
		 End If
	End If
End Function
 
 
 
'This function is for writing messages in report file with level of Trace.  
'   A message is logged when logging is enabled, otherwise nothing happens
'@code
'   FRM_Logger_ReportTraceEvent  "Re-Enter Loan Reg", "Rate change Completed", null
'@endcode
'@param strReportStepName the description of the check step
'@param strDetails the details description of the check result.
'@param strOptionalArgs null
'@see FRM_Logger_ReportEvent

Function FRM_Logger_ReportTraceEvent(strReportStepName,strDetails,strOptionalArgs)
    FRM_Logger_ReportEvent "Trace",strReportStepName,strDetails,strOptionalArgs
End Function



'This function is for writing messages in report file with level of Debug.  
'   A message is logged when logging is enabled, otherwise nothing happens
'@code
'   FRM_Logger_ReportDebugEvent  "Re-Enter Loan Reg", "Rate change Completed", null
'@endcode
'@param strReportStepName the description of the check step
'@param strDetails the details description of the check result.
'@param strOptionalArgs null
'@see FRM_Logger_ReportEvent

Function FRM_Logger_ReportDebugEvent(strReportStepName,strDetails,strOptionalArgs)
    FRM_Logger_ReportEvent "Debug",strReportStepName,strDetails,strOptionalArgs
End Function



'This function is for writing messages in report file with level of Info.  
'   A message is logged when logging is enabled, otherwise nothing happens
'@code
'   FRM_Logger_ReportInfoEvent  "Re-Enter Loan Reg", "Rate change Completed", null
'@endcode
'@param strReportStepName the description of the check step
'@param strDetails the details description of the check result.
'@param strOptionalArgs null
'@see FRM_Logger_ReportEvent

Function FRM_Logger_ReportInfoEvent(strReportStepName,strDetails,strOptionalArgs)
    FRM_Logger_ReportEvent "Info",strReportStepName,strDetails,strOptionalArgs
End Function



'This function is for writing messages in report file with level of Step.  
'   A message is logged when logging is enabled, otherwise nothing happens
'@code
'   FRM_Logger_ReportStepEvent  "Re-Enter Loan Reg", "Rate change Completed", null
'@endcode
'@param strReportStepName the description of the check step
'@param strDetails the details description of the check result.
'@param strOptionalArgs null
'@see FRM_Logger_ReportEvent

Function FRM_Logger_ReportStepEvent(strReportStepName,strDetails,strOptionalArgs)
    FRM_Logger_ReportEvent "Info","Step: "&strReportStepName,strDetails,strOptionalArgs
End Function


'This function is for writing messages in report file with level of Info.  
'   A message is logged when logging is enabled, otherwise nothing happens
'@code
'   FRM_Logger_ReportPassEvent  "Re-Enter Loan Reg", "Rate change Completed", null
'@endcode
'@param strReportStepName the description of the check step
'@param strDetails the details description of the check result.
'@param strOptionalArgs null
'@see FRM_Logger_ReportEvent

Function FRM_Logger_ReportPassEvent(strReportStepName,strDetails,strOptionalArgs)
	Reporter.ReportEvent micPass, strReportStepName, strDetails
	FRM_Logger_ReportEvent "Pass",strReportStepName, strDetails,strOptionalArgs	
End Function



'This function is for writing messages in report file with level of Warn.  
'   A message is logged when logging is enabled, otherwise nothing happens
'@code
'   FRM_Logger_ReportWarnEvent  "Re-Enter Loan Reg", "Rate change Completed", null
'@endcode
'@param strReportStepName the description of the check step
'@param strDetails the details description of the check result.
'@param strOptionalArgs null
'@see FRM_Logger_ReportEvent

Function FRM_Logger_ReportWarnEvent(strReportStepName,strDetails,strOptionalArgs)
	Reporter.ReportEvent micWarning, strReportStepName, strDetails  
	FRM_Logger_ReportEvent "Warn", strReportStepName, strDetails, strOptionalArgs
End Function



'This function is for writing messages in report file with level of Error.  
'   A message is logged when logging is enabled, otherwise nothing happens
'@code
'   FRM_Logger_ReportErrorEvent  "Re-Enter Loan Reg", "Rate change Completed", null
'@endcode
'@param strReportStepName the description of the check step
'@param strDetails the details description of the check result.
'@param strOptionalArgs null
'@see FRM_Logger_ReportEvent

Function FRM_Logger_ReportErrorEvent(strReportStepName,strDetails,strOptionalArgs)
	Reporter.ReportEvent micFail, strReportStepName, strDetails
	FRM_Logger_ReportEvent "Error", strReportStepName, strDetails, strOptionalArgs
End Function



'This function is for writing messages in report file with level of Error.  
'   A message is logged when logging is enabled, otherwise nothing happens
'@code
'   FRM_Logger_ReportFailEvent  "Re-Enter Loan Reg", "Rate change Completed", null
'@endcode
'@param strReportStepName the description of the check step
'@param strDetails the details description of the check result.
'@param strOptionalArgs null
'@see FRM_Logger_ReportEvent

Function FRM_Logger_ReportFailEvent(strReportStepName,strDetails,strOptionalArgs)
	Reporter.ReportEvent micFail, strReportStepName, strDetails
	FRM_Logger_ReportEvent "Fail", strReportStepName, strDetails, strOptionalArgs
End Function



'This function is for writing messages in report file with level of Fatal.  
'   A message is logged when logging is enabled, otherwise nothing happens
'@code
'   FRM_Logger_ReportFatalEvent  "Re-Enter Loan Reg", "Rate change Completed", null
'@endcode
'@param strReportStepName the description of the check step
'@param strDetails the details description of the check result.
'@param strOptionalArgs null
'@see FRM_Logger_ReportEvent

Function FRM_Logger_ReportFatalEvent(strReportStepName,strDetails,strOptionalArgs)
	Reporter.ReportEvent micFail, strReportStepName, strDetails
	FRM_Logger_ReportEvent "Fatal", strReportStepName, strDetails, strOptionalArgs
End Function



'return an integer that represents current runtime log level
'@code
'   FRM_Logger_GetIntLogLevel(ByVal strLevel)
'@endcode
'@param strLevel the log level. Value is case-insensitive <br>
'    valid values are (trace, debug, warn, error, fatal)
'@return an integer that represents current runtime log level

Private Function FRM_Logger_GetIntLogLevel(ByVal strLevel) 
    strLevel = UCASE(strLevel)
    intLevel = -1
    Select Case strLevel
    Case "TRACE"
        intLevel = 1
    Case "DEBUG"
        intLevel = 2
    Case "INFO", "PASS"
        intLevel = 4
    Case "WARN"
        intLevel = 8
    Case "ERROR", "FAIL"
        intLevel = 16         
    Case "FATAL"
        intLevel = 32      
    CASE ELSE
        intLevel = -1
    End Select
    
    FRM_Logger_GetIntLogLevel = intLevel
End Function



'@code
'   FRM_Logger_UpdateStepInTestCaseReport(strStepName, strStepDescription, strResult, strRunTime)
'@endcode
'@param strStepName - Name of the step
'		strStepDescription - Description of the step
'		strResult - Pass or Fail Result
'		strScreenshot - Timestamp

Function FRM_Logger_UpdateStepInTestCaseReport(strStepName, strStepDescription, strResult, strScreenshot)

    Set xmlDoc = CreateObject("Msxml2.DOMDocument.6.0")
    xmlDoc.async = false
    Set objFSO = CreateObject("Scripting.FileSystemObject")
 	if(objFSO.FileExists(FRM_RT_ReportDirPath()&FRM_RT_SCRIPTNAME()&g_FRM_XML_Logger&"\"&FRM_RT_SCRIPTNAME() & "_TestCase.xml")) then 
		
    	xmlDoc.load(FRM_RT_ReportDirPath()&FRM_RT_SCRIPTNAME()&g_FRM_XML_Logger&"\"&FRM_RT_SCRIPTNAME() & "_TestCase.xml")
    	Set TestCasePath = xmlDoc.SelectSingleNode("/TestCase")
    	Set oTestStep = xmlDoc.createElement("TestStep")
    	TestCasePath.appendChild oTestStep
    	Set oStepName = xmlDoc.createElement("StepName")
    	oStepName.Text = strStepName
    	oTestStep.appendChild oStepName
    	Set oStepDesc = xmlDoc.createElement("StepDescription")
    	oStepDesc.Text = strStepDescription
    	oTestStep.appendChild oStepDesc
    	Set oResult = xmlDoc.createElement("Result")
    	oResult.Text = strResult
    	oTestStep.appendChild oResult
    	Set oTime = xmlDoc.createElement("RunTime")
    	oTime.Text = Now
    	oTestStep.appendChild oTime
    	Set oScreenshot = xmlDoc.createElement("Screenshot")
    	if(Len(strScreenshot) > 0) then 
    		oScreenshot.Text = "data:image/png;base64,"&strScreenshot
    	else
    		oScreenshot.Text = strScreenshot
    	End if
    	oTestStep.appendChild oScreenshot
		sPath=FRM_RT_ReportDirPath()
	    sAutomationBasePath= Left(sPath, InStrRev(sPath, "\") -13)
		
    	xmlDoc.Save FRM_RT_ReportDirPath()&FRM_RT_SCRIPTNAME()&g_FRM_XML_Logger&"\"&FRM_RT_SCRIPTNAME() & "_TestCase.xml"
		'xmlDoc.Save ProjectBasePath() & "Suite_BatFiles\BatchXMLResults\"&FRM_RT_SCRIPTNAME()&".xml"
		'xmlDoc.Save ProjectBasePath() &"Suite_BatFiles\BatchXMLResults\"&FRM_RT_SCRIPTNAME()&".xml"
		xmlDoc.Save sAutomationBasePath&"\Suite_BatFiles\BatchXMLResults\"&FRM_RT_SCRIPTNAME()&".xml"
		
		
    	Set oScreenshot = Nothing
    	Set oTime = Nothing
    	Set oResult = Nothing
    	Set oStepDesc = Nothing
    	Set oStepName = Nothing
    End if
	Set objFSO = Nothing
	Set xmlDoc = Nothing
End Function



'@code
'   FRM_Logger_UpdateXML(xmlFileName, xPath, NodeName, NodeValue)
'@endcode
'@param xmlFileName - Name of the XML file
'		xPath - XPath of the XML
'		NodeName - Name of the Node 
'		NodeValue - Value of the Node

Function FRM_Logger_UpdateXML(xmlFileName, xPath, NodeName, NodeValue)

    Set xmlDoc = CreateObject("Msxml2.DOMDocument.6.0")
    xmlDoc.async = false
    xmlDoc.load(xmlFileName&".xml")
    Set EnvironmentDetails = xmlDoc.SelectSingleNode(xPath)
    Set oResult = xmlDoc.createElement(NodeName)
    oResult.Text = NodeValue
    EnvironmentDetails.appendChild oResult
    xmlDoc.Save ".\"&xmlFileName&".xml"
	Set oResult = Nothing
	Set EnvironmentDetails = Nothing
	Set xmlDoc = Nothing
	
End Function



'@code
'   FRM_Logger_CreateBaseXML(strProjectName, strUser, strEnvironment)
'@endcode
'@param 
'		strProjectName - Name of the Project
'		strUser - Name of the User 
'		strEnvironment - Name of the Environment

Function FRM_Logger_CreateBaseXML(strProjectName, strUser, strEnvironment)

    'Create an XML file
    Set oXMLDoc = CreateObject("Microsoft.XMLDOM")
    Set oRoot = oXMLDoc.createElement("ReportViewer")
    oXMLDoc.appendChild oRoot

    Set oEnv = oXMLDoc.createElement("EnvironmentDetails")
    oRoot.appendChild oEnv

    Set oProject = oXMLDoc.createElement("Project")
    oProject.Text = strProjectName
    oEnv.appendChild oProject

    Set oUser = oXMLDoc.createElement("User")
    oUser.Text = strUser
    oEnv.appendChild oUser

    Set oEnvironment = oXMLDoc.createElement("Environment")
    oEnvironment.Text = strEnvironment
    oEnv.appendChild oEnvironment
                
    Set oSummReport = oXMLDoc.createElement("SummaryReport")
    oRoot.appendChild oSummReport
                
    Set oIntro = oXMLDoc.createProcessingInstruction("xml-stylesheet", "type=""text/xsl"" href=""ConsolidatedReport.xsl""")  
    oXMLDoc.insertBefore oIntro,oXMLDoc.childNodes(0)

    Set oIntro = oXMLDoc.createProcessingInstruction("xml","version='1.0' encoding='UTF-8'")
    oXMLDoc.insertBefore oIntro,oXMLDoc.childNodes(0)
    oXMLDoc.Save FRM_RT_ReportDirPath & "\ConsolidatedReport.xml"

	Set oIntro = Nothing
	Set oSummReport = Nothing
	Set oEnvironment = Nothing
	Set oUser = Nothing
	Set oProject = Nothing
	Set oEnv = Nothing	
	Set oXMLDoc = Nothing
    Set oRoot = Nothing
End Function



'@code
'   FRM_Logger_CreateTestCaseXML()
'@endcode
'@param None

Function FRM_Logger_CreateTestCaseXML()

    '====== Create an XML file ====== 
	Set oXMLDoc = CreateObject("Microsoft.XMLDOM")
    Set oRoot = oXMLDoc.createElement("TestCase")
    oXMLDoc.appendChild oRoot
            
    Set oIntro = oXMLDoc.createProcessingInstruction("xml-stylesheet", "type=""text/xsl"" href=""../TestCase.xsl""")  
    oXMLDoc.insertBefore oIntro,oXMLDoc.childNodes(0)
                
    Set oIntro = oXMLDoc.createProcessingInstruction("xml","version='1.0' encoding='UTF-8'")
    oXMLDoc.insertBefore oIntro,oXMLDoc.childNodes(0)
    Set oFSO = CreateObject("Scripting.FileSystemObject")
	If Not oFSO.FolderExists(strFolder) Then
		strSafeDate = DatePart("yyyy",Date) & Right("0" & DatePart("m",Date), 2) & Right("0" & DatePart("d",Date), 2) 
		strSafeTime = Right("0" & Hour(Now), 2) & Right("0" & Minute(Now), 2) & Right("0" & Second(Now), 2) 
		g_FRM_XML_Logger = strSafeDate & "_" & strSafeTime
		oFSO.CreateFolder FRM_RT_ReportDirPath()&FRM_RT_SCRIPTNAME()&g_FRM_XML_Logger
		
		sPath=FRM_RT_ReportDirPath()
	    sAutomationBasePath= Left(sPath, InStrRev(sPath, "\") -13)
		If Not oFSO.FolderExists(sAutomationBasePath & "\Suite_BatFiles\BatchXMLResults\") Then
			oFSO.CreateFolder sAutomationBasePath &"\Suite_BatFiles\BatchXMLResults\"
		End If
		
		oXMLDoc.Save sAutomationBasePath &"\Suite_BatFiles\BatchXMLResults\"&FRM_RT_SCRIPTNAME()&".xml"
		''oXMLDoc.Save FRM_Batch_TestConfigurationDirPath + "ConsolidateReportEmail_Configuration\BatchXMLResults\"&Environment("TestName")&".xml"
		oXMLDoc.Save FRM_RT_ReportDirPath()&FRM_RT_SCRIPTNAME()&g_FRM_XML_Logger&"\"&FRM_RT_SCRIPTNAME() & "_TestCase.xml"		
	End If
	GUI_Browser_CloseAllBrowsers "IE"
	Set oFSO = Nothing
	Set oIntro = Nothing
    Set oXMLDoc = Nothing

End Function



'@code
'   FRM_Logger_ReadBytes(strFile)
'@endcode
'@param strFile - Name of the file

Private Function FRM_Logger_ReadBytes(strFile)

	Dim inStream
	
    Set objFSO = CreateObject("Scripting.FileSystemObject") 
    FilePathExists =  objFSO.FileExists(strFile) 
	If(FilePathExists = true) then 
		' ADODB stream object used
		Set inStream = CreateObject("ADODB.Stream")
		' open with no arguments makes the stream an empty container 
		inStream.Open
		inStream.type= 1
		inStream.LoadFromFile(strFile)
		FRM_Logger_ReadBytes = inStream.Read()

		Set inStream = Nothing
	End If
	
	Set objFSO = Nothing
End Function


'This function converts the image into bytes
'@code
'   FRM_Logger_encodeBase64(bytes)
'@endcode
'@param strbytes - Image bytes

Private Function FRM_Logger_encodeBase64(strbytes)

  	Dim DM, EL
  	Set DM = CreateObject("Microsoft.XMLDOM")
  	' Create temporary node with Base64 data type
  	Set EL = DM.createElement("tmp")
  	EL.DataType = "bin.base64"
  	' Set bytes, get encoded String
  	EL.NodeTypedValue = strbytes
  	FRM_Logger_encodeBase64 = EL.Text

  	Set EL = Nothing
  	Set DM = Nothing
  
End Function


'This function decodes the bytes in to the image
'@code
'   FRM_Logger_decodeBase64(strbase64)
'@endcode
'@param strbase64 - Image bytes

Private Function FRM_Logger_decodeBase64(strbase64)
  	
  	Dim DM, EL
  	Set DM = CreateObject("Microsoft.XMLDOM")
  	'Create temporary node with Base64 data type
  	Set EL = DM.createElement("tmp")
  	EL.DataType = "bin.base64"	
  	' Set encoded String, get bytes
  	EL.Text = strbase64
  	FRM_Logger_decodeBase64 = EL.NodeTypedValue
  	
	Set EL = Nothing
  	Set DM = Nothing
  	
End Function


'This function is used to write the bytes in the specified file
'@code
'   FRM_Logger_writeBytes(strFile, strbytes)
'@endcode
'@param strFile - Name of the file
'@param strbytes - Bytes representing the image

Private Sub FRM_Logger_writeBytes(strFile, strbytes)

  	Dim binaryStream
  	Set binaryStream = CreateObject("ADODB.Stream")
  	binaryStream.Type = TypeBinary
  	'Open the stream and write binary data
  	binaryStream.Open
  	binaryStream.Write strbytes
  	'Save binary data to disk
  	binaryStream.SaveToFile strFile, ForWriting
	Set binaryStream = Nothing
	
End Sub



'This function is used to close all the browsers
'@code
'   FRM_Logger_AppLauncher()
'@endcode
Function FRM_Logger_AppLauncher()
	SystemUtil.CloseProcessByName "AppLauncher.exe"
End Function
'@}
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Logger.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Performance.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
' @defgroup: Framework_Performance Framework_Performance
' 
' List of functions here
' @code
'
'	Function FRM_Perf_StartTimer(strTimerName)
'	Function FRM_Perf_ResetTimer(strTimerName)
'	Function FRM_Perf_StopTimer(strTimerName)
'	Function FRM_Perf_ContinueTimer(strTimerName)
'   Private Function FRM_Perf_MeasureTime(ByVal strTimerName, ByVal strAction)
'	Function FRM_Perf_eveCpuUSage(vPid)
'	Function FRM_Perf_EncompassSynchronization()
'
' @endcode
'
' @{
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'Measure the time take to save /load the page
' Uses MercuryTimer object (strTimerName) to measure elapsed time in milliseconds, send a report to the run results, 
' Convert the elapsed time from milliseconds to seconds, and set a transaction.
'@code
'   MeasureTime "Route to - Save", "start" 
'   Browser("name:=.*").Page("title:=.*").WebElement("innertext:=Submit","index:=0").Click
'   MeasureTime "Route to - Save", "stop" 
'@endcode
'@param strTimerName - description of the timer 
'@param strAction  - action to be taken, valid values are 'start', 'continue', 'reset' or 'stop' 
'                    the action string is case insensitive

Private Function FRM_Perf_MeasureTime(ByVal strTimerName, ByVal strAction)

   Select Case LCase(strAction)
        Case "start"
            MercuryTimers(strTimerName).Start
            FRM_Perf_MeasureTime = 0
        Case "continue"
            MercuryTimers(strTimerName).Continue
            FRM_Perf_MeasureTime = MercuryTimers(strTimerName).ElapsedTime
        Case "reset"
            MercuryTimers(strTimerName).Reset 
            FRM_Perf_MeasureTime = 0
        Case "stop"
            MercuryTimers(strTimerName).Stop           
            lngElapsedTime = MercuryTimers(strTimerName).ElapsedTime
            FRM_Logger_ReportInfoEvent  "Elapsed Time for: " & strTimerName, lngElapsedTime/1000 & " second(s)", null
            FRM_Perf_MeasureTime = lngElapsedTime
    End Select

End Function



'Start measuring time using strTimerName
'@code
'   FRM_Perf_StartTimer(strTimerName)
'@endcode
'@param strTimerName - description of the timer 
'@see FRM_Perf_MeasureTime(strTimerName, strAction)

Function FRM_Perf_StartTimer(strTimerName)
     FRM_Perf_StartTimer = FRM_Perf_MeasureTime (strTimerName,"start")
End Function



'Reset measuring time.
'@code
'   FRM_Perf_ResetTimer(strTimerName)
'@endcode
'@param strTimerName - description of the timer 
'@see FRM_Perf_MeasureTime(strTimerName, strAction)

Function FRM_Perf_ResetTimer(strTimerName)
     FRM_Perf_ResetTimer = FRM_Perf_MeasureTime (strTimerName,"reset")
End Function



'Stop measuring time.
'@code
'   FRM_Perf_StopTimer(strTimerName)
'@endcode
'@param strTimerName - description of the timer 
'@see FRM_Perf_MeasureTime(strTimerName, strAction)

Function FRM_Perf_StopTimer(strTimerName)
     FRM_Perf_StopTimer = FRM_Perf_MeasureTime (strTimerName,"stop")
End Function



'continue measuing time.
'@code
'   FRM_Perf_ContinueTimer(strTimerName)
'@endcode
'@param strTimerName - description of the timer 
'@see FRM_Perf_MeasureTime(strTimerName, strAction)

Function FRM_Perf_ContinueTimer(strTimerName)
     FRM_Perf_ContinueTimer = FRM_Perf_MeasureTime (strTimerName,"continue")
End Function


'Encompass Synchronization .
'@code
'   FRM_Perf_EncompassSynchronization()
'@endcode
Function FRM_Perf_EncompassSynchronization()
	Dim objProc, objWMIService, colProc, strPC, iNum, iPercentUsage, ProcId
	strPC = "."
	Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & strPC & "\root\cimv2")
	Set objProc = objWMIService.ExecQuery("Select * from Win32_Process")	
	For Each oProc In objProc
		If (instr(oProc.Name,"Encompass.exe")>0 and instr(oProc.Name,"devenv.exe")>0 and instr(oProc.Name,"dsagent.exe")>0) Then
			iPercentUsage = 1
			ProcId = oProc.ProcessId
			While iPercentUsage > 0
				iPercentUsage = FRM_Perf_eveCpuUSage(ProcId)
				If iPercentUsage = 0 Then
					Wait 0,500
					iPercentUsage = FRM_Perf_eveCpuUSage(ProcId)
				End If
			Wend
		End If
	Next
    Set objWMIService = nothing 
    Set objProc = nothing
End Function

'Encompass exe CPU Usage .
'@code
'   FRM_Perf_eveCpuUSage(vPid)
'@endcode
'@param vPid - Process ID 
Function FRM_Perf_eveCpuUSage(vPid)
	On Error Resume Next 
	Dim objWMI, objInstance1, perf_instance2, PercentProcessorTime, N1, N2, D1, D2
	Set objWMI = GetObject("winmgmts:\\" &  "." & "\root\cimv2")
	For Each objInstance1 in objWMI.ExecQuery("Select * from Win32_PerfRawData_PerfProc_Process Where IDProcess = '" & vPid & "'")
		N1 = objInstance1.PercentProcessorTime 
		D1 = objInstance1.TimeStamp_Sys100NS 
	Next
	wait 0,500
	For Each perf_instance2 in objWMI.ExecQuery("Select * from Win32_PerfRawData_PerfProc_Process Where IDProcess = '" & vPid & "'")   
	   N2 = perf_instance2.PercentProcessorTime   
	   D2 = perf_instance2.TimeStamp_Sys100NS
	Next
	PercentProcessorTime = ((N2 - N1)/(D2-D1))  * 100
	eveCpuUSage = Round(PercentProcessorTime ,0)
	Set objWMI = nothing
End Function



'@}
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Performance.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_QTP.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
' @defgroup: Framework_QTP Framework_QTP
' This is the function group for QTP 
' 
' List of functions here
' @code
'
'	Function FRM_QTP_Init(strBaseFolder)
'	Function FRM_QTP_NewInstance(boolVisible)
'	Function FRM_QTP_AddFolder(objQTPApp, strPath)
'	Function FRM_QTP_SetRecoveryScenarios(objQTPApp, strBaseFolder, strPath)
'	Function FRM_QTP_AddLibraries(objQTPApp, strLibFolder)
'	Function FRM_QTP_AddLocalLibraries(objQTPApp, strTestScriptBaseFolder, arrTestCaseFolders)
' 	Function FRM_QTP_DataSheetParamExists(objDataTable, strParamName)
' 	Function FRM_QTP_GlobalParamExist(strParamName)
' 	Function FRM_QTP_LocalParamExist(strParamName)
'   Function FRM_QTP_EnvVariableExist(strVarName)
'   Function FRM_QTP_Executable()
'
' @endcode
'
' @{
''''''''''''''''''''''''''''''''''''''''''


'Initialize QTP Session
'@code
'   FRM_QTP_Init(strBaseFolder)
'@endcode
'@param strBaseFolder - Base folder for the session

Function FRM_QTP_Init(strBaseFolder)
	Set objFSO = CreateObject("Scripting.FileSystemObject")
    strRecoveryDestFile = "C:\" + g_RecoveryScenarioHandlerFile
	objFSO.CopyFile FRM_Batch_RecoveryScenarioDirPath + g_RecoveryScenarioHandlerFile, strRecoveryDestFile
	objFSO.GetFile(strRecoveryDestFile).Attributes = 0 'set file attribute to normal
	Set objFSO = Nothing
	
	Set objQTPApp = FRM_QTP_NewInstance(True)
	FRM_QTP_AddFolder objQTPApp, strBaseFolder + "\"
	FRM_QTP_SetRecoveryScenarios objQTPApp, strBaseFolder, "Recovery Scenario\RS_LogAndExitEncompass.qrs"
	FRM_QTP_AddLibraries objQTPApp, strBaseFolder, "Function Library"
	Set FRM_QTP_Init = objQTPApp
End Function


'Creates a new instance of QTP application
'@code
'   FRM_QTP_NewInstance(boolVisible)
'@endcode
'@param boolVisible - sets instance to be visible or not
'@return the new instance

Function FRM_QTP_NewInstance(boolVisible)

	Set objQTPApp = CreateObject( "QuickTest.Application" )
	objQTPApp.Launch
	objQTPApp.Visible = boolVisible
	objQTPApp.New
	
	Set FRM_QTP_NewInstance = objQTPApp

End Function


	
'Add a folder that QTP uses to find files
'@code
'   FRM_QTP_AddFolder(objQTPApp, strPath)
'@endcode
'@param objQTPApp - QTP application instance
'@param strPath - folder path
	
Function FRM_QTP_AddFolder(objQTPApp, strPath)

    ''FRM_Logger_ReportInfoEvent  "FRM_QTP_AddFolder", strPath, Null
	objQTPApp.Folders.RemoveAll
	objQTPApp.Folders.Add strPath
	
End Function

	
'Set recovery scenario of QTP instance
'@code
'   FRM_QTP_SetRecoveryScenarios(objQTPApp, strPath)
'@endcode
'@param objQTPApp - QTP application instance
'@param strBaseFolder - path to base folder
'@param strRSPath - relative path to recovery scenario file
'	
Function FRM_QTP_SetRecoveryScenarios(objQTPApp, strBaseFolder, strRSPath)

    UTIL_File_Copy strBaseFolder + "\" + strRSPath, "C:\RS_LogAndExitEncompass.qrs", True
    
   '' FRM_Logger_ReportInfoEvent  "SetRecoveryScenarios", strRSPath, Null
	Set qtpTestRecovery = objQTPApp.Test.Settings.Recovery
	If qtpTestRecovery.Count > 0 Then
		qtpTestRecovery.RemoveAll
	End If

	objQTPApp.Test.Settings.Recovery.Add strRSPath, "ExitAndRunNextAction", 1

	For intIndex = 1 to qtpTestRecovery.Count
		qtpTestRecovery.Item(intIndex).Enabled = True
    Next
	qtpTestRecovery.Enabled = True
	qtpTestRecovery.SetActivationMode "OnError"

End Function 	



'Add function libraries to the action
'@code
'	FRM_QTP_AddLibraries(objQTPApp, strProjectPath, "Function Library")
'@endcode
'@param objQTPApp - QTP application instance
'@param strBaseFolder - path to base folder
'@param strLibFolderName - library folder name

Function FRM_QTP_AddLibraries(objQTPApp, strBaseFolder, strLibFolderName)

	strLibFolder = strBaseFolder & "\" & strLibFolderName & "\"
	Set qtpLibraries = objQTPApp.Test.Settings.Resources.Libraries
	'Do not remove existing libraries cause actions might have local function libraries associated
	'qtpLibraries.RemoveAll
	arrLibraries = UTIL_File_GetFilesUnderDir(strLibFolder, "qfl$")
	For i = LBound(arrLibraries) To UBound(arrLibraries)
		qtpLibraries.Add strLibFolderName&"\" + arrLibraries(i), 1
        'FRM_Logger_ReportInfoEvent  "FRM_QTP_AddLibraries", strLibFolderName&"\" + arrLibraries(i), Null
	Next 
	
End Function



'Add local library file to the action.  It searches the *.qfl under the provided folders
'If found, add it to the library
'@code
'	FRM_QTP_AddLocalLibraries(objQTPApp, "C:\Automation\QTP\Encompass\Main\Core2\Test Script", Array("RESPATILA\RESPATILA_ENC_17879_IntentToProceedCheckboxEnabled"))
'@endcode
'@param objQTPApp - QTP application instance
'@param strTestScriptBaseFolder - path to test script base folder
'@param arrTestCaseFolders - array of test case folders

Function FRM_QTP_AddLocalLibraries(objQTPApp, strTestScriptBaseFolder, arrTestCaseFolders)

	Set qtpLibraries = objQTPApp.Test.Settings.Resources.Libraries
	For i = LBound(arrTestCaseFolders) To UBound(arrTestCaseFolders)
	
		strTestScriptFolder = strTestScriptBaseFolder & "\" & arrTestCaseFolders(i) & "\"
		arrLibraries = UTIL_File_GetFilesUnderDir(strTestScriptFolder, "qfl$")

		For j = LBound(arrLibraries) To UBound(arrLibraries)
			qtpLibraries.Add strTestScriptFolder&"\" + arrLibraries(j), 1
			'FRM_Logger_ReportInfoEvent  "FRM_QTP_AddLibraries", strTestScriptFolder&"\" + arrLibraries(j), Null
		Next 
	
	Next 
	
End Function


	
'Checks if a QTP datasheet param exists
'@code
'	FRM_QTP_DataSheetParamExists(objDataSheet, strParamName)
'@endcode
'@param objDataSheet - datasheet object
'@param strParamName - parameter name
'@return True if the datasheet param exists; false if not

Function FRM_QTP_DataSheetParamExists(objDataSheet, strParamName)

    FRM_QTP_DataSheetParamExists = True 
    On Error Resume Next
    Err.Clear
    Dim oParam
    strParamValue = objDataSheet.GetParameter(strParamName)
    If Err.Number Then 
		FRM_QTP_DataSheetParamExists = False
	End If	
    On Error Goto 0
End Function


 
'Checks if a QTP Global datatable param exists
'@code
'	FRM_QTP_GlobalParamExist(strParamName)
'@endcode
'@param strParamName - string global parameter name
'@see FRM_QTP_DataSheetParamExists
 
Function FRM_QTP_GlobalParamExist(strParamName)
    FRM_QTP_GlobalParamExist = FRM_QTP_DataSheetParamExists(DataTable.GlobalSheet,strParamName)
End Function


 
'Checks if a QTP Local datatable param exists
'@code
'	FRM_QTP_LocalParamExist(strParamName)
'@endcode
'@param strParamName - string local parameter name
'@see FRM_QTP_DataSheetParamExists
 
Function FRM_QTP_LocalParamExist(strParamName)
    FRM_QTP_LocalParamExist = FRM_QTP_DataSheetParamExists(DataTable.LocalSheet,strParamName)
End Function


'Check to see if QTP Environment variable is defined
'@param strVarName environment variable name
'@return True if exists; False if doesn't

Function FRM_QTP_EnvVariableExist(strVarName)

    On Error Resume Next
    Err.Clear()
    strValue = Environment(strVarName)
    If Err.Number <> 0 Then
        FRM_QTP_EnvVariableExist = False
    Else
        FRM_QTP_EnvVariableExist = True
    End If

    On Error GoTo 0
End Function



'Get the name of QTP executable installed
'@return the name of QTP executable installed - UFT.exe or QTPro.exe

Function FRM_QTP_Executable()
	Dim sFileName,oShell,objFSO
	strFileName = "UFT.exe"
	Set oShell = WScript.CreateObject("WScript.Shell")
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	'****This will find the file that will be actually run from command line when typed without qualified path****
	Set oExec = oShell.Exec("cmd /c for %G in (""" & strFileName & """) do @echo.%~$PATH:G")
	Do
		strLine = oExec.StdOut.ReadLine()
		If Not objFSO.FileExists(strLine)<> 0 Then
			strFileName = "QTPro.exe"
		End If
	Loop While Not oExec.Stdout.AtEndOfStream
	Set oShell = Nothing
	Set objFSO = Nothing
    FRM_QTP_Version = strFileName	
    
End Function


'Checks to see if QTP process is running
'@return True if it is; False if not

Function FRM_QTP_IsProcessRunning()

    FRM_QTP_IsProcessRunning = UTIL_Win_IsProcessRunning(FRM_QTP_Executable())
    
End Function


'@}''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_QTP.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Runtime.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
' @defgroup: Framework_Runtime Framework_Runtime
' This is the function group for framework runtime
' @code
'
'   Function FRM_RT_SetupTest(arrArgs)
'   Private Function FRM_RT_SetupTestProps(arrArgs)
'   Function FRM_RT_TeardownTest(arrArgs)
'   Function FRM_RT_DataDirPath()
'   Function FRM_RT_ReportDirPath()
'   Function FRM_RT_ConfigurationDirPath()
'   Function FRM_RT_ConfigurationFilePath()
'   Function FRM_RT_RuntimePropFilePath()
'   Function FRM_RT_ReportFilePath()
'   Function FRM_RT_GetPropValueRequired(strPropName)
'   Function FRM_RT_GetPropValue(strPropName, boolRequired)
'   Function FRM_RT_SetPropValue(strPropName, strPropValue)
'   Function FRM_RT_AddScreenshotToDoc(strScreenName, ByVal strComments)
'   Function FRM_RT_ScreenshotDocPath()
'   Function FRM_RT_RecoveryScenarioDirPath()
'   Function FRM_RT_TestCaseDirPath()
'   Function FRM_RT_FunctionLibraryDirPath()
'	Function FRM_RT_E2EPropFilePath()
'	Function FRM_RT_SetLoanNo_RT_PropFile()
' @endcode
'
' @{
''''''''''''''''''''''''''''''''''''''''''

g_FRM_RuntimePropFile="RuntimeProp.txt"
g_FRM_GlobalConfigFile="GlobalConfig.txt"
g_FRM_Prop_ReportFile = "ReportFile"
g_FRM_Prop_RaiseError = "AlwaysRaiseError"
g_FRM_Prop_LoanNo = "LoanNo"
g_FRM_Prop_ScreenshotFile = "ScreenshotFile"
g_FRM_Prop_LoginDataRowID = "LoginRowID"
g_RecoveryScenarioHandlerFile = "RecoveryScenarioHandler.vbs"
g_FRM_E2EPropFile = "E2EScriptProp.txt"
g_FRM_Prop_NewUserCreateDataRowID = "NewUserCreateRowID"
g_FRM_Prop_NewUserCreated = "NewUserCreated"
g_FRM_Prop_NewUserPassword = "NewUserPassword"

'Wait Time Variables
g_TinyWaitSmall = 1
g_TinyWaitMedium = 2
g_TinyWaitLarge = 3
g_ShortWaitSmall = 4
g_ShortWaitMedium = 5
g_ShortWaitLarge = 6
g_LongWaitSmall = 7
g_LongWaitMedium = 8
g_LongWaitLarge = 9
g_LongWaitTime = 200
g_ShortWaitTime = 60
g_VeryLongWaitTime = 300

'Default Browser
g_DefaultBrowser = "IE"
''''''''''''''''''''''''''''''''''''''''''

Function FRM_RT_SCRIPTNAME()

	' Set objShel1 = CreateObject("WScript.Shell")
	' Set objEnv1 = objShel1.Environment("USER")
	If FRM_QTP_EnvVariableExist("BatchTestCasePath") Then
		strPath1 = Environment.value("BatchTestCasePath")
		strTestName1 = Right(strPath1, Len(strPath1)-InstrRev(strPath1, "\"))
	Else
        strTestName1 = Environment.Value("TestName")
	' FRM_RT_SCRIPTNAME=objEnv1("TestScriptName")
	End If
	FRM_RT_SCRIPTNAME=strTestName1
	
End Function




'This function is for Initialize test
'@code
'    FRM_RT_SetupTest(arrArgs)
'@endcode
'@param an arry of arguments

Function FRM_RT_SetupTest(arrArgs)

	UTIL_File_SetFolderAndFilesPermissionNotReadOnly FRM_RT_TestCaseDirPath()
	UTIL_File_SetFolderAndFilesPermissionNotReadOnly FRM_RT_RecoveryScenarioDirPath()
	UTIL_File_SetFolderAndFilesPermissionNotReadOnly FRM_RT_ConfigurationDirPath()
	UTIL_File_SetFolderAndFilesPermissionNotReadOnly FRM_RT_ReportDirPath()
	UTIL_File_SetFolderAndFilesPermissionNotReadOnly FRM_RT_FunctionLibraryDirPath()
	
	FRM_Logger_CreateTestCaseXML()
	FRM_RT_SetupTestProps(arrArgs)
    FRM_Logger_ReportInfoEvent "Report File", FRM_RT_GetPropValue(g_FRM_Prop_ReportFile, True), null
	FRM_Logger_ReportInfoEvent "Start To Run Test", Environment.Value("TestName"), null
	FRM_Logger_ReportInfoEvent "Start To Run Action", Environment.Value("ActionName"), null
	
	'======== Load environment from external file ========
	'LoadEnvironmentFile	

	'Add Object dynamically
	'Dim arrOR
	'arrOR = Array("Encompass360.tsr","EncompassSetting.tsr","EncompassLoan.tsr")
	'AddObjectRepository(arrOR)
	
End Function



'This function is for setting test properties
'@code
'    FRM_RT_SetupTestProps(arrArgs)
'@endcode
'@param an arry of arguments

Private Function FRM_RT_SetupTestProps(arrArgs)
    
    UTIL_Prop_ResetAll(FRM_RT_RuntimePropFilePath())
    
    If FRM_QTP_EnvVariableExist("BatchTestCasePath") Then
        strPath = Environment.Value("BatchTestCasePath")
        strTestName = Right(strPath, Len(strPath)-InstrRev(strPath, "\"))
    Else
        strTestName = Environment.Value("TestName")
    End If
	
	
    strReportFilePath = FRM_RT_ReportDirPath() & strTestName & "_" & _
		UTIL_Date_FormatDateByPattern(Now(), "mmddyyyy-HHnnss")
    
    strHTMLReportFile = strReportFilePath & ".html"
    strWordDocFile = strReportFilePath & ".doc"
    FRM_RT_SetPropValue g_FRM_Prop_ReportFile, strHTMLReportFile
    FRM_RT_SetPropValue g_FRM_Prop_ScreenshotFile, strWordDocFile
    
    UTIL_Report_Initialize strHTMLReportFile
End Function



'This function is for Tear Down test
'@code
'    FRM_RT_TeardownTest(arrArgs)
'@endcode
'@param an arry of arguments

Function FRM_RT_TeardownTest(arrArgs)

    FRM_Logger_ReportInfoEvent "End of Running Test", Environment.Value("TestName"), null
    
    UTIL_Report_Terminate()
	'UTIL_Prop_ResetAll(FRM_RT_RuntimePropFilePath())
	
End Function


'This function is for loacate Test Data path
'@code
'    FRM_RT_DataDirPath()
'@endcode


Function FRM_RT_DataDirPath()
	On Error Resume Next
    FRM_RT_DataDirPath = PathFinder.Locate( "Test Data\" )
	'if Err.Description=Object required, batch mode
	If Err.Number <> 0  AND Err.Number = 424 Then 
		FRM_RT_DataDirPath = FRM_Batch_ProjectBase & "\Test Data\"		
	End If
	Err.Clear
	On Error Goto 0
End Function



'This function returns the directory path to the Reports folder
'@code
'    FRM_RT_ReportDirPath()
'@endcode

Function FRM_RT_ReportDirPath()
	On Error Resume Next
    FRM_RT_ReportDirPath = PathFinder.Locate( "Test Report\" )
	'if Err.Description=Object required, batch mode
	If Err.Number <> 0  AND Err.Number = 424 Then  
		FRM_RT_ReportDirPath = FRM_Batch_ProjectBase & "\Test Report\"		
	End If
	Err.Clear
	On Error Goto 0	
End Function




'This function returns the directory path to the Test Configuration folder
'@code
'    FRM_RT_ConfigurationDirPath()
'@endcode

Function FRM_RT_ConfigurationDirPath()
	On Error Resume Next
    FRM_RT_ConfigurationDirPath = PathFinder.Locate( "Test Configuration\" )
	'if Err.Description=Object required, batch mode
	If Err.Number <> 0  AND Err.Number = 424 Then 
		FRM_RT_ConfigurationDirPath = FRM_Batch_ProjectBase & "\Test Configuration\"		
	End If
	Err.Clear
	On Error Goto 0		
End Function


'This function returns the directory path to the Global Config File
'@code
'    FRM_RT_ConfigurationFilePath()
'@endcode

Function FRM_RT_ConfigurationFilePath()
	FRM_RT_ConfigurationFilePath = FRM_RT_ConfigurationDirPath() + g_FRM_GlobalConfigFile
End Function


'This function returns the directory path to the RuntimeProp File
'@code
'    FRM_RT_RuntimePropFilePath()
'@endcode

Function FRM_RT_RuntimePropFilePath()
	FRM_RT_RuntimePropFilePath = FRM_RT_ConfigurationDirPath() + g_FRM_RuntimePropFile
End Function




'This function returns the html report file path
'@code
'    FRM_RT_ReportFilePath()
'@endcode

Function FRM_RT_ReportFilePath()
    FRM_RT_ReportFilePath = FRM_RT_GetPropValue(g_FRM_Prop_ReportFile, True)
End Function


'This function is for get a particular run time property value from 
'@code
'    FRM_RT_GetPropValueRequired(strPropName)
'@endcode
'@param string of property name
'@see FRM_RT_GetPropValue

Function FRM_RT_GetPropValueRequired(strPropName)
    FRM_RT_GetPropValueRequired = FRM_RT_GetPropValue(strPropName,true)
End Function 



'Gets the value of a runtime property
'@code
'   FRM_RT_GetPropValue("LoginID", True)
'@endcode
'@param strPropName name of a runtime property
'@param boolRequired  
'@return returns the value of a runtime property

Function FRM_RT_GetPropValue(strPropName, boolRequired)
	'check runtime property file first, if not found, check global config file
    strValue = UTIL_Prop_ReadValue(FRM_RT_RuntimePropFilePath(), strPropName)
	If UTIL_String_IsEmpty(strValue) Then
		strValue = UTIL_Prop_ReadValue(FRM_RT_ConfigurationFilePath(), strPropName)
	End If 
	
	If boolRequired Then 
        UTIL_AssertNotEmpty strValue, "FRM_RT_GetPropValue", "Get value of runtime property [" & strPropName & "]" 
    End If
    FRM_RT_GetPropValue = strValue
End Function



'set the value of a runtime property
'@code
'   FRM_RT_SetPropValue(strPropName, strPropValue)
'@endcode
'@param strPropName name of a runtime property
'@param strPropValue value of a property

Function FRM_RT_SetPropValue(strPropName, strPropValue)
	UTIL_Prop_SetValue FRM_RT_RuntimePropFilePath(), strPropName, strPropValue
End Function



'Tgetting path to Screenshot documents file
'@code
'    FRM_RT_ScreenshotDocPath
'@endcode

Function FRM_RT_ScreenshotDocPath()
    FRM_RT_ScreenshotDocPath = FRM_RT_GetPropValue(g_FRM_Prop_ScreenshotFile, True)
End Function



'To take screenshot and add/Append them to word file
'@code
'   FRM_RT_AddScreenshotToDoc(strScreenName, ByVal strComments) 
'@endcode
'@param strComments to Pass comments before each screen shots

Function FRM_RT_AddScreenshotToDoc(strScreenName, ByVal strComments)    
	On Error Resume Next	
    strScreenCapture = Lcase(DataTable("ScreenCapture","Global"))
	If Lcase(strScreenCapture) <> "" Then
		If Err.Number = 0 Then            
			If strScreenCapture ="on" OR _
               strScreenCapture ="yes" OR _
               strScreenCapture ="y"  Then
                blnToScreenCapture=True
		    End If	
		End If
	End If
	     
	If blnToScreenCapture=True Then		    
        UTIL_Screen_AddScreenshotToWord FRM_RT_ScreenshotDocPath(), strScreenName, strComments     
	End If	
    
	If  Err.Number>0 Then
		FRM_RT_ReportEvent "ERROR ", "FRM_RT_SaveScreenshot", "Error # " & Err.Number & " Error Description " & Err.Description  
       	Err.Clear
	End If
    On Error Goto 0	
End Function



'This function returns the directory path to the Recovery Scenario folder
'@code
'    FRM_RT_RecoveryScenarioDirPath()
'@endcode

Function FRM_RT_RecoveryScenarioDirPath()
	On Error Resume Next
    FRM_RT_RecoveryScenarioDirPath = PathFinder.Locate( "Recovery Scenario\" )
	'if Err.Description=Object required, batch mode
	If Err.Number <> 0  AND Err.Number = 424 Then 
		FRM_RT_RecoveryScenarioDirPath = FRM_Batch_ProjectBase & "\Recovery Scenario\"		
	End If
	Err.Clear
	On Error Goto 0		
End Function


'This function returns the directory path to the Test Case folder
'@code
'    FRM_RT_TestCaseDirPath()
'@endcode

Function FRM_RT_TestCaseDirPath()
	On Error Resume Next
    FRM_RT_TestCaseDirPath = PathFinder.Locate( "Test Case\" )
	'if Err.Description=Object required, batch mode
	If Err.Number <> 0  AND Err.Number = 424 Then 
		FRM_RT_TestCaseDirPath = FRM_Batch_ProjectBase & "\Test Case\"		
	End If
	Err.Clear
	On Error Goto 0		
End Function


'This function returns the directory path to the Test Case folder
'@code
'    FRM_RT_FunctionLibraryDirPath()
'@endcode

Function FRM_RT_FunctionLibraryDirPath()
	On Error Resume Next
    FRM_RT_FunctionLibraryDirPath = PathFinder.Locate( "Function Library\" )
	'if Err.Description=Object required, batch mode
	If Err.Number <> 0  AND Err.Number = 424 Then 
		FRM_RT_FunctionLibraryDirPath = FRM_Batch_ProjectBase & "\Function Library\"		
	End If
	Err.Clear
	On Error Goto 0		
End Function



'This function returns the directory path to the RuntimeProp File
'@code
'    FRM_RT_E2EPropFilePath()
'@endcode
Function FRM_RT_E2EPropFilePath()
	FRM_RT_E2EPropFilePath = FRM_RT_ConfigurationDirPath() + g_FRM_E2EPropFile
End Function



'This function read the LoanNo from the E2E Property file and places it in the RT Property file
'@code
'    FRM_RT_SetLoanNoinRunTimePropertyFile()
'@endcode
Function FRM_RT_SetLoanNo_RT_PropFile()
	Dim strLoanNumber
	strLoanNumber = UTIL_Prop_ReadValue(FRM_RT_E2EPropFilePath, "LoanNo")
    'Sets the Property value in the Run Time Property file
    FRM_RT_SetPropValue g_FRM_Prop_LoanNo, strLoanNumber
End Function



'@} 
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\Framework\Framework_Runtime.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_ActiveX.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_ActiveX GUI_ActiveX
'
'List of functions here
'@code
'Function GUI_ActiveX_SetTextInComobox (ActXObject  , Value2Set)
'@endcode
'@{
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'This function is used to set a value to the variable 
'@code
'    GUI_ActiveX_SetTextInComobox (ActXObject  , Value2Set)
'@endcode
'@param ActXObject The Active X Object 
'@param Value2Set - Value the needs to be set for the variable

Function GUI_ActiveX_SetTextInComobox (ActXObject  , Value2Set)
	ActXObject.Text = Value2Set	
End Function 

'@}''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_ActiveX.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_BrowserPage.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_BrowserPage GUI_BrowserPage
'
' current page is used in some GUI utilities as the default page to operate on.
'
' There is a design problem for some GUI modules. 
' Normally, any public function in GUI module should take its first parameter as a QTP element to operate on, for example, GUI_Table.
' But before use the GUI function to operate a obj, it need to provide object's parent obj firstly.
'
' For these kind of functions, it calls GetCurrentPage() to get the QTP element. So if you want to use these functions, 
' please call GUI_SetCurrentPage(pageObj) with propery parameter.
'
'@code
'
'   Function GUI_Browser_SetCurrent(objBrowser)
'   Function GUI_Browser_SetLastOpened()
'   Function GUI_Browser_GetLastOpenedIndex()
'   Function GUI_Browser_GetLastOpened()
'   Function GUI_Browser_GetCurrent()
'   Function GUI_Browser_BackToPrevious()
'
'   Function GUI_Page_SetCurrent(objPage)
'   Function GUI_Page_SetDefault()
'   Function GUI_Page_GetCurrent()
'   Function GUI_Page_BackToPrevious()
'
'   Function GUI_Page_Main()
'   Private Function GUI_Browser_Sync(objBrowser)
'   Function GUI_Browser_SyncIE
'   Function GUI_Browser_OpenUrl(strUrl)
'   Function GUI_Browser_ClearCache()
'   Function GUI_Browser_ClearCookies()
'   Private Function GUI_Browser_IEVersion()
'   Function GUI_Browser_CloseCurrent()
'   Function GUI_Browser_CloseAll()
'   Function GUI_Browser_Activate(objBrowser)
'	Function GUI_Browser_CloseAllBrowsers(oBrName)
'	Function GUI_Browser_CloseLastOpened()
'
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''

Set g_CurrentBrowser = Nothing
Set g_PreviousBrowser = Nothing

Set g_CurrentPage = Nothing
Set g_PreviousPage = Nothing


' This function is to set the browser of under testing system
'@code
'    Set objBrowser = Browser("name:=.*")
'    Set objCurrentBrowser = GUI_Browser_SetCurrent(objBrowser)
'@endcode
'@param objBrowser the browser object of the under testing system .

Function GUI_Browser_SetCurrent(objBrowser)
    Set g_PreviousBrowser = g_CurrentBrowser
    Set g_CurrentBrowser = objBrowser
End Function


' This function is to set current browser to the latest opened
'@code
'    GUI_Browser_SetCurrent
'@endcode

Function GUI_Browser_SetLastOpened()
	GUI_Browser_SetCurrent GUI_Browser_GetLastOpened()
End Function


' This function is to get the index of latest opened browser

Function GUI_Browser_GetLastOpenedIndex()

    Set objDescription = Description.Create  
    objDescription("micclass").value="Browser"  
    Set objBrowserObjectList=Desktop.ChildObjects(objDescription)  
    GUI_Browser_GetLastOpenedIndex = objBrowserObjectList.count  
  
    Set objDescription=Nothing  
    Set objBrowserObjectList=Nothing  
    
End Function


' This function is to get the latest opened browser

Function GUI_Browser_GetLastOpened()

    intIndx = GUI_Browser_GetLastOpenedIndex
	If intIndx > 0 Then
		GUI_Browser_GetLastOpened = Browser("creationtime:="&(intIndx-1))
    End If
    Set objDescription=Nothing  
    Set objBrowserObjectList=Nothing  
    
End Function

' This function is to get current browser of under testing system .
'@code
'    Set objCurrentBrowser = GUI_Browser_GetCurrent
'@endcode
'@return current browser of under testing system .

Function GUI_Browser_GetCurrent()
    If g_CurrentBrowser Is Nothing Then GUI_Browser_SetLastOpened     
    Set GUI_Browser_GetCurrent = g_CurrentBrowser
End Function



Function GUI_Browser_BackToPrevious()
    Set g_CurrentBrowser = g_PreviousBrowser
End Function



' This function is to set current page of under testing system .
'@code
'    Set objPage = Browser("name:=.*").Page("title:=.*")
'    GUI_Page_SetCurrent objPage
'@endcode
'@param objPage the page object of the under testing system .

Function GUI_Page_SetCurrent(objPage)
    Set g_PreviousPage = g_CurrentPage
    Set g_CurrentPage = objPage
End Function



' This function is to set default page of under testing system .
'@code
'    GUI_Page_SetDefault
'@endcode

Function GUI_Page_SetDefault()
    
    GUI_Browser_SetLastOpened
    
    Set objDescription = Description.Create  
    objDescription("micclass").value="Page"  
    Set objPageList=Desktop.ChildObjects(oDescription)  
    Set obj = objPageList(count-1)
    GUI_Page_SetCurrent obj
    
End Function



' This function is to get current page of under testing system .
'@code
'    Set objCurrentPage = GUI_Page_GetCurrent
'@endcode
'@return current page of under testing system 

Function GUI_Page_GetCurrent()
    'if current page is not initialization, set page object as default
    If g_CurrentPage Is Nothing Then GUI_Page_SetDefault
    Set GUI_Page_GetCurrent = g_CurrentPage
End Function



' This function is to back to previous Page

Function GUI_Page_BackToPrevious()
    Set g_CurrentPage = g_PreviousPage
End Function



' This function is to get current page of under testing system .
'@code
'    Set objCurrentPage = GUI_Page_Main
'@endcode
'@return current page of under testing system .

Function GUI_Page_Main()
    Set GUI_Page_Main = GUI_Page_GetCurrent()
End Function



' Sync IE browser and its page
' IE browser, page awill be synchronized.
' if any one object is buzy, try it 1 second later, and up to 20 times of trying.
'@param objBrowser object of browser
'@return true if all objects are synchronized, otherwise false

Private Function GUI_Browser_Sync(objBrowser)
    If isNull(objBrowser) Then Exit Function End If
    
    On Error Resume Next
    If Not(objBrowser.exist(0)) Then Exit Function End If
    On Error Goto 0
    
    Select Case Environment.Value("BrowserType")
    	Case "IE"
    	 	BrowserVersion=GUI_Browser_IEVersion()
    	Case "CHROME"
    		BrowserVersion=GUI_Browser_CrmVersion()
    End Select
   

    valReadyPage = "complete"

    valReadyBrowser = ""
    Select Case BrowserVersion
        Case 6 valReadyBrowser = 4
        Case 7 valReadyBrowser = 0
        Case 8 valReadyBrowser = 4
        Case 9 valReadyBrowser = 4
		Case 11 valReadyBrowser = 4
        Case else valReadyBrowser = 4
    End Select

    On Error Resume Next 'ignore error
    Set objPage = objBrowser.Page("index:=0")
    If not objPage.exist(0) Then Exit function End If

    isReady = false
    nTry = 20
    While (Not isReady) and (nTry>0)
        isReady = (objBrowser.Object.ReadyState = valReadyBrowser)
        isReady = isReady And (objPage.Object.ReadyState=valReadyPage)

        If Not isReady Then Wait 1 End If
        nTry = nTry - 1
    Wend
    
    'obj refresh
    objBrowser.RefreshObject()
    objPage.RefreshObject()
    
    On Error Goto 0 'change back

    GUI_Browser_Sync = isReady
End Function


' Synchronous IE
'@see GUI_Browser_Sync

Function GUI_Browser_SyncCustom
    Set objBrowser = GUI_Browser_GetCurrent
    GUI_Browser_Sync objBrowser
End Function



' Open Url
'@param  strUrl URL
'@code
'   GUI_Browser_OpenUrl "www.google.com"
'@endcode

Function GUI_Browser_OpenUrl(strUrl,BrowserType)
    Environment.Value("BrowserType")=Ucase(BrowserType)
    
Select Case Ucase(BrowserType)

	Case "CHROME"
    strBrowser = "chrome.exe"
    Case "IE"
    strBrowser = "iexplore.exe"
    Case "FIREFOX"
    strBrowser = "firefox.exe"
   
  End Select
  SystemUtil.Run strBrowser, strUrl
End Function


' clear browser cache

Function GUI_Browser_ClearCache()
    Set objShell = CreateObject("WScript.Shell")
    objShell.Run ("RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 255")
    Set objShell = Nothing
    wait 10
    GUI_Browser_ClearCookies
End Function



' clear browser cookies

Function GUI_Browser_ClearCookies()
    Set oWebUtil = CreateObject("Mercury.GUI_WebUtil")
    oWebUtil.DeleteCookies()
    Set oWebUtil = Nothing
End Function



' Get IE Version
'@return IEVersion

Private Function GUI_Browser_IEVersion()
    KeyPath = "HKEY_LOCAL_MACHINE\Software\Microsoft\Internet Explorer\svcVersion"
    Set objShell = CreateObject("WScript.Shell")
    strIEVersion = objShell.RegRead(KeyPath)  
    GUI_Browser_IEVersion = CINT(Left(strIEVersion,Instr(strIEVersion,".")-1)) '6,7,8, ...
    Set objShell = Nothing
End Function

' Get Chrome Version
'@return ChromeVersion

Private Function GUI_Browser_CrmVersion()
    KeyPath = "HKEY_CURRENT_USER\Software\Google\Chrome\BLBeacon\version"
    Set objShell = CreateObject("WScript.Shell")
    strCrmVersion = objShell.RegRead(KeyPath)  
    GUI_Browser_CrmVersion = CINT(Left(strCrmVersion,Instr(strCrmVersion,".")-1)) '6,7,8, ...
    Set objShell = Nothing
End Function


' Close current browser window

Function GUI_Browser_CloseCurrent()
    GUI_Browser_GetCurrent().Close
End Function 


' Close all the browser windows
Function GUI_Browser_CloseAll()

    'Create a description object
    Set oDesc = Description.Create
    oDesc("micclass").Value = "Browser"
    oDesc("version").Value = "internet explorer.*"
     
    'Loop through the collection and close each browser
    Set oChildren = Desktop.ChildObjects(oDesc)
    If oChildren.Count > 0 Then
        For x = oChildren.Count - 1 To 0 Step -1
	
				IF oChildren(x).getROProperty("visible") Then
					oChildren(x).close  
				End If
            'Browser( "creationtime:=" & i ).Close
        Next
    End If
    Set oChildren = Nothing
    Set oDesc = Nothing

    
End Function 


'Activate
Function GUI_Browser_Activate(objBrowser)
    
	hwnd = objBrowser.GetROProperty("hwnd")      
	
    On Error Resume Next               
        Window("hwnd:=" & hwnd).Activate    
        If Err.Number <> 0 Then    
            Window("hwnd:=" & Browser("hwnd:=" & hwnd).objBrowser.hwnd).Activate    
            Err.Clear    
        End If    
    On Error Goto 0 
End Function

'Refresh
Function GUI_Browser_Refresh()
	Set WshShell = CreateObject("WScript.Shell")
    WshShell.SendKeys "{F5}"
    Set WshShell = Nothing
End Function



'This function is used to close all the browsers
'@code
'   GUI_Browser_CloseAllBrowsers(oBrName)
'@endcode
Function GUI_Browser_CloseAllBrowsers(oBrName)
	' Close the specific/all browsers
	Select Case ucase(oBrName)
		Case "IE"
			'Close IE		
			SET WshShell = CreateObject("WScript.Shell")
			SET oExec=WshShell.Exec("taskkill /F /IM iexplore.EXE")
			SET oExec= Nothing
			SET WshShell =Nothing
		Case "FF"
			'Close FF
			SystemUtil.CloseProcessByName "firefox.exe"
		Case "CHROME"
			'Close CHROME
			SystemUtil.CloseProcessByName "chrome.exe"
		Case "ALL"
			'Close All Browsers
			SystemUtil.CloseProcessByName "iexplore.exe"
			SystemUtil.CloseProcessByName "firefox.exe"
			SystemUtil.CloseProcessByName "chrome.exe"
		End Select
End Function



'This function is to close the last opened brower
'@code
'    GUI_Browser_CloseLastOpened()
'@endcode
'@param None
Function GUI_Browser_CloseLastOpened()
	if(Browser("index:=0").Exist(3))then 
		Browser("index:=0").Close
	End if
End Function
'@}
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_BrowserPage.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_ClickElement.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_ClickType GUI_ClickType
'
' List of functions here
'
' @code
'
'   Function GUI_ClickElement_ByGetTextLocation(objMainView, strSearchText)
'   Function GUI_ClickElement_OnText(strText)
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''

'This function is Clicking Element By GetTextLocation Method 
'@code
'    GUI_ClickElement_ByGetTextLocation(objMainView, strSearchText)
'@endcode
'@param objMainView The object path
'@param strSearchText text to look for

Function GUI_ClickElement_ByGetTextLocation(objMainView, strSearchText) 
    
	Dim result, l, t, r, b
	l = -1
	t = -1
	r = -1
	b = -1
		
	'Get the text location
	result = objMainView.GetTextLocation(strSearchText, l, t,r, b)
	If result Then
		objMainView.Click (l+r)/2,(t+b)/2
	End If 
    
	GUI_ClickElement_ByGetTextLocation = result

End Function

'This function is Clicking On Element By ClickOnText Method 
'@code
'    GUI_ClickElement_OnText(objMainView, strText)
'@endcode
'@param objMainView The object path
'@param strText The Text Displayed On the Element

Function GUI_ClickElement_OnText(objMainView, strText)

    objMainView.ClickOnText strText

End Function

'@}''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_ClickElement.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_ClickType_Swf.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_ClickType GUI_ClickType
'About all click type
' - SwfButton
' - SwfObject
' - SwfRadioButton
' - SwfTab
' - SwfLabel
'
' List of functions here
' @code
'
'	Function GUI_SwfButton_ClickSave(objParentWindow, strSwfName)
'   Function GUI_SwfButton_Click(obj)
'   Function GUI_SwfObject_Click(obj)
'   Function GUI_SwfObject_ClickXY(obj, x, y)
'   Function GUI_SwfRadioButton_Click(obj)
'   Function GUI_SwfTab_Click(obj,value)
'   Function GUI_SwfLabel_Click(obj)
'   Function GUI_SwfList_Activate(obj)
'	Function GUI_SwfLabel_DblClick(obj, x, y)
'	Function GUI_SwfObject_SelectFormsTab(objTabControl, StrText)
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''

'This function is for clicking Save SwfButton.  If Save or OK button not visible due to
'resolution issue, send Ctrl+S instead as a workaround
'@code
'    GUI_SwfButton_ClickSave(objParentWindow, strSwfName)
'@endcode
'@param objParentWindow The parent object of the button
'@param strSwfName swf name of the button to be clicked

Function GUI_SwfButton_ClickSave(objParentWindow, strSwfName)

	Set obj = objParentWindow.SwfButton("swfname:="&strSwfName)
	If GUI_Object_IsEnabled(obj) Then	
	
		On Error Resume Next
		GUI_Object_Click obj, obj.GetTOProperty("micClass"), GUI_Object_Desc(obj)	
		If Err.Number <> 0 Then			
			'Use alternative method
			objParentWindow.Activate
			Set WshShell = CreateObject("WScript.Shell")
			WshShell.SendKeys "%s"	
			Set WshShell = Nothing			
			FRM_Logger_ReportInfoEvent "SwfButton '" & strSwfName & "' not visible, send Ctrl+S instead", Err.Description & ":" & GUI_Object_Desc(obj), null
		End If 
		On Error GoTo 0
	End If
End Function



'This function is for click on SwfButton 
'@code
'    GUI_SwfButton_Click(obj)
'@endcode
'@param obj The SwfButton object path

Function GUI_SwfButton_Click(obj)

	If( GUI_Object_WaitTillEnabled(obj) ) Then	
		GUI_Object_Click obj, obj.GetTOProperty("micClass"), GUI_Object_Desc(obj)
	Else
		FRM_Logger_ReportDebugEvent "GUI_SwfButton_Click disabled", GUI_Object_Desc(obj), null
	End If
End Function



'This function is for click on SwfObject 
'@code
'    GUI_SwfObject_Click(obj)
'@endcode
'@param obj The SwfObject object path

Function GUI_SwfObject_Click(obj)

	GUI_Object_WaitTillExist obj
	
	GUI_Object_Click obj, obj.GetTOProperty("micClass"), GUI_Object_Desc(obj)
	
End Function


'This function is for click on SwfObject using x and y coordinates
'@code
'    GUI_SwfObject_ClickXY(obj, x, y)
'@endcode
'@param obj The SwfObject object path
'@param x The x coordinate
'@param y The y coordinate

Function GUI_SwfObject_ClickXY(obj, x, y)

	GUI_Object_WaitTillExist(obj)
	
	obj.Click x, y
	
	FRM_Logger_ReportDebugEvent "Click on object " & obj.GetTOProperty("micClass"), GUI_Object_Desc(obj), null
	'FRM_Logger_ReportDebugEvent "Click on object " & objType, objDesc, null
	
End Function


'This function is for click on SwfRadioButton 
'@code
'    GUI_SwfRadioButton_Click(obj)
'@endcode
'@param obj The SwfRadioButton object path

Function GUI_SwfRadioButton_Click(obj)
	
	GUI_Object_WaitTillExist obj
	
	GUI_Object_Click obj, obj.GetTOProperty("micClass"), GUI_Object_Desc(obj)

End Function


'This function is for click on Tab 
'@code
'    GUI_SwfTab_Click(obj, value)
'@endcode
'@param obj The SwfTab object path
'@param value The SwfTab text

Function GUI_SwfTab_Click(obj, value)

	GUI_Object_WaitTillEnabled(obj)
	obj.Select value 
	FRM_Logger_ReportDebugEvent "Click on object " & obj.GetTOProperty("micClass"), GUI_Object_Desc(obj), null

End Function
'This function is for click on Object using PerformClick
'@code
'    GUI_SwfObj_PerClick(obj)
'@endcode
'@param obj The Swfobject path


Function GUI_SwfObj_PerClick(obj)

	GUI_Object_WaitTillEnabled(obj)
	objDesc=GUI_Object_Desc(obj)
	classname=obj.GetTOProperty("micClass")
	obj.Object.PerformClick 
	FRM_Logger_ReportDebugEvent "Click on object " &classname ,objDesc, null

End Function

'This function is for click on Label 
'@code
'    GUI_SwfLabel_Click(obj)
'@endcode
'@param obj The label object path


Function GUI_SwfLabel_Click(obj)

	GUI_Object_WaitTillExist obj
	obj.Click  
	FRM_Logger_ReportDebugEvent "Click on object " & obj.GetTOProperty("micClass"), GUI_Object_Desc(obj), null

End Function



'This function is for activates (double-clicks) an item in the list
'@code
'    GUI_SwfList_Activate(obj)
'@endcode
'@param obj The swflist object path
'@param value The item to select from the list

Function GUI_SwfList_Activate(obj, value)

	GUI_Object_WaitTillExist obj
	obj.Activate value
	FRM_Logger_ReportDebugEvent "Double click on object " & obj.GetTOProperty("micClass"), GUI_Object_Desc(obj), null

End Function



'This function is for double click on Label 
'@code
'    GUI_SwfLabel_DblClick(obj, x, y)
'@endcode
'@param obj The label object path
'@param x The x coordinate
'@param y The y coordinate

Function GUI_SwfLabel_DblClick(obj, x, y)

	GUI_Object_WaitTillExist obj
	obj.DblClick x, y  
	FRM_Logger_ReportDebugEvent "Double-Click on object " & obj.GetTOProperty("micClass"), GUI_Object_Desc(obj), null

End Function



'This function is for Selecting Tabs in Swfobjects  
'@code
'    GUI_SwfObject_SelectFormsTab(objTabControl, StrText)
'@endcode
'@param objTabControl The  object path
'@param StrText:Required tab to Select

Function GUI_SwfObject_SelectFormsTab(objTabControl, StrText)

	intNumberofTabs =  objTabControl.Object.TabPages.Count
	WidthOfTab = objTabControl.Object.SelectedPage.TabWidth
	X_Cord = 0
	Y_Cord = objTabControl.Object.TabHeight/2
	For TabIndex = 0 To intNumberofTabs-1 Step 1
    If(objTabControl.Object.TabPages.item(TabIndex).Text = StrText) then 
        X_Cord = X_Cord + (WidthOfTab/2)
        Exit For
    Else
        X_Cord = X_Cord + WidthOfTab
    End if
	Next
	objTabControl.Click X_Cord, Y_Cord

End Function


'@} 
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_ClickType_Swf.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_ClickType_Web.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_ClickType GUI_ClickType
'About all click type
' - WebButton
' - WebElement
' List of functions here
'
' @code
'
'   Function GUI_WebButton_Click(obj)
'   Function GUI_WebElement_Click(obj)
'   Function GUI_Image_Click(obj)
'   Function GUI_WebCheckBox_Click(obj)
'	Function GUI_Link_Click(obj)
'
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''



'This function is for click on WebButton 
'@code
'    GUI_WebButton_Click(obj)
'@endcode
'@param obj The WebButton object path

Function GUI_WebButton_Click(obj)

	If (GUI_Object_WaitTillEnabled(obj)) Then	
		GUI_Object_Click obj, obj.GetTOProperty("micClass"), GUI_Object_Desc(obj)
	Else
		FRM_Logger_ReportDebugEvent "GUI_WebButton_Click disabled", GUI_Object_Desc(obj), null
	End If
End Function



'This function is for click on WebElement 
'@code
'    GUI_WebElement_Click(obj)
'@endcode
'@param obj The WebElement object path

Function GUI_WebElement_Click(obj)

	GUI_Object_WaitTillExist obj
	obj.Click  
	FRM_Logger_ReportDebugEvent "Click on object " & obj.GetTOProperty("micClass"), GUI_Object_Desc(obj), null

End Function



'This function is for click on Imgage 
'@code
'    GUI_Image_Click(obj)
'@endcode
'@param obj The Image object 

Function GUI_Image_Click(obj)

	GUI_Object_WaitTillExist obj
	obj.Click  
	FRM_Logger_ReportDebugEvent "Click on object " & obj.GetTOProperty("micClass"), GUI_Object_Desc(obj), null

End Function



'This function is for click on WebCheckBox
'@code
'    GUI_WebCheckBox_Click(obj)
'@endcode
'@param obj The WebCheckBox object

Function GUI_WebCheckbox_Click(obj)

	If( GUI_Object_WaitTillEnabled(obj) ) Then	
		GUI_Object_Click obj, obj.GetTOProperty("micClass"), GUI_Object_Desc(obj)
	Else
		FRM_Logger_ReportDebugEvent "GUI_WebCheckBox_Click disabled", GUI_Object_Desc(obj), null
	End If
End Function



'This function is for click on Link 
'@code
'    GUI_Link_Click(obj)
'@endcode
'@param obj The Link object 

Function GUI_Link_Click(obj)

	GUI_Object_WaitTillExist obj
	obj.Click  
	FRM_Logger_ReportDebugEvent "Click on object " & obj.GetTOProperty("micClass"), GUI_Object_Desc(obj), null

End Function



'@} 
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_ClickType_Web.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_ClickType_Win.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_ClickType GUI_ClickType
'About all click type
' - Dialog
' - WinButton
' - WinCheckbox
' List of functions here
'
' @code
'
'   Function GUI_Dialog_Click(obj)
'   Function GUI_WinButton_Click(obj)
'   Function GUI_WinCheckbox_Click(obj)  
'   Function GUI_WinCheckbox_Click(obj, value)
'   Function GUI_Dialog_Encompass_OK(strDialogText)
'   Function GUI_Dialog_Encompass_OKX(intSec, strDialogText)
'   Function GUI_Dialog_Encompass_Yes(strDialogText)
'   Function GUI_Dialog_Encompass_YesX(intSec, strDialogText)
'   Function GUI_Dialog_Encompass_No(strDialogText)
'   Function GUI_Dialog_Encompass_NoX(intSec, strDialogText)
'   Function GUI_Dialog_Encompass_Click(intSec, strDialogText, strBtnText)
'   Function GUI_DialogObject_Encompass_OK(objDialog, strDialogText)
'   Function GUI_DialogObject_Encompass_OKX(objDialog, intSec, strDialogText)
'   Function GUI_DialogObject_Encompass_Yes(objDialog, strDialogText)
'   Function GUI_DialogObject_Encompass_YesX(objDialog, intSec, strDialogText)
'   Function GUI_DialogObject_Encompass_No(objDialog, strDialogText)
'   Function GUI_DialogObject_Encompass_NoX(objDialog, intSec, strDialogText)
'   Function GUI_DialogObject_Encompass_Click(objDialog, intSec, strDialogText, strBtnText)
'   Function GUI_Dialog_VerifyStaticText(obj, strExpectStatic, strDesc)
'   Function GUI_WinObject_Click(obj)
'	Function GUI_Dialog_Encompass_Cancel(strDialogText)
'	Function GUI_DialogObject_Encompass_Cancel(objDialog, strDialogText)
'	Function GUI_Dialog_Encompass_CancelX(intSec, strDialogText)
'	Function GUI_DialogObject_Encompass_CancelX(objDialog, intSec, strDialogText)
'
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''

'This function is for click on Dialog 
'@code
'    GUI_Dialog_Click(obj)
'@endcode
'@param obj The Dialog object path

Function GUI_Dialog_Click(obj)
	
	GUI_Object_WaitTillExist obj
	
	GUI_Object_Click obj, obj.GetTOProperty("micClass"), GUI_Object_Desc(obj)

End Function



'This function is for click on WinButton 
'@code
'    GUI_WinButton_Click(obj)
'@endcode
'@param obj The WinButton object path

Function GUI_WinButton_Click(obj)
	
	GUI_Object_WaitTillExist obj
	
	GUI_Object_Click obj, obj.GetTOProperty("micClass"), GUI_Object_Desc(obj)

End Function



'This function is for click on WinCheckbox 
'@code
'    GUI_WinCheckbox_Click(obj)
'@endcode
'@param obj The WinCheckbox object path

Function GUI_WinCheckbox_Click(obj)
	
	GUI_Object_WaitTillExist obj
	
	GUI_Object_Click obj, obj.GetTOProperty("micClass"), GUI_Object_Desc(obj)

End Function

'This function is for set value on WinCheckbox 
'@code
'    GUI_WinCheckbox_Set(obj, value)
'@endcode
'@param obj The WinCheckbox object path
'@param value The value to be set for checkbox

Function GUI_WinCheckbox_Set(obj, value)
	
If TypeName(value) = "Boolean" Then
		If value Then
			value = "ON"
		Elseif (Not value) Then
			value = "OFF"
		End If	
	ElseIf TypeName(value) = "Integer" Then
		If value = 1 Then
			value = "ON"
		Elseif value = 0 Then
			value = "OFF"
		End If			
	ElseIf TypeName(value) = "String" Then	
		If LCase(value) = "true" or LCase(value) = "on" Then
			value = "ON"
		Elseif LCase(value) = "false" or LCase(value) = "off" Then
			value = "OFF"
		End If	
	End If	
	GUI_Object_WaitTillEnabled(obj)
	obj.Set value 
	GUI_InputType_Log obj, value

End Function


'Click OK on Dialog
'@see GUI_Dialog_Encompass_Click(intSec, strDialogText, strBtnText)
'@param strDialogText the text to look for in the dialog.  If provided, dialog is click only if a dialog 
'   contains the provided text is found; if empty, button is clicked no matter what

Function GUI_Dialog_Encompass_OK(strDialogText)

    GUI_Dialog_Encompass_Click g_Default_WaitTime, strDialogText, "OK"
    
End Function



'@see GUI_Dialog_Encompass_OK
Function GUI_DialogObject_Encompass_OK(objDialog, strDialogText)

	GUI_DialogObject_Encompass_Click objDialog, g_Default_WaitTime, strDialogText, "OK"
	
End Function



'Click OK on Dialog
'@see GUI_Dialog_Encompass_Click(intSec, strDialogText, strBtnText)
'@param intSec number of seconds to wait for the dialog window to appear
'@param strDialogText the text to look for in the dialog.  If provided, dialog is click only if a dialog 
'   contains the provided text is found; if empty, button is clicked no matter what

Function GUI_Dialog_Encompass_OKX(intSec, strDialogText)

    GUI_Dialog_Encompass_Click intSec, strDialogText, "OK"
    
End Function



'@see GUI_Dialog_Encompass_OKX
Function GUI_DialogObject_Encompass_OKX(objDialog, intSec, strDialogText)

	GUI_DialogObject_Encompass_Click objDialog, intSec, strDialogText, "OK"
	
End Function




'Click Yes on Dialog
'@see GUI_Dialog_Encompass_Click(intSec, strDialogText, strBtnText)
'@param strDialogText the text to look for in the dialog.  If provided, dialog is click only if a dialog 
'   contains the provided text is found; if empty, button is clicked no matter what

Function GUI_Dialog_Encompass_Yes(strDialogText)

    GUI_Dialog_Encompass_Click g_Default_WaitTime, strDialogText, "Yes"
    
End Function



'@see GUI_Dialog_Encompass_Yes
Function GUI_DialogObject_Encompass_Yes(objDialog, strDialogText)

	GUI_DialogObject_Encompass_Click objDialog, g_Default_WaitTime, strDialogText, "Yes"
	
End Function




'Click Yes on Dialog
'@see GUI_Dialog_Encompass_Click(intSec, strDialogText, strBtnText)
'@param intSec number of seconds to wait for the dialog window to appear
'@param strDialogText the text to look for in the dialog.  If provided, dialog is click only if a dialog 
'   contains the provided text is found; if empty, button is clicked no matter what

Function GUI_Dialog_Encompass_YesX(intSec, strDialogText)
	
    GUI_Dialog_Encompass_Click intSec, strDialogText, "Yes"
    
End Function



'@see GUI_Dialog_Encompass_YesX 
Function GUI_DialogObject_Encompass_YesX(objDialog, intSec, strDialogText)

	GUI_DialogObject_Encompass_Click objDialog, intSec, strDialogText, "Yes"
	
End Function



'Click No on Dialog
'@see GUI_Dialog_Encompass_Click(intSec, strDialogText, strBtnText)
'@param strDialogText the text to look for in the dialog.  If provided, dialog is click only if a dialog 
'   contains the provided text is found; if empty, button is clicked no matter what

Function GUI_Dialog_Encompass_No(strDialogText)

    GUI_Dialog_Encompass_Click g_Default_WaitTime, strDialogText, "No" 
    
End Function



'@see GUI_Dialog_Encompass_No 
Function GUI_DialogObject_Encompass_No(objDialog, strDialogText)

	GUI_DialogObject_Encompass_Click objDialog, g_Default_WaitTime, strDialogText, "No"
	
End Function




'Click No on Dialog
'@see GUI_Dialog_Encompass_Click(intSec, strDialogText, strBtnText)
'@param intSec number of seconds to wait for the dialog window to appear
'@param strDialogText the text to look for in the dialog.  If provided, dialog is click only if a dialog 
'   contains the provided text is found; if empty, button is clicked no matter what

Function GUI_Dialog_Encompass_NoX(intSec, strDialogText)

    GUI_Dialog_Encompass_Click intSec, strDialogText, "No"
    
End Function



'@see GUI_Dialog_Encompass_NoX 
Function GUI_DialogObject_Encompass_NoX(objDialog, intSec, strDialogText)

	GUI_DialogObject_Encompass_Click objDialog, intSec, strDialogText, "No"
	
End Function




'Click Encompass Dialog
'@param intSec number of seconds to wait for the dialog window to appear
'@param strDialogText the text to look for in the dialog.  If provided, dialog is click only if a dialog 
'   contains the provided text is found; if empty, button is clicked no matter what
'@param strBtnText button to click
Function GUI_Dialog_Encompass_Click(intSec, strDialogText, strBtnText)

	
	If SwfWindow("swfname:=MainForm").Dialog("index:=0").Exist(intSec) Then
		Set objDialog = SwfWindow("swfname:=MainForm").Dialog("index:=0","visible:=True","ispopupwindow:=True")
		boolExist = True
	Elseif SwfWindow("swfname:=MainForm").SwfWindow("swfname:=SetUpContainer|NCMLDReportForm|DashboardTemplateFormDialog").Dialog("index:=0").Exist(1) Then
		Set objDialog = SwfWindow("swfname:=MainForm").SwfWindow("swfname:=SetUpContainer|NCMLDReportForm|DashboardTemplateFormDialog").Dialog("index:=0","visible:=True","ispopupwindow:=True")
		boolExist = True
		
	Elseif SwfWindow("swfname:=MainForm").SwfWindow("swfname:=SetUpContainer").SwfWindow("swfname:=AddEditTPOFee|EditCompanyDetailsDialog|AddEditUserCEDialog").Dialog("index:=0").Exist(1) Then
		Set objDialog = SwfWindow("swfname:=MainForm").SwfWindow("swfname:=SetUpContainer").SwfWindow("swfname:=AddEditTPOFee|EditCompanyDetailsDialog|AddEditUserCEDialog").Dialog("index:=0","visible:=True","ispopupwindow:=True")
		boolExist = True
	ElseIf SwfWindow("swfname:=SettingsToolMain").Dialog("regexpwndtitle:=Encompass").Exist(1) Then
		Set objDialog = SwfWindow("swfname:=SettingsToolMain").Dialog("regexpwndtitle:=Encompass")
		boolExist = True
	ElseIf SwfWindow("swfname:=SettingsToolMain").SwfWindow("swfname:=SRPTemplateEditor").Dialog("regexpwndtitle:=Encompass").Exist(1) Then
		Set objDialog = SwfWindow("swfname:=MainForm").SwfWindow("swfname:=SRPTemplateEditor").Dialog("regexpwndtitle:=Encompass")
		boolExist = True
	Elseif Dialog("regexpwndtitle:=Encompass","index:=0").Exist(1) Then
		Set objDialog = Dialog("regexpwndtitle:=Encompass","index:=0","visible:=True","ispopupwindow:=True")
		boolExist = True
	End If
	
	If boolExist Then
		GUI_DialogObject_Encompass_Click objDialog, intSec, strDialogText, strBtnText
	End If
	Set objDialog = Nothing
	
End Function


	
'Click Encompass Dialog
'@param intSec number of seconds to wait for the dialog window to appear
'@param strDialogText the text to look for in the dialog.  If provided, dialog is click only if a dialog 
'   contains the provided text is found; if empty, button is clicked no matter what
'@param strBtnText button to click

Function GUI_DialogObject_Encompass_Click(objDialog, intSec, strDialogText, strBtnText)
	If UTIL_String_IsNotEmpty(strDialogText) Then
		If objDialog.Static("text:=.*"&strDialogText&".*").Exist(1) Then
			boolFound = True
			strText = objDialog.Static("text:=.*"&strDialogText&".*").GetROProperty("text")
			FRM_Logger_ReportInfoEvent "Encompass Dialog", "Click "&strBtnText&", dialog text is '"&strText&"'", null
	
			objDialog.Activate
		
			If objDialog.WinButton("text:=.*"&strBtnText,"index:=0").Exist(5) Then
	
			GUI_WinButton_Click	objDialog.WinButton("text:=.*"&strBtnText, "index:=0")     
			End If 
						
		End If    
	Else     				
		If objDialog.WinButton("text:=.*"&strBtnText, "index:=0").Exist(5) Then
			boolTextFound = False			   
			If objDialog.Static("index:=1").Exist(1) Then 
				strText = objDialog.Static("index:=1").GetROProperty("text")
				If UTIL_String_IsNotEmpty(strText) Then
					boolTextFound = True
				End If
			End If	
			 'If "index:=1" text is empty, try the last one
			If Not boolTextFound Then 
				'Find last index 
				For i=2 To 10 
					If Not objDialog.Static("index:="&i).Exist(1) Then 
						Exit For
					End If
				Next
				intIdx = i-1
				If objDialog.Static("index:="&intIdx).Exist(1) Then                
					strText = objDialog.Static("index:="&intIdx).GetROProperty("text")						
				End If			
				FRM_Logger_ReportInfoEvent "Encompass Dialog", "Click "&strBtnText&", dialog text is '"&strText&"'", null
			End If	
			GUI_WinButton_Click objDialog.WinButton("text:=.*"&strBtnText, "index:=0")            
		End If							   
	End If        
            
End Function


           
'This function is for Verify the static text on Dialog 
'@code
'    GUI_Dialog_VerifyStaticText(obj, strExpectStatic, strDesc)
'@endcode
'@param obj The Dialog static object
'@param strExpectStatic The expect static's text
'@param strDesc The description

Function GUI_Dialog_VerifyStaticText(obj, strExpectStatic, strDesc)
	
	GUI_Object_WaitTillExist obj
    GUI_Object_ValidateProperty obj, "text", strExpectStatic ,"pop up window's static"
End Function

'This function is for click on WinObject
'@code
'    GUI_Winobject_Click(obj)
'@endcode
'@param obj The WinObject object path

Function GUI_WinObject_Click(obj)
	
	GUI_Object_WaitTillExist obj
	
	GUI_Object_Click obj, obj.GetTOProperty("micClass"), GUI_Object_Desc(obj)

End Function



'Click OK on Dialog
'@see GUI_Dialog_Encompass_Click(intSec, strDialogText, strBtnText)
'@param strDialogText the text to look for in the dialog.  If provided, dialog is click only if a dialog 
'   contains the provided text is found; if empty, button is clicked no matter what

Function GUI_Dialog_Encompass_Cancel(strDialogText)

    GUI_Dialog_Encompass_Click g_Default_WaitTime, strDialogText, "Cancel"
    
End Function



'@see GUI_Dialog_Encompass_Cancel
Function GUI_DialogObject_Encompass_Cancel(objDialog, strDialogText)

	GUI_DialogObject_Encompass_Click objDialog, g_Default_WaitTime, strDialogText, "Cancel"
	
End Function



'Click Cancel on Dialog
'@see GUI_Dialog_Encompass_Click(intSec, strDialogText, strBtnText)
'@param intSec number of seconds to wait for the dialog window to appear
'@param strDialogText the text to look for in the dialog.  If provided, dialog is click only if a dialog 
'   contains the provided text is found; if empty, button is clicked no matter what

Function GUI_Dialog_Encompass_CancelX(intSec, strDialogText)

    GUI_Dialog_Encompass_Click intSec, strDialogText, "Cancel"
    
End Function



'@see GUI_Dialog_Encompass_CancelX 
Function GUI_DialogObject_Encompass_CancelX(objDialog, intSec, strDialogText)

	GUI_DialogObject_Encompass_Click objDialog, intSec, strDialogText, "Cancel"
	
End Function

'@} 
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_ClickType_Win.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_InputType_Common.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_InputType GUI_InputType
'
' List of functions here
'
' @code
'
'   Function GUI_InputType_Log(obj, value)   
'
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''


'This function is for logging input type object 
'@code
'    GUI_InputType_Log(obj, value)
'@endcode
'@param obj The object path
'@param value  The value to set

Function GUI_InputType_Log(obj, value)
	FRM_Logger_ReportDebugEvent "Set value", "value=" & value &", "& GUI_Object_Desc(obj), null
End Function 





'@} 
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_InputType_Common.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_InputType_Swf.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_InputType GUI_InputType
'About all Swf input type
' - SwfComboBox
' - SwfEdit
' - SwfList
' - SwfCheckbox
' - SwfToolbar
' - SwfCalendar
' - SwfEditor
' - SwfObject
' List of functions here
'
' @code
'
'   Function GUI_SwfEdit_Set(obj, value)
'   Function GUI_SwfList_Select(obj, value)
'   Function GUI_SwfComboBox_Select(obj, value)
'   Function GUI_SwfComboBox_PartSelect(obj, value)
'   Function GUI_SwfCheckbox_Set(obj, value)   
'	Function GUI_SwfToolbar_ShowDropdown(objToolbar, strItemName)
'	Function GUI_SwfTreeView_Select(objList, strItemName)
'   Function GUI_SwfCalendar_SetDate(obj, value)
'	Function GUI_SwfEditor_Type(obj, value)
'	Function GUI_SwfEdit_Type(obj, value)
'   Function GUI_SwfList_SetCheckbox(obj, strItemName, value)
'   Function GUI_SwfComboBox_ValidateContent(obj, arrExpectedValues)
'	Function GUI_SwfToolBar_VerifyItemExists(obj, strItemName)
'	Function GUI_SwfObject_SelectTab(obj, strTabName)
'	Function GUI_SwfComboBox_VerifyItemExists(obj, strItemName)
'	Function GUI_SwfComboBox_SelectwithInfoMsg(obj, value)	
'	Function GUI_List_SelectwithInfoMsg(objList, strItemName)
'	Function GUI_SwfComboBoxInSwfObject_Select(objSwfObject, objList, objComboBox, RowNumber, ColumnNumber, Value2Select)

'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''


'This function is for set swfedit 
'@code
'    GUI_SwfEdit_Set(obj, value)
'@endcode
'@param obj The SwfEdit object path
'@param value  The value to set

Function GUI_SwfEdit_Set(obj, value)

	GUI_Object_WaitTillEnabled(obj)
	obj.Set value 
	GUI_InputType_Log obj, value

End Function



'This function is for select SwfList item 
'@code
'    GUI_SwfList_Select(obj, value)
'@endcode
'@param obj The SwfList object path
'@param value  The value to set

Function GUI_SwfList_Select(obj, value)	

	GUI_Object_WaitTillEnabled(obj)
	obj.Select value 
	GUI_InputType_Log obj, value

End Function



'This function is for select SwfComboBox item
'@code
'    GUI_SwfComboBox_Select(obj, value)
'@endcode
'@param obj The SwfComboBox object path
'@param value  The value to select

Function GUI_SwfComboBox_Select(obj, value)	

	GUI_Object_WaitTillEnabled(obj)
	If obj.GetROProperty("text") <> value Then 
		obj.Object.Focus   'Added for scrolling down to the object
		obj.Select value 
		GUI_InputType_Log obj, value
	End If
End Function

'This function is for select SwfComboBox item
'@code
'    GUI_SwfComboBox_PartSelect(obj, value)
'@endcode
'@param obj The SwfComboBox object path
'@param value  The part value to select

Function GUI_SwfComboBox_PartSelect(obj, value)	

	GUI_Object_WaitTillEnabled(obj)
	If obj.GetROProperty("text") <> value Then 
		item=split(obj.GetROProperty("all items"),VbLf)
		For i = 0 To Ubound(item) Step 1
			If instr(item(i),value)>0 Then
				obj.Object.Focus   'Added for scrolling down to the object
		        obj.Select item(i) 
		        Exit For
			End If
		Next
		
		GUI_InputType_Log obj, item(i)
	End If
End Function


'This function is for set SwfCheckbox object 
'@code
'    GUI_SwfCheckbox_Set(obj, value)
'@endcode
'@param obj The SwfCheckbox object path
'@param value  The value to set

Function GUI_SwfCheckbox_Set(obj, value)

	If TypeName(value) = "Boolean" Then
		If value Then
			value = "ON"
		Elseif (Not value) Then
			value = "OFF"
		End If	
	ElseIf TypeName(value) = "Integer" Then
		If value = 1 Then
			value = "ON"
		Elseif value = 0 Then
			value = "OFF"
		End If			
	ElseIf TypeName(value) = "String" Then	
		If LCase(value) = "true" or LCase(value) = "on" Then
			value = "ON"
		Elseif LCase(value) = "false" or LCase(value) = "off" Then
			value = "OFF"
		End If	
	End If	
	GUI_Object_WaitTillEnabled(obj)
	obj.Set value 
	GUI_InputType_Log obj, value

End Function


'Waits that the object of a list is exists, then selects an item in a list
'@code
'    GUI_SwfToolbar_ShowDropdown(objToolbar, strItemName)
'@endcode
'@param objToolbar the toolbar object
'@param strItemName item to be select

Function GUI_SwfToolbar_Select(objToolbar, strItemName)
	If GUI_Object_WaitTillExist(objToolbar) Then
		objToolbar.Select strItemName
		wait 1
	End If
End Function



'Checks that the object of a dropdown menu is exist, then selects an item in a dropdown menu
'@code
'    GUI_SwfToolbar_ShowDropdown(objToolbar, strItemName)
'@endcode
'@param objToolbar the toolbar object
'@param strItemName item to be select

Function GUI_SwfToolbar_ShowDropdown(objToolbar, strItemName)
	If GUI_Object_WaitTillExist(objToolbar) Then
		objToolbar.ShowDropdown strItemName
		wait 1
	End If
End Function



'Waits that the object of a list is exists, then selects an item in a list
'@code
'    GUI_SwfTreeView_Select(objList, strItemName)
'@endcode
'@param objToolbar the list object
'@param strItemName text of the list item

Function GUI_SwfTreeView_Select(objList, strItemName)
	GUI_Object_WaitTillExist objList
	objList.Select strItemName
End Function


'Waits that the object of a list is exists, then selects an item in a list
'@code
'    GUI_SwfCalendar_SetDate(obj, value)
'@endcode
'@param obj the SwfCalendar object
'@param value the value to set 

Function GUI_SwfCalendar_SetDate(obj, value)
	GUI_Object_WaitTillExist obj
	obj.SetDate value
End Function

'Type a date in swfcalendar
'@code
'    GUI_SwfCalendar_TypeDate(obj, value)
'@endcode
'@param obj the SwfCalendar object
'@param value the value to set 

Function GUI_SwfCalendar_TypeDate(obj, value)
	GUI_Object_WaitTillExist obj
	obj.Type value
End Function

'This function is for set SwfEditor
'@code
'    GUI_SwfEditor_Type(obj, value)
'@endcode
'@param obj The SwfEditor object path
'@param value  The value to set

Function GUI_SwfEditor_Type(obj, value)

	GUI_Object_WaitTillEnabled(obj)
	obj.Type value 
	GUI_InputType_Log obj, value

End Function

'Function To validate the contents of the combo box with the array of expected values passed to the function
'@code
'    GUI_SwfComboBox_ValidateContent 
'@endcode
'@param obj- object which property to verify and judge
'@param value - array of expected values to compare with the actual values in Combo box

Function GUI_SwfComboBox_ValidateContent(obj, arrExpectedValues)
	Dim intCount,strExpectedValue,strActualValue
	intCount=obj.GetItemsCount
	For i= 0 To intCount - 1
		strActualValue = obj.GetItem(i)
		strExpectedValue = arrExpectedValues(i)
		FRM_VerifyEqual strExpectedValue,strActualValue,"Comparing All Actions"&strActualValue,"Actions should match"
	Next
End Function


'@} 


'This function is for type value in swfedit 
'@code
'    GUI_SwfEdit_Type(obj, value)
'@endcode
'@param obj The SwfEdit object path
'@param value  The value to set

Function GUI_SwfEdit_Type(obj, value)

	GUI_Object_WaitTillEnabled(obj)
	obj.Type value 
	GUI_InputType_Log obj, value

End Function

'This function is for setting a checkbox in a SwfListView 
'@code
'    GUI_SwfList_SetCheckbox(obj, strItemName, value)
'@endcode
'@param obj - The SwfEdit object path
'@param strItemName - Row name in which you want to set the checkbox
'@param value  - The value to set (micChecked/micunChecked)

Function GUI_SwfList_SetCheckbox(obj, strItemName, value)

	GUI_Object_WaitTillEnabled(obj)
	obj.SetItemState strItemName, value 
	GUI_InputType_Log obj, value

End Function

'This function verifies whether an item exists in SwfToolBar item list
'@code
'    GUI_SwfToolBar_VerifyItemExists(obj, strItemName)
'@endcode
'@param obj the toolbar object
'@param strItemName item to be verified

Function GUI_SwfToolBar_VerifyItemExists(obj, strItemName)

	GUI_Object_WaitTillExist (obj)
	boolExist = obj.ItemExists (strItemName)
	GUI_SwfToolBar_VerifyItemExists = boolExist
		
End Function

'This function is for selecting a tab of SwfObject type 
'@code
'    GUI_SwfObject_SelectTab(obj, strTabName)
'@endcode
'@param obj The SwfObject object path
'@param value  Tab name to select

Function GUI_SwfObject_SelectTab(obj, strTabName)

	Dim l:l = -1
	Dim t:t = -1
	Dim r:r = -1
	Dim b:b = -1
	
	GUI_Object_WaitTillEnabled(obj)
	obj.GetTextLocation strTabName, l, t, r, b
	x = (l+r)/2
	y = (t+b)/2
	GUI_SwfObject_ClickXY obj, x, y
	GUI_InputType_Log obj, value

End Function


'This function is for setting value in SwfPropertyGrid
'@code
'    GUI_SwfPropertyGrid_SetValue(obj,strProperty,value)
'@endcode
'@param obj The SwfObject object path
'@param strProperty property to select set value
'@param value  value to set

Function GUI_SwfPropertyGrid_SetValue(obj,strProperty,value)
    
    GUI_Object_WaitTillExist (obj)
    
    obj.SetValue strProperty,value

    GUI_InputType_Log obj, value

End Function

'This function is for select property from SwfPropertyGrid
'@code
'    GUI_SwfPropertyGrid_SelectProperty(obj,strProperty)
'@endcode
'@param obj The SwfObject object path
'@param strProperty property to select set value

Function GUI_SwfPropertyGrid_SelectProperty(obj,strProperty)

    GUI_Object_WaitTillExist (obj)
    
    obj.SelectProperty strProperty
    
End Function



'This function verifies whether an item exists in SwfComboxBox item list
'@code
'    GUI_SwfComboBox_VerifyItemExists(obj, strItemName)
'@endcode
'@param obj the Combo Box object
'@param strItemName item to be verified

Function GUI_SwfComboBox_VerifyItemExists(obj, strItemName)

	GUI_Object_WaitTillExist (obj)
	boolItemExists = False
	
	intCount=obj.GetItemsCount
	For i= 0 To intCount - 1
		strActualValue = obj.GetItem(i)
		If(InStr(strActualValue, strItemName) > 0) then 
			boolItemExists = True
			Exit For
		End if
	Next
	GUI_SwfComboBox_VerifyItemExists = boolItemExists
		
End Function
'@}
'This function is for select SwfComboBox item
'@code
'    GUI_SwfComboBox_Select(obj, value)
'@endcode
'@param obj The SwfComboBox object path
'@param value  The value to select

Function GUI_SwfComboBox_SelectwithInfoMsg(obj, value)	

	GUI_Object_WaitTillEnabled(obj)
	If obj.GetROProperty("text") <> value Then 
		obj.Select value 
		FRM_Logger_ReportInfoEvent "Selection of List Item: ", "'" & GUI_Object_GetPropertyValue(obj,"Selection") & "' list Item has been selected.", null
	End If
End Function

'This function is for select SwfList item
'@code
'    GUI_List_SelectwithInfoMsg(objList, strItemName)
'@endcode
'@param obj The swfList object path
'@param strItemName  The value to select
Function GUI_List_SelectwithInfoMsg(objList, strItemName)
	GUI_Object_WaitTillExist objList
	objList.Select strItemName
	FRM_Logger_ReportInfoEvent "Selection of List Item: ", "'" & GUI_Object_GetPropertyValue(objList,"Selection") & "' list Item has been selected.", null
End Function



'This function is for changing the access rights in Resources/Report  in User Groups
'@code
'    GUI_SwfComboBoxInSwfObject_Select(objSwfObject, objList, objComboBox, RowNumber, ColumnNumber, Value2Select)
'@endcode
'@param objSwfObject - swfobject
'@param objList list - object
'@param objComboBox - combobox object
'@param RowNumber - row number
'@param ColumnNumber - column number
'@param Value2Select - access right value to be selected

Function GUI_SwfComboBoxInSwfObject_Select(objSwfObject, objList, objComboBox, RowNumber, ColumnNumber, Value2Select)

     Set intColumns =  objList.Object.Columns
     XCord = 0
     YCord = 0
     objList.Object.Focus  'Added on 08/03/2017 for scrolling down to object and make it visible
     YCord = (YCord * (RowNumber-1) * objList.Object.Height) + (objList.Object.Height * 0.33)
     For Column = 0 To ColumnNumber-2 Step 1
     	XCord = XCord + intColumns.Item(Column).Width
     Next
     XCord = Round(XCord+(intColumns.Item(ColumnNumber-1).Width*0.9),0)
     objSwfObject.DblClick CInt(XCord), CInt(YCord), micLeftBtn
     objComboBox.Select Value2Select
	 
	 Set intColumns = Nothing
	 
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_InputType_Swf.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_InputType_Web.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_InputType GUI_InputType
'About all input type
' - WebEdit
' - WebCheckBox
' - WebList
' - WebRadioGroup
' List of functions here
'
' @code
'
'   Function GUI_WebList_Select(obj, value)
'   Function GUI_WebEdit_Set(obj, value)
'   Function GUI_WebCheckbox_Set(obj, value)
'   Function GUI_WebCheckbox_IsChecked(objChkBox)
'   Function GUI_WebRadioGroup_Select(obj, value)
'   Function GUI_WebList_NGSelect(obj, value)
'   Function NGSelect(ByRef obj, ByVal ValToSel)
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''



'This function is for select WebList item 
'@code
'    GUI_WebList_Select(obj, value)
'@endcode
'@param obj The WebList object path
'@param value  The value to set

Function GUI_WebList_Select(obj, value)	

	GUI_Object_WaitTillEnabled(obj)
	obj.Select value 
	GUI_InputType_Log obj, value

End Function




'This function is for set webedit 
'@code
'    GUI_WebEdit_Set(obj, value)
'@endcode
'@param obj The WebEdit object path
'@param value  The value to set

Function GUI_WebEdit_Set(obj, value)

	GUI_Object_WaitTillEnabled(obj)
	obj.Set value 
	GUI_InputType_Log obj, value

End Function



'This function is for set webcheckbox object 
'@code
'    GUI_WebCheckbox_Set(obj, value)
'@endcode
'@param obj The WebCheckbox object path
'@param value  The value to set

Function GUI_WebCheckbox_Set(objChkBox, value)
    
    If TypeName(value) = "Boolean" Then
		If value Then
			value = "ON"
		Elseif (Not value) Then
			value = "OFF"
		End If	
	ElseIf (TypeName(value) = "Integer") OR (TypeName(value) = "Double") Then
		If value = 1 Then
			value = "ON"
		Elseif value = 0 Then
			value = "OFF"
		End If			
	ElseIf TypeName(value) = "String" Then	
		If LCase(value) = "true" or LCase(value) = "on" Then
			value = "ON"
		Elseif LCase(value) = "false" or LCase(value) = "off" Then
			value = "OFF"
		End If	
	End If
    GUI_Object_WaitTillEnabled(objChkBox)
	objChkBox.Set value
	GUI_InputType_Log objChkBox, value

End Function


'checks if webcheckbox object is checked
'@return True if checkbox is checked; False if not

Function GUI_WebCheckbox_IsChecked(objChkBox)
	If objChkBox.GetROProperty("checked") = 1 Then
        GUI_WebCheckbox_IsChecked = True
	Else
		GUI_WebCheckbox_IsChecked = False
	End If
End Function

	


'This function is for select webradiogroup 
'@code
'    GUI_WebRadioGroup_Select(obj, value)
'@endcode
'@param obj The object path
'@param value  The value to select

Function GUI_WebRadioGroup_Select(obj, value)
    GUI_Object_WaitTillEnabled(obj)
    obj.select value
    GUI_InputType_Log obj, value
End Function 

'This function is for Selecting Corresponding element for a webelement  with Ng Controls 
'@code
'    GUI_WebList_NGSelect(obj, value)
'@endcode
'@param obj The WebList object path
'@param value  The value to set

Function GUI_WebList_NGSelect(obj, value)	
	RegisterUserFunc "WebElement","Drop","NGSelect"
	GUI_Object_WaitTillVisible(obj)
	obj.Drop(value)
	GUI_InputType_Log obj, value
	UnregisterUserFunc "WebElement","Drop"
End Function

Function NGSelect(obj,ValToSel)
		Set oDesc=Description.Create	
		 oDesc("micclass").value="WebElement"
    	 oDesc("innertext").value=ValToSel
    	 GUI_WebElement_Click obj
    	 Set objPage=Browser("title:=.*").Page("url:="&mid((obj.object.BaseURI),1,15)&".*")
    	 Set itemMenu=objPage.ChildObjects(oDesc)
    	 itemMenu(0).Click
    
End Function
'@} 
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_InputType_Web.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_InputType_Win.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_InputType GUI_InputType
'About all input type
' - WinComboBox
' - WinEdit
' List of functions here
'
' @code
'
'   Function GUI_WinEdit_Set(obj, value)
'   Function GUI_WinComboBox_Select(obj, value)
'	Function GUI_WinEdit_Type(obj, value)
'   Function GUI_WinEdit_Clear(obj)

'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''

'This function is for set WinEdit 
'@code
'    GUI_WinEdit_Set(obj, value)
'@endcode
'@param obj The WinEdit object path
'@param value  The value to set

Function GUI_WinEdit_Set(obj, value)

	GUI_Object_WaitTillEnabled(obj)
	obj.Set value 
	GUI_InputType_Log obj, value

End Function



'This function is for select WinComboBox item
'@code
'    GUI_WinComboBox_Select(obj, value)
'@endcode
'@param obj The WinComboBox object path
'@param value  The value to select

Function GUI_WinComboBox_Select(obj, value)	

	GUI_Object_WaitTillEnabled(obj)
	obj.Select value 
	GUI_InputType_Log obj, value

End Function


'This function is for typing a value in WinEdit 
'@code
'    GUI_WinEdit_Type(obj, value)
'@endcode
'@param obj The WinEdit object path
'@param value  The value to type

Function GUI_WinEdit_Type(obj, value)

	GUI_Object_WaitTillEnabled(obj)
	obj.Type value 
	GUI_InputType_Log obj, value
 
End Function

'This function is for clearing a value in WinEdit 
'@code
'    GUI_WinEdit_Clear(obj)
'@endcode
'@param obj The WinEdit object path


Function GUI_WinEdit_Clear(obj)

	GUI_Object_WaitTillEnabled(obj)
	hwnd = obj.WinEdit("visible:=True","index:=0").GetROProperty("hwnd")
	Set parentObj=obj.GetToProperty("Parent")
	
	parentObj.WinEdit("hwnd:=" &hwnd).Click
	parentObj.WinEdit("hwnd:=" &hwnd).Set ""
	
 
End Function


'@} 
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_InputType_Win.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_List.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_List GUI_List
'
' List of functions here
'
' @code
'
'   Function GUI_List_GetRowCount(objMainView, intColNumOrText, strSearchText)
'   Function GUI_List_GetRowIndex(objMainView, intColNumOrText, strSearchText)
'   Function GUI_List_TextExists(objMainView, intColNumOrText, strSearchText)
'   Function GUI_List_GetColumnIndex(objMainView, intColText)
'	Function GUI_List_GetColumnIndexByTitle(obj, strColumnTitle)
'   Function GUI_List_ClickRow(objMainView, objScrollBar, intColNumOrText, strSearchText, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'   Function GUI_List_ActOnRow(objMainView, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'   Private Function GUI_List_ActOnRow_XY(objMainView, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol)
'   Private Function GUI_List_MoveToRow(objMainView, objScrollBar, intColNumOrText, strSearchText, hasTitleRow, hasFilterRow, hasCheckboxCol)
'   Function GUI_List_ClickCheckbox(objMainView,objScrollBar,strSearchText,intColNumOrText,hasTitleRow,hasFilterRow,strAction,boolToBeChecked)
'   Function GUI_List_Select(objList, strItemName)
'	Function GUI_List_GetCellData(objMainView, intRowNum, intColNum)
'   Function GUI_List_ValidateCellData(objMainView, intRowNum, intColNumOrText, strExpectedValue)
'	Function GUI_List_ClickOnCellData(objMainView, intRowNum, intColNum, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'   Function GUI_List_SelectTargetFileInFileListBox (strFilePath)
'   Function GUI_List_SelectAndActivateListItem(expectedItem)
'   Function GUI_List_ValidateColumnName(objMainView, intColText)
'   Function GUI_List_ClickCheckboxByRowNum(objMainView,objScrollBar,intRowNum,hasTitleRow,hasFilterRow,strAction,boolToBeChecked)
'   Private Function GUI_List_MoveToRowByNum(objMainView, objScrollBar, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol)
'   Function GUI_List_ClickOnCell(objMainView, objScrollBar,intRowNum, intColNum, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'	Function GUI_List_LocateAndSetCheckBox(objMainView,strSearchPartialText,intColNumOrText,colCheckBox,boolToBeChecked)
'	Function GUI_List_GetRowIndexByPartialText(objMainView, intColNumOrText, strSearchPartialText)
'	Function GUI_List_SelectItem(objMainView,strSearchPartialText,intColNumOrText)
'	Function GUI_List_GetNumberofRows(objMainView)
'	Function GUI_List_GetRowIndexBySubString(objMainView, intColNumOrText, strSearchSubStr)
'	Private Function GUI_List_MoveToRowbySubString(objMainView, objScrollBar, intColNumOrText, strSearchSubStr, hasTitleRow, hasFilterRow, hasCheckboxCol)
'	Function GUI_List_ClickRowbySubString(objMainView, objScrollBar, intColNumOrText, strSearchSubStr, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'	Function GUI_List_SelectCheckBoxinCell(objMainView, intColNumOrText, intRowNum)
'	Function GUI_List_UnSelectCheckBoxinCell(objMainView, intColNumOrText, intRowNum)
'	Function GUI_List_VerifyImageExistance(objMainView, intRowNum, intColNumOrText)
'	Function GUI_List_SelectAndActivateItemInList(objList, strItemName)
'	Function GUI_List_VerifyItemExists(objList,strItemName)
'	Function GUI_List_ValidateCheckBoxState(objMainView,strColumnName,strIndexes)
' 	Function GUI_List_ValidateCellDataWithCustomMsg(objMainView, intRowNum, intColNumOrText, strExpectedValue,strFieldDesc)
'	Function GUI_List_ValidateCheckboxCheckedByName(objGridView,strItemsColumnName,arrStrItemNames,strCheckboxColumnName)
'	Function GUI_List_SelectItemWithPartialText(objMainView,strSearchPartialText,intColNumOrText)
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''

'This function is finding row count for the searched text 
'@code
'    GUI_List_GetRowCount(objMainView, intColNumOrText, strSearchText)
'@endcode
'@param objMainView The object path
'@param intColNumOrText column number or column name
'@param strSearchText text to look for

Function GUI_List_GetRowCount(objMainView, intColNumOrText, strSearchText)

    If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If
	
	intTotalRows = objMainView.Object.Items.Count
	intRowCount = 0
	For i = 0 To intTotalRows  - 1
		strActualText = objMainView.Object.Items.Item(i).Subitems.Item(intColNum).Text
		If strActualText = strSearchText Then
			intRowCount = intRowCount + 1
		End If	
	Next
	GUI_List_GetRowCount = intRowCount
End Function


'This function is finding row number for the searched text 
'@code
'    GUI_List_GetRowIndex(objMainView, intColNumOrText, strSearchText)
'@endcode
'@param objMainView The object path
'@param intColNumOrText column number or column name
'@param strSearchText text to look for

Function GUI_List_GetRowIndex(objMainView, intColNumOrText, strSearchText)

    If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If
	
	intRowNum = -1	
	' Check the expect item whether exist in the list
	intRowCount = objMainView.Object.Items.Count
	For i = 0 To intRowCount  - 1
		strActualText = objMainView.Object.Items.Item(i).Subitems.Item(intColNum).Text
		If LCase(strActualText) = LCase(strSearchText) Then
			intRowNum = i
			Exit For
		End If	
	Next
	GUI_List_GetRowIndex = intRowNum
End Function



'This function is returning true or false result of search
'@code
'    GUI_List_TextExists(objMainView, intColNumOrText, strSearchText)
'@endcode
'@param objMainView The object path
'@param intColNumOrText column number or column name
'@param strSearchText text to look for

Function GUI_List_TextExists(objMainView, intColNumOrText, strSearchText)

	If GUI_List_GetRowIndex(objMainView, intColNumOrText, strSearchText) <> -1 Then
		GUI_List_TextExists = True
		FRM_Logger_ReportPassEvent "Verify Text", "Verify text exists in column " & """" & intColNumOrText & """" & ", Expected Value="&strSearchText, Null
	Else
		GUI_List_TextExists = False
	End If		
End Function


'This script locates the expected item in a list and Click/DoubleClick/RightClick it. handle scrollbar
'@code
'    GUI_List_ClickRow(objMainView, objScrollBar, intColNumOrText, strSearchText, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param objScrollBar - The object vertical scrollBar
'@param intColNumOrText - The column text or column number
'@param strSearchText - Text displayed in the column.
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.
'@param strAction - Action to take: "Double" for double click, "Single" for single click

Function GUI_List_ClickRow(objMainView, objScrollBar, intColNumOrText, strSearchText, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
	
	intPosition = GUI_List_MoveToRow(objMainView, objScrollBar, intColNumOrText, strSearchText, hasTitleRow, hasFilterRow, hasCheckboxCol)

	boolIsFound = ( intPosition <> -1 )
	'===If item exist, act on the item
	If boolIsFound Then
		GUI_List_ActOnRow objMainView, intPosition, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction
	End If
	GUI_List_ClickRow = boolIsFound
End Function



'This function is finding column number  
'@code
'    GUI_List_GetColumnIndex(objMainView, intColText)
'@endcode
'@param objMainView The object path
'@param intColText column number or column name

Function GUI_List_GetColumnIndex(objMainView, intColText)

	GUI_List_GetColumnIndex = -1
	For i=0 to objMainView.Object.Columns.Count-1
		If Trim(objMainView.Object.Columns.Item(i).text)= intColText Then
			Exit For
		End If 
	Next
	GUI_List_GetColumnIndex = i
		
End Function



'Getting Column Index that found by Column Name 
'@param obj The object path
'@param strColumnTitle - column name in Pipeline View

Function GUI_List_GetColumnIndexByTitle(obj, strColumnTitle)
	Dim columnCount, i, actualText, indexNumber
	
	columnCount = obj.Object.Columns.Count
	For i = 0 to columnCount - 1
		actualText = obj.Object.Columns.item(i).Text		
		If actualText = strColumnTitle Then
			indexNumber = i
			Exit For	
		End If
	Next
	GUI_List_GetColumnIndexByTitle = indexNumber
End Function



'This function is for click on object the diferent ways
'@code
'    Function GUI_List_ActOnRow(objMainView, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param intRowNum row number
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.
'@param strAction - Action to take: "Double" for double click, "Single" for single click

Function GUI_List_ActOnRow(objMainView, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)

	arrXY = GUI_List_ActOnRow_XY(objMainView, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol)
	v_xco = arrXY(0)
	v_yco = arrXY(1)	
	' Operate the item
	If strAction = "Double" Then
		objMainView.DblClick v_xco, v_yco
	Elseif strAction = "Single" Then
		GUI_SwfObject_ClickXY objMainView, v_xco, v_yco
	Else
		objMainView.Click v_xco, v_yco, micRightBtn
	End If

End Function


'This function returns array of X and Y coordinates for the object
'@code
'    Function GUI_List_ActOnRow(objMainView, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param intRowNum row number
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.

Private Function GUI_List_ActOnRow_XY(objMainView, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol)
	intItemHeight = objMainView.Object.GetItemBounds(0).Height
	'Count the Y-axis
	If hasFilterRow Then
		Y_axis = intItemHeight * (intRowNum + 2) + intItemHeight * 0.5
	ElseIf hasTitleRow Then
		Y_axis = intItemHeight * (intRowNum + 1) + intItemHeight * 0.5
	Else
		Y_axis = intItemHeight * intRowNum + intItemHeight * 0.5
	End If
	
	'Count the X-coordinate
	If hasCheckboxCol Then
		X_axis = 7
	Else
		X_axis = objMainView.Object.GetSubItemBounds(0,0).Width * 0.5
	End If
	
	GUI_List_ActOnRow_XY = Array(X_axis, Y_axis)
End Function



'This script moves tru lines of the List object
'@code
'    Function GUI_List_MoveToRow(objMainView, objScrollBar, intColNumOrText, strSearchText, hasTitleRow, hasFilterRow, hasCheckboxCol)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param objScrollBar - The object vertical scrollBar
'@param intColNumOrText - The column text or column number
'@param strSearchText - Text displayed in the column.
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.

Private Function GUI_List_MoveToRow(objMainView, objScrollBar, intColNumOrText, strSearchText, hasTitleRow, hasFilterRow, hasCheckboxCol)
	
    If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If
	
	intPosition=-1
	If TypeName(objScrollBar)="Null" Or TypeName(objScrollBar)="Empty" Then
		Set objScrollBar = objMainView.SwfScrollBar("swfname:=vPanelScrollBar")
	End If
	If objScrollBar.Exist(3) Then
		' ===Check the expect item whether exist in the list
		intRowCount = objMainView.Object.Items.Count
		For i = 0 To intRowCount - 1
			strActualWord = objMainView.Object.Items.Item(i).Subitems.Item(intColNum).Text
			If lcase(strActualWord) = lcase(strSearchText) Then
				objScrollBar.object.value=0
				Pagecount = objScrollBar.GetROProperty("LargeChange")
				Scrollline = intRowCount-Pagecount
				If i<Scrollline OR Scrollline < 0 Then 'Not the last page, then it's the first row after scroll
					objScrollBar.object.value=i
					intPosition = 0
				Else
					objScrollBar.object.value=Scrollline 'last page, 
					intPosition = i-Scrollline
				End If
				Exit For
			End If	
		Next
	Else 
		intPosition = GUI_List_GetRowIndex(objMainView, intColNum, strSearchText)
		'If item exist, act on the item
		If(intPosition<>-1) Then
			'GUI_List_ActOnRow objMainView, intPosition, hasTitleRow, hasFilterRow, hasCheckboxCol, "Single"
		End If	
	End If	
	GUI_List_MoveToRow = intPosition
End Function




'This function allow user to search thru the list of swfObject and select the keyword and click on the checkbox
'@code
'    GUI_List_ClickCheckbox(objMainView,objScrollBar,strSearchText,intColNumOrText,hasTitleRow,hasFilterRow,strAction,boolToBeChecked)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param objScrollBar - The object vertical scrollBar
'@param intColNumOrText - The column text or column number
'@param strSearchText - Text displayed in the column.
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.
'@param boolToBeChecked - to check checkbox true / false

Function GUI_List_ClickCheckbox(objMainView,objScrollBar,strSearchText,intColNumOrText,hasTitleRow,hasFilterRow,strAction,boolToBeChecked)

	intRowNum =  GUI_List_GetRowIndex(objMainView, intColNumOrText, strSearchText)
	intRowNumAfterMove = GUI_List_MoveToRow(objMainView, objScrollBar, intColNumOrText, strSearchText, hasTitleRow, hasFilterRow, True) 'hasCheckBox
	If intRowNum <> -1 Then
		arrXY = GUI_List_ActOnRow_XY(objMainView, intRowNumAfterMove, hasTitleRow, hasFilterRow, True) 'hasCheckBox
		v_xco = arrXY(0)
		v_yco = arrXY(1)	
		
		If objMainView.Object.Items.item(intRowNum).Subitems.item(0).Checked Then
			isChecked = True
		Else
			isChecked = False
		End If

		If strAction = "Double" Then
			objMainView.DblClick v_xco, v_yco
		Elseif strAction = "Single" Then
			'If (NOT boolToBeChecked AND isChecked) Or (NOT isChecked AND boolToBeChecked) Then
			If (boolToBeChecked <> isChecked) Then
				objMainView.Click v_xco, v_yco
			End If
			wait g_ShortWaitMedium
			If objMainView.Object.Items.item(intRowNum).Subitems.item(0).Checked Then
				isChecked = True
			Else
				isChecked = False
			End If
			
			If (boolToBeChecked <> isChecked) Then
				objMainView.Click v_xco, v_yco
			End If
		Else
			objMainView.Click v_xco, v_yco, micRightBtn
		End If
	End If	
End Function




'Waits that the object of a list is exists, then selects an item in a list
'@code
'    Function GUI_List_Select(objList, strItemName)
'@endcode
'@param objList - object of the list 
'@param trItemName - text of the list item

Function GUI_List_Select(objList, strItemName)
	GUI_Object_WaitTillExist objList
	objList.Select strItemName
End Function



'This function is get cell data 
'@code
'    GUI_List_GetCellData(objMainView, intRowNum, intColNumOrText)
'@endcode
'@param objMainView The object path
'@param intRowNum row number
'@param intColNumOrText column number or Name of the column

Function GUI_List_GetCellData(objMainView, intRowNum, intColNumOrText)

	If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If

	strActualText = objMainView.Object.Items.Item(intRowNum).Subitems.Item(intColNum).Text
	
	GUI_List_GetCellData = strActualText
End Function


'This function is used to verify the cell data in list object
'@code
'    GUI_List_ValidateCellData(objMainView, intRowNum, intColNumOrText, strExpectedValue)
'@endcode
'@param objMainView The object path
'@param intRowNum row number
'@param intColNumOrText column number or title text
'@param strExpectedValue 

Function GUI_List_ValidateCellData(objMainView, intRowNum, intColNumOrText, strExpectedValue)

	If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If
    
	strActualText = GUI_List_GetCellData(objMainView, intRowNum, intColNum)
	
	If CStr(strActualText) = CStr(strExpectedValue) Then
		'Passed
		On Error Resume Next
		FRM_Logger_ReportPassEvent "Validate Cell Data", "Verify the cell [" & intRowNum & "," & intColNum & "] text in list, Value="&strExpectedValue, null
		On Error Goto 0
	Else
		' Failed
		On Error Resume Next
		FRM_Logger_ReportFailEvent "Validate Cell Data", "Verify the cell [" & intRowNum & "," & intColNum & "] text in list, Actual Value="&strActualText&",Expected Value="&strExpectedValue, null
		On Error Goto 0
	End If
	
End Function

'This function is for click on cell data
'@code
'    Function GUI_List_ClickOnCellData(objMainView, intRowNum, intColNum, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param intRowNum row number
'@param intColNum column number
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.
'@param strAction - Action to take: "Double" for double click, "Single" for single click

Function GUI_List_ClickOnCellData(objMainView, intRowNum, intColNum, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
	
	arrXY = GUI_List_ActOnRow_XY(objMainView, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol)
	v_xco = 0
	v_yco = arrXY(1)
	
	'Count the X-coordinate
	For i = 0 to intColNum - 1  
		v_xco = v_xco + objMainView.Object.GetSubItemBounds(0,i).Width
	Next
	v_xco = v_xco + objMainView.Object.GetSubItemBounds(0,intColNum).Width * 0.5
	
	' Operate the item
	If strAction = "Double" Then
		objMainView.DblClick v_xco, v_yco
	Elseif strAction = "Single" Then
		GUI_SwfObject_ClickXY objMainView, v_xco, v_yco
	Else
		objMainView.Click v_xco, v_yco, micRightBtn
	End If

End Function




'This function is to activate item in the Import FNMA list 
'@code
'    BIZ_Loan_SelectAndActivateListItem(expectedItem)
'@endcode
'@param expectedItem - list item to activate

Function GUI_List_SelectAndActivateListItem(expectedItem)
	 boolSelected = False 
	'Get the number of items in the list
	If (instr(expectedItem,":")>0 and instr(expectedItem,"\")<=0) Then
		Set Objlist=SwfWindow("swfname:=ImportFannie").SwfComboBox("swfname:=driveListBox")
		bflag=true
	Else
		Set Objlist=SwfWindow("swfname:=ImportFannie").SwfList("swfname:=dirListBox")
		bflag=false
	End If 
		
	cnt = Objlist.GetItemsCount
	
	'Iterate through the items
	 For curItem = 0 To cnt - 1
	    curItemLabel = _
	        Objlist.GetItem(curItem)
	    If instr(curItemLabel, expectedItem) Then
	       Objlist.Select curItemLabel
	       'Flag implemented to execute the double click on list item
	       If not(bflag) Then
	       	Objlist.Activate curItemLabel
	       End If
		   	       
	       boolSelected = True
	       Exit For
	    End If               
	 Next
	 GUI_List_SelectAndActivateListItem = boolSelected
End Function


'This function is to find and select FNMA loan in the list box
'@code
'    BIZ_Loan_SelectTargetFileInFileListBox (strFilePath)
'@endcode
'@param strFilePath - fnma file location

Function GUI_List_SelectTargetFileInFileListBox (strFilePath)
    GUI_Object_WaitTillExistX SwfWindow("swfname:=ImportFannie").SwfList("swfname:=fileListBox"),20
	boolActivated = False
	arrFilePath = split(strFilePath,"\")
	For n = 0 To ubound(arrFilePath) - 1
		If instr(arrFilePath(n),":") > 0 then
			GUI_List_SelectAndActivateListItem(lcase(arrFilePath(n)))
   			strItem = arrFilePath(n) & "\"		
		Else
   			strItem = arrFilePath(n)
		End If
		boolActivated = GUI_List_SelectAndActivateListItem(strItem)
		If not boolActivated Then
		   Exit For	
		End If		
	Next
	If boolActivated Then
	   GUI_List_Select SwfWindow("swfname:=ImportFannie").SwfList("swfname:=fileListBox"),arrFilePath(ubound(arrFilePath))
    else
       FRM_Logger_ReportFailEvent "Path to file", "Directory/Subdirectory NOT found: " &strItem, null	      
	End If

End Function

'This function is to validate the Column Title 
'@code
'    GUI_List_ValidateColumnName(objMainView, intColText)
'@endcode
'@param objMainView The object path
'@param intColText column number or column name

Function GUI_List_ValidateColumnName(objMainView, intColText)

	Dim boolColumnNamePresent,strActualValue
	'boolColumnNamePresent = False
	For i=0 to objMainView.Object.Columns.Count-1
		If Trim(objMainView.Object.Columns.Item(i).text)= intColText Then
			strActualValue = objMainView.Object.Columns.Item(i).text
			 
			Exit For
		End If 
	Next
	     
	FRM_VerifyEqual intColText,strActualValue,"Comparing Column Names '"&strActualValue&"'","Column Names should match"
     
		
End Function

'This function allow user to click on the checkbox of the given Row number
'@code
'    GUI_List_ClickCheckboxByRowNum(objMainView,objScrollBar,intRowNum,hasTitleRow,hasFilterRow,strAction,boolToBeChecked)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param objScrollBar - The object vertical scrollBar
'@param intRowNum - The row number
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.
'@param boolToBeChecked - to check checkbox true / false

Function GUI_List_ClickCheckboxByRowNum(objMainView,objScrollBar,intRowNum,hasTitleRow,hasFilterRow,strAction,boolToBeChecked)

	intRowNumAfterMove = GUI_List_MoveToRowByNum(objMainView, objScrollBar, intRowNum, hasTitleRow, hasFilterRow, True) 'hasCheckBox
	If intRowNum <> -1 Then
		arrXY = GUI_List_ActOnRow_XY(objMainView, intRowNumAfterMove, hasTitleRow, hasFilterRow, True) 'hasCheckBox
		v_xco = arrXY(0)
		v_yco = arrXY(1)	
		If objMainView.Object.Items.item(intRowNum).Subitems.item(0).Checked Then
			isChecked = True
		Else
			isChecked = False
		End If

		If strAction = "Double" Then
			objMainView.DblClick v_xco, v_yco
		Elseif strAction = "Single" Then
			'If (NOT boolToBeChecked AND isChecked) Or (NOT isChecked AND boolToBeChecked) Then
			If (boolToBeChecked <> isChecked) Then
				objMainView.Click v_xco, v_yco
			End If
		Else
			objMainView.Click v_xco, v_yco, micRightBtn
		End If
	End If	
End Function

'This script is to move to the given Row 
'@code
'    Function GUI_List_MoveToRowByNum(objMainView, objScrollBar, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param objScrollBar - The object vertical scrollBar
'@param intRowNum - The Row Number
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.

Private Function GUI_List_MoveToRowByNum(objMainView, objScrollBar, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol)
	
    intPosition=-1
	If TypeName(objScrollBar)="Null" Or TypeName(objScrollBar)="Empty" Then
		Set objScrollBar = objMainView.SwfScrollBar("swfname:=vPanelScrollBar")
	End If
	If objScrollBar.Exist(3) Then
		
		intRowCount = objMainView.Object.Items.Count
		objScrollBar.Set "0"
		Pagecount = objScrollBar.GetROProperty("LargeChange")
		Scrollline = intRowCount-Pagecount
		If intRowNum<Scrollline Then 'Not the last page, then it's the first row after scroll
			objScrollBar.NextLine intRowNum
			intPosition = 0
		Else
			If (IsObject(objScrollBar) = True) Then 
				objScrollBar.NextLine Scrollline 'last page, 
				intPosition = intRowNum-Scrollline
			End If
		End If
								
	Else 
		intPosition = intRowNum
	End If	
	GUI_List_MoveToRowByNum = intPosition
End Function


'This function is to click on cell
'@code
'    Function GUI_List_ClickOnCell(objMainView, objScrollBar,intRowNum, intColNum, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param objScrollBar -  The object vertical scrollBar 
'@param intRowNum row number
'@param intColNum column number
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.
'@param strAction - Action to take: "Double" for double click, "Single" for single click

Function GUI_List_ClickOnCell(objMainView, objScrollBar,intRowNum, intColNum, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
	intRowNumAfterMove= GUI_List_MoveToRowByNum(objMainView, objScrollBar, intRowNum, hasTitleRow, hasFilterRow, hasCheckboxCol)
	arrXY = GUI_List_ActOnRow_XY(objMainView, intRowNumAfterMove, hasTitleRow, hasFilterRow, hasCheckboxCol)
	v_xco = 0
	v_yco = arrXY(1)
	
	'Count the X-coordinate
	For i = 0 to intColNum - 1  
		v_xco = v_xco + objMainView.Object.GetSubItemBounds(0,i).Width
	Next
	v_xco = v_xco + objMainView.Object.GetSubItemBounds(0,intColNum).Width * 0.5
	
	' Operate the item
	If strAction = "Double" Then
		objMainView.DblClick v_xco, v_yco
	Elseif strAction = "Single" Then
		GUI_SwfObject_ClickXY objMainView, v_xco, v_yco
	Else
		objMainView.Click v_xco, v_yco, micRightBtn
	End If

End Function


'This function locates checkbox on the list view and sets it
'@code
'    Function GUI_List_LocateAndSetCheckBox(objMainView,strSearchPartialText,intColNumOrText,colCheckBox,boolToBeChecked)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param strSearchPartialText string to search. Can be full or partial string
'@param intColNumOrText column number or header text where string resides
'@param colCheckBox - column where checkbox resides
'@param boolToBeChecked - True: Set Checkbox to ON. False: ste checkbox to OFF.


Function GUI_List_LocateAndSetCheckBox(objMainView,strSearchPartialText,intColNumOrText,colCheckBox,boolToBeChecked)
	intRowIndex =  GUI_List_GetRowIndexByPartialText(objMainView, intColNumOrText, strSearchPartialText)
	If intRowIndex <> -1 Then
		objMainView.Object.Items.item(intRowIndex).Subitems.item(colCheckBox).Checked = boolToBeChecked
	End If	
End Function


'This function locates checkbox on the list view and sets it
'@code
'    Function GUI_List_GetRowIndexByPartialText(objMainView, intColNumOrText, strSearchPartialText)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param intColNumOrText column number or header text where string resides
'@param strSearchPartialText string to search. Can be full or partial string
	
Function GUI_List_GetRowIndexByPartialText(objMainView, intColNumOrText, strSearchPartialText)

    If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If

	intRowNum = -1	
	' Check the expect item whether exist in the list
	intRowCount = objMainView.Object.Items.Count
	
	For i = 0 To intRowCount  - 1
		strActualText = objMainView.Object.Items.Item(i).Subitems.Item(intColNum).Text
		If instr(strActualText,strSearchPartialText) > 0 Then
			intRowNum = i
			Exit For
		End If	
	Next
	GUI_List_GetRowIndexByPartialText = intRowNum
End Function

'This function locates and selects item on the list view
'@code
'    GUI_List_SelectItem(objMainView,strSearchPartialText,intColNumOrText)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param intColNumOrText column number or header text where string resides
'@param strSearchPartialText string to search. Can be full or partial string

Function GUI_List_SelectItem(objMainView,strSearchPartialText,intColNumOrText)
    GUI_List_SelectItem = false
	intRowIndex =  GUI_List_GetRowIndexByPartialText(objMainView, intColNumOrText, strSearchPartialText)
	If intRowIndex <> -1 Then
		objMainView.Object.Items.item(intRowIndex).Selected = true
		GUI_List_SelectItem = true
	End If	
End Function


'This function locates and selects item on the list view
'@code
'    GUI_List_SelectItemWithPartialText(objMainView,strSearchPartialText,intColNumOrText)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param intColNumOrText column number or header text where string resides
'@param strSearchPartialText string to search. Can be full or partial string

Function GUI_List_SelectItemWithPartialText(objMainView,strSearchPartialText,intColNumOrText)
    GUI_List_SelectItemWithPartialText = false
	intRowIndex =  GUI_List_GetRowIndexByPartialText(objMainView, intColNumOrText, strSearchPartialText)
	If intRowIndex <> -1 Then
		objMainView.Object.Items.item(intRowIndex).Selected = true
		GUI_List_SelectItemWithPartialText = true
	End If	
End Function


'This function is to find the row count in the list
'@code
'    GUI_List_GetNumberofRows(objMainView)
'@endcode
'@param objMainView The object path

Function GUI_List_GetNumberofRows(objMainView)

   intTotalRows = objMainView.Object.Items.Count
   GUI_List_GetNumberofRows= intTotalRows 
End Function

'This script locates the expected item in a list and Click/DoubleClick/RightClick it. handle scrollbar
'@code
'    GUI_List_ClickRowbySubString(objMainView, objScrollBar, intColNumOrText, strSearchSubStr, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param objScrollBar - The object vertical scrollBar
'@param intColNumOrText - The column text or column number
'@param strSearchSubStr- Text displayed in the column.
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.
'@param strAction - Action to take: "Double" for double click, "Single" for single click

Function GUI_List_ClickRowbySubString(objMainView, objScrollBar, intColNumOrText, strSearchSubStr, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction)
	
	intPosition = GUI_List_MoveToRowbySubString(objMainView, objScrollBar, intColNumOrText, strSearchSubStr, hasTitleRow, hasFilterRow, hasCheckboxCol)

	boolIsFound = ( intPosition <> -1 )
	'===If item exist, act on the item
	If boolIsFound Then
		GUI_List_ActOnRow objMainView, intPosition, hasTitleRow, hasFilterRow, hasCheckboxCol, strAction
	End If
	GUI_List_ClickRowbySubString = boolIsFound
End Function

'This script moves tru lines of the List object
'@code
'    Function GUI_List_MoveToRowbySubString(objMainView, objScrollBar, intColNumOrText, strSearchSubStr, hasTitleRow, hasFilterRow, hasCheckboxCol)
'@endcode
'@param objMainView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param objScrollBar - The object vertical scrollBar
'@param intColNumOrText - The column text or column number
'@param strSearchSubStr - Text displayed in the column.
'@param hasTitleRow - True: The view object contains title row. False: No title row.
'@param hasFilterRow - True: The view object contains a filter above the header. False: No filter.
'@param hasCheckboxCol - True: The view object contains a checkbox before each item. False: No checkbox.

Private Function GUI_List_MoveToRowbySubString(objMainView, objScrollBar, intColNumOrText, strSearchSubStr, hasTitleRow, hasFilterRow, hasCheckboxCol)
	
    If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If
	
	intPosition=-1
	If TypeName(objScrollBar)="Null" Or TypeName(objScrollBar)="Empty" Then
		Set objScrollBar = objMainView.SwfScrollBar("swfname:=vPanelScrollBar")
	End If
	If objScrollBar.Exist(3) Then
		' ===Check the expect item whether exist in the list
		intRowCount = objMainView.Object.Items.Count
		For i = 0 To intRowCount - 1
			strActualWord = objMainView.Object.Items.Item(i).Subitems.Item(intColNum).Text
			If (INStr(strActualWord, strSearchSubStr) > 0) Then
				objScrollBar.object.value=0
				Pagecount = objScrollBar.GetROProperty("LargeChange")
				Scrollline = intRowCount-Pagecount
				If i<Scrollline OR Scrollline < 0 Then 'Not the last page, then it's the first row after scroll
					objScrollBar.object.value=i
					intPosition = 0
				Else
					objScrollBar.object.value=Scrollline 'last page, 
					intPosition = i-Scrollline
				End If
				Exit For
			End If	
		Next
	Else 
		intPosition = GUI_List_GetRowIndexBySubString(objMainView, intColNum, strSearchSubStr)
		'If item exist, act on the item
		If(intPosition<>-1) Then
			'GUI_List_ActOnRow objMainView, intPosition, hasTitleRow, hasFilterRow, hasCheckboxCol, "Single"
		End If	
	End If	
	GUI_List_MoveToRowbySubString = intPosition
End Function



'This function is finding row number for the searched text 
'@code
'    GUI_List_GetRowIndexBySubString(objMainView, intColNumOrText, strSearchSubStr)
'@endcode
'@param objMainView The object path
'@param intColNumOrText column number or column name
'@param strSearchText text to look for

Function GUI_List_GetRowIndexBySubString(objMainView, intColNumOrText, strSearchSubStr)

    If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If
	
	intRowNum = -1	
	' Check the expect item whether exist in the list
	intRowCount = objMainView.Object.Items.Count
	For i = 0 To intRowCount  - 1
		strActualText = objMainView.Object.Items.Item(i).Subitems.Item(intColNum).Text
		If (InStr(strActualText, strSearchSubStr) > 0) Then
			intRowNum = i
			Exit For
		End If	
	Next
	GUI_List_GetRowIndexBySubString = intRowNum

End Function



'This function is finding row number for the searched text 
'@code
'    GUI_List_SelectCheckBoxinCell(objMainView, intColNum, intRowNum)
'@endcode
'@param objMainView The object path
'@param intColNumOrText column number or column name
'@param intRowNum Row Number

Function GUI_List_SelectCheckBoxinCell(objMainView, intColNumOrText, intRowNum)
	
	If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If
	
	objMainView.Object.Items.item(intRowNum).Subitems.item(intColNum).Checked = True
End Function



'This function is finding row number for the searched text 
'@code
'    GUI_List_UnSelectCheckBoxinCell(objMainView, intColNum, intRowNum)
'@endcode
'@param objMainView The object path
'@param intColNumOrText column number or column name
'@param intRowNum Row Number

Function GUI_List_UnSelectCheckBoxinCell(objMainView, intColNumOrText, intRowNum)
	
	If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If
	
	objMainView.Object.Items.item(intRowNum).Subitems.item(intColNum).Checked = False
End Function



'This function is get cell data 
'@code
'    GUI_List_VerifyImageExistance(objMainView, intRowNum, intColNum)
'@endcode
'@param objMainView The object path
'@param intRowNum row number
'@param intColNum column number

Function GUI_List_VerifyImageExistance(objMainView, intRowNum, intColNumOrText)

	If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If
	
    intImageIndex = objMainView.Object.Items.Item(intRowNum).Subitems.Item(intColNumOrText).ImageIndex
    If(intImageIndex = 0) then 
        GUI_List_VerifyImageExistance = True
    Else
        GUI_List_VerifyImageExistance = False
    End if
End Function

'This function is to activate item in the list 
'@code
'    GUI_List_SelectAndActivateItemInList(objList, strItemName)
'@endcode
'@param objList - object of the list 
'@param trItemName - list item to activate

Function GUI_List_SelectAndActivateItemInList(objList, strItemName)
	 boolSelected = False 
	'Get the number of items in the list
	 cnt = objList.GetItemsCount
	'Iterate through the items
	 For curItem = 0 To cnt - 1
	    curItemLabel = _
	        objList.GetItem(curItem)
	    If curItemLabel = strItemName Then
	       objList.Activate strItemName	
	       boolSelected = True
	       Exit For
	    End If               
	 Next
	 GUI_List_SelectAndActivateItemInList = boolSelected
End Function

'This function is for verifying, if an item exists in the List
'@code	
'	GUI_List_VerifyItemExists(objList,strItemName)
'@endcode
'@param objList - object of the list
'@param strItemName - Item name to check the existence of 
Function GUI_List_VerifyItemExists(objList,strItemName)
	
	FRM_Logger_ReportInfoEvent "Verify List Item Exist","Verify if '"&strItemName&"' exists",Null
	
	Dim strContent, boolExists
	
	strContent = objList.GetContent
	boolExists = False
	If Instr(1,strContent,strItemName,1)>0 Then
		boolExists = True
	End If
	
	GUI_List_VerifyItemExists = boolExists
End Function

'Function is for validating multiple checkboxes state based on indexNumber
'@code
'	GUI_List_ValidateCheckBoxState(objMainView,strColumnName,strIndexes)
'@endcode
'@param objMainView - object of the gridView list
'@param strColumnName - Column name
'@param strIndexes - Index of checkboxes. 
Function GUI_List_ValidateCheckBoxState(objMainView,strColumnName,strIndexes)
	
	Dim intRowCount, intColNum, boolDetailsMatched
	
	intRowCount = objMainView.Object.Items.Count
	intColNum = GUI_List_GetColumnIndexByTitle(objMainView,strColumnName)
	boolDetailsMatched = True
	
	Select Case strIndexes
		Case "All"
			For i = 0 To intRowCount-1 Step 1
				boolCheckStatus=objMainView.Object.Items.item(i).Subitems.item(intColNum).Checked
				If boolCheckStatus=false Then
					boolDetailsMatched=False
					Exit For
				End If
			Next
		Case "None"
			For i = 0 To intRowCount-1 Step 1
				boolCheckStatus=objMainView.Object.Items.item(i).Subitems.item(intColNum).Checked
				If boolCheckStatus=True Then
					boolDetailsMatched=False
					Exit For
				End If
			Next
		Case Else
			intIndex = Split(strIndexes,";")
			For i = 0 To Ubound(intIndex) Step 1
				boolCheckStatus=objMainView.Object.Items.item(intIndex(i)).Subitems.item(intColNum).Checked
				If boolCheckStatus=False Then
					boolDetailsMatched=False
					Exit For
				End If
			Next
	End Select
	
	GUI_List_ValidateCheckBoxState=boolDetailsMatched	

End Function


'This function is used to verify the cell data in list object
'@code
'    GUI_List_ValidateCellData(objMainView, intRowNum, intColNumOrText, strExpectedValue)
'@endcode
'@param objMainView The object path
'@param intRowNum row number
'@param intColNumOrText column number or title text
'@param strExpectedValue 
'@param strFieldDesc - field description usually label for field

Function GUI_List_ValidateCellDataWithCustomMsg(objMainView, intRowNum, intColNumOrText, strExpectedValue,strFieldDesc)
	
If intRowNum=-1 Then
	FRM_Logger_ReportFailEvent "Get Row Index", "Rownum retrieved as " &intRowNum&" for "& strExpectedValue&"  text in list", null
	Else
	If IsNumeric(intColNumOrText)Then
        intColNum = CInt(intColNumOrText)
    Else
        intColNum = GUI_List_GetColumnIndex(objMainView, intColNumOrText)
    End If
    
	strActualText = GUI_List_GetCellData(objMainView, intRowNum, intColNum)
	
	If CStr(strActualText) = CStr(strExpectedValue) Then
		'Passed
		On Error Resume Next
		FRM_Logger_ReportPassEvent "Validate Cell Data", "Verify the cell [" & intRowNum & "," & intColNum & "] text in list, '"&strFieldDesc&"' Value="&strExpectedValue, null
		On Error Goto 0
	Else
		' Failed
		On Error Resume Next
		FRM_Logger_ReportFailEvent "Validate Cell Data", "Verify the cell [" & intRowNum & "," & intColNum & "] text in list, '"&strFieldDesc&"' Actual Value="&strActualText&",Expected Value="&strExpectedValue, null
		On Error Goto 0
	End If
End If
	
End Function


'This function verifies checkboxes checked state identified by corresponding item name in a list view
'@code
'	GUI_List_ValidateCheckboxCheckedByName(objGridView,strItemsColumnName,arrStrItemNames,strCheckboxColumnName)
'@endcode
'@param objGridView - The QTP object which is to be handled. Generally it is a ListView or GridView object
'@param strItemsColumnName - The column name in which the items are based on which corresponding checkbox is located
'@param arrStrItemNames     - list of all item names to verify the checkbox for
'@param strCheckboxColumnName - column name in which checkbox are located
Function GUI_List_ValidateCheckboxCheckedByName(objGridView,strItemsColumnName,arrStrItemNames,strCheckboxColumnName)
	
	FRM_Logger_ReportInfoEvent "Verify Checkbox State", "Verify given checkboxes state for '"&strCheckboxColumnName&"' column",Null
	
	Dim boolDetailsMatched,intColIndex,intRowIndex,boolCheckState
	
	boolDetailsMatched = True
	'column number which contains checkboxes to verify
	intColIndex = GUI_List_GetColumnIndexByTitle(objGridView,strCheckboxColumnName)
	
	For i = 0 To Ubound(arrStrItemNames) Step 1
		intRowIndex = GUI_List_GetRowIndex(objGridView,strItemsColumnName,arrStrItemNames(i))
		
		If intRowIndex=-1 Then
			FRM_Logger_ReportFailEvent "Item name not found","Item name: '"&arrStrItemNames(i)&"' is not found in list",Null
			boolDetailsMatched = False
		Else
			boolCheckState = objGridView.Object.Items.item(intRowIndex).Subitems.item(intColIndex).Checked
			If boolCheckState=False Then
				boolDetailsMatched = False
				FRM_Logger_ReportFailEvent "Checkbox State Mismatch","Checkbox state corresponding to item '"&arrStrItemNames(i)&"' is not checked",Null
			Else	
				FRM_Logger_ReportPassEvent "Checkbox State Matched","Checkbox state corresponding to item '"&arrStrItemNames(i)&"' is checked",Null
			End If
		End If	
	Next
	
	GUI_List_ValidateCheckboxCheckedByName = boolDetailsMatched
	
End Function

'@}
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_List.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_Object.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_Object GUI_Object
'
' List of functions here
' @code
'
'	Function GUI_Object_IsEnabled(obj)
'	Function GUI_Object_WaitTillExist(objElement)
'	Function GUI_Object_WaitTillExistX(objElement, intTimeoutSec)
'	Function GUI_Object_IsExist(objElement)
'	Function GUI_Object_IsExistX(objElement, intDelay)
'	Function GUI_Object_WaitProperty(objElement, strPropName, strPropValue)
'	Function GUI_Object_WaitPropertyX(objElement, strPropName, strPropValue, intTimeOut)
'	Function GUI_Object_WaitTillVisible(objElement)
'	Function GUI_Object_WaitTillVisibleX(objElement, intTimeOut)
'	Function GUI_Object_WaitTillEnabled(objElement)
'	Function GUI_Object_WaitTillEnabledX(objElement, intTimeOut)
'	Function GUI_Object_ID(obj)
'	Function GUI_Object_Desc(obj)
'	Function GUI_Object_ValidateExists(obj, intSecsToWait, strFieldDesc)
'	Function GUI_Object_ValidateNotExists(obj, intSecsToWait, strFieldDesc)
'	Function GUI_Object_ValidateTrimText(obj, strExpectedValue, strFieldDesc)
'   Function GUI_Object_ValidateText(obj, strExpectedValue,strFieldDesc)
'	Function GUI_Object_ValidateTextAsDate(obj, strExpectedValue, strFieldDesc)
'   Function GUI_Object_ValidateValue(obj, strExpectedValue,strFieldDesc)
'	Function GUI_Object_ValidateValueAsDate(obj, strExpectedValue, strFieldDesc)
'   Function GUI_Object_ValidateProperty(obj, strPropName, strExpectedValue,strFieldDesc)
'	Function GUI_Object_ValidateProperty_Log(boolMatch, obj, strPropName, strActualValue, strExpectedValue, strFieldDesc)
'   Function GUI_Object_ValidateSelection(obj, strExpectedValue,strFieldDesc)
'   Function GUI_Object_ValidateChecked(obj, strExpectedValue,strFieldDesc)
'	Function GUI_Object_ValidateDisabled(obj, strFieldDesc)
'	Function GUI_Object_ValidateEnabled(obj, strFieldDesc)
'   Function GUI_Object_Click(obj, objType, objDesc)
'   Function GUI_Object_GetColumnIndexByTitle(obj, strColumnTitle)
'	Function GUI_Object_IsContainerReadOnly(objParent, arrMicClass)
'	Function GUI_Object_AreChildrenReadOnly(objParent, strMicClass)
'	Function GUI_Object_ChildrenCount(objParent, strMicClass)
'   Function GUI_Object_GetPropertyValue(obj,property)
'   Function GUI_Object_ValidateTitle(obj, strExpectedValue, strFieldDesc)
'	Function GUI_Object_ValidateVisible(obj, strExpectedValue, strFieldDesc)
'   Function GUI_Object_ValidateUnChecked(obj, strExpectedValue,strFieldDesc)
'Function GUI_ValidateValueOfObject(Obj_ForValidation,Str_ExpectedValue)
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''



g_Default_WaitTime = 70


'Checks if an object is enabled
'@code
'    GUI_Object_IsEnabled( SwfWindow("EncompassMenu").SwfObject("pictureBoxNextLA") 
'@endcode
'@param objElement - object which property to verify and judge

Function GUI_Object_IsEnabled(obj)
	GUI_Object_IsEnabled = False
	If obj.Exist(g_Default_WaitTime) Then
		If obj.GetROProperty("enabled") Then
			GUI_Object_IsEnabled = True
			Exit Function
		End If
		If (UTIL_String_IsNotEmpty(obj.GetROProperty("readonly")) AND obj.GetROProperty("readonly") = 0) OR (UTIL_String_IsNotEmpty(obj.GetROProperty("disabled")) AND obj.GetROProperty("disabled") = 0) Then
			GUI_Object_IsEnabled = True
			Exit Function
		End If
    End If		
End Function



'Function waiting till an element is found and displays duration of waiting time limited by default wait time
'@code
'    GUI_Object_WaitTillExist SwfWindow("EncompassMenu").SwfObject("btnSaveView")
'@endcode
'@param objElement - object which property to verify and judge

Function GUI_Object_WaitTillExist(objElement)

	GUI_Object_WaitTillExist = GUI_Object_WaitTillExistX(objElement, g_Default_WaitTime)
	
End Function 



'Function waiting till an element is found and displays duration of waiting time
'@code
'    GUI_Object_WaitTillExistX SwfWindow("EncompassMenu").SwfObject("btnSaveView"), 20
'@endcode
'@param objElement - object which property to verify and judge
'@param ointTimeoutSec - time out in seconds

Function GUI_Object_WaitTillExistX(objElement, intTimeoutSec)

	Dim objTimer
	Set objTimer = MercuryTimers.Timer("ObjectExist")
	objTimer.Start()
	Do
		elapsedTime = objTimer.ElapsedTime / 1000
		isExists = GUI_Object_IsExistX(objElement, 1)
		If isExists Then
			objTimer.Stop()
			Exit Do
		End If
	Loop Until elapsedTime > intTimeoutSec
	If elapsedTime > intTimeoutSec And Not isExists Then
		FRM_Logger_ReportInfoEvent "GUI_Object_WaitTillExist", "Couldn't find object within " & elapsedTime & " seconds of " & GUI_Object_Desc(objElement), Null
	End If
	Set objTimer = Nothing
	GUI_Object_WaitTillExistX = isExists
	
End Function




'Boolean checks the existence of the object on the page using defaulted timeout 
'@code
'    GUI_Object_IsExist(objElement)
'@endcode
'@param objElement - object which property to verify and judge

Function GUI_Object_IsExist(objElement)
	GUI_Object_IsExist = GUI_Object_IsExistX(objElement, g_Default_WaitTime)
End Function



'Boolean checks the existence of the object on the page using specified time
'@code
'    GUI_Object_IsExistX(objElement, intDelay)
'@endcode
'@param objElement - object which property to verify and judge
'@param intDelay - delay time

Function GUI_Object_IsExistX(objElement, intDelay)
	'objElement.RefreshObject() - if the object doesn't exist, causes delay.  Comment it out
	If objElement.Exist(intDelay) Then
		GUI_Object_IsExistX = True
	Else
		GUI_Object_IsExistX = False
	End If
End Function



'Waits until the specified object property achieves the specified value or exceeds the defaulted timeout 
'@code
'    GUI_Object_WaitProperty(objElement, strPropName, strPropValue)
'@endcode
'@param objElement - object which property to verify and judge
'@param strPropName - name of the property
'@param strPropValue - value of the property

Function GUI_Object_WaitProperty(objElement, strPropName, strPropValue)
	GUI_Object_WaitProperty = GUI_Object_WaitPropertyX(objElement, strPropName, strPropValue, g_Default_WaitTime)
End Function




'Waits until the specified object property achieves the specified value or exceeds the specified timeout 
'@code
'    UI_Object_WaitPropertyX(objElement, strPropName, strPropValue, intTimeOut)
'@endcode
'@param objElement - object which property to verify and judge
'@param strPropName - name of the property
'@param strPropValue - value of the property
'@param intTimeOut - integer time to wait

Function GUI_Object_WaitPropertyX(objElement, strPropName, strPropValue, intTimeOut)

	boolObjFound = GUI_Object_WaitTillExistX(objElement, intTimeOut)
	
	boolPropFound = objElement.WaitProperty(strPropName, strPropValue, intTimeOut*1000) 
	If boolPropFound Then
	Else
		FRM_Logger_ReportInfoEvent "GUI_Object_WaitProperty", "Couldn't find property '" & strPropName & "' within " & intTimeOut & " seconds; Object " & GUI_Object_Desc(objElement), Null
	End If

	GUI_Object_WaitPropertyX = (boolObjFound AND boolPropFound)
End Function



'Check if object is visible using default wait time
'@code
'    GUI_Object_WaitTillVisible(objElement)
'@endcode
'@param objElement - object which property to verify and judge

Function GUI_Object_WaitTillVisible(objElement)

	GUI_Object_WaitTillVisible = GUI_Object_WaitTillVisibleX(objElement, g_Default_WaitTime)
	
End Function 



'Check if object is visible
'@code
'    GUI_Object_WaitTillVisibleX(objElement, intTimeOut)
'@endcode
'@param objElement - object which property to verify and judge
'@param intTimeOut - integer time to wait

Function GUI_Object_WaitTillVisibleX(objElement, intTimeOut)

	GUI_Object_WaitTillVisibleX = GUI_Object_WaitPropertyX(objElement, "visible", true, intTimeOut)
	
End Function 



'Check if object is enabled using default wait time
'@code
'    GUI_Object_WaitTillEnabledX(objElement, intTimeOut)
'@endcode
'@param objElement - object which property to verify and judge

Function GUI_Object_WaitTillEnabled(objElement)

	GUI_Object_WaitTillEnabled = GUI_Object_WaitTillEnabledX(objElement, g_Default_WaitTime)
	
End Function 




'Check if object is enabled
'@code
'    GUI_Object_WaitTillEnabledX(objElement, intTimeOut)
'@endcode
'@param objElement - object which property to verify and judge
'@param intTimeOut - integer time to wait

Function GUI_Object_WaitTillEnabledX(objElement, intTimeOut)

    If InStr(objElement.GetTOProperty("micClass"), "Web") = 1 Then
		GUI_Object_WaitTillEnabledX = GUI_Object_WaitPropertyX(objElement, "disabled", 0, intTimeOut)
	Else 
		GUI_Object_WaitTillEnabledX = GUI_Object_WaitPropertyX(objElement, "enabled", true, intTimeOut)
	End If	
	
End Function 



'Getting Test Object property
'@code
'    GUI_Object_ID(obj)
'@endcode
'@param obj - object which property to verify and judge
'@TODO - Need more robust code to properly log object ID

Function GUI_Object_ID(obj)
	On Error Resume Next
	GUI_Object_ID = obj.GetTOProperty("TestObjName")
	On Error GOTO 0
End Function



'Getting Description of object
'@code
'    GUI_Object_Desc(obj)
'@endcode
'@param obj - object which property to verify and judge

Function GUI_Object_Desc(obj)

	On Error Resume Next
	strMicClass = obj.GetTOProperty("micClass")
	If InStr(strMicClass, "Web") = 1 Then
		strObjDesc = "name=" + obj.GetROProperty("name") + ", html id=" + obj.GetROProperty("html id")
	Elseif InStr(strMicClass, "Swf") = 1 Then
		strObjDesc = "swfname=" + obj.GetROProperty("swfname") + ", 'swfname path'=" + obj.GetROProperty("swfname path") 
    Elseif InStr(strMicClass, "Win") = 1 Then
        If strMicClass = "WinButton" Then
            strObjDesc = "text=" + obj.GetROProperty("text")
        Else
            strObjDesc = "name=" + obj.GetROProperty("name")
        End If  
    Elseif strMicClass = "Image" Then		
	    strObjDesc = "url=" + obj.GetROProperty("url") + ", file name=" + obj.GetROProperty("file name") 
	End If
	GUI_Object_Desc = "Description: [" + obj.GetTOProperty("micClass") + "-" + strObjDesc + "]"
	On Error GOTO 0
	
End Function	


'Verify if object exists
'@param obj - object which property to verify and judge
'@param intSecsToWait - number of seconds to wait for object 
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateExists(obj, intSecsToWait, strFieldDesc)
	boolExists = GUI_Object_IsExistX(obj, intSecsToWait)
	FRM_VerifyTrue boolExists, "Verify " & strFieldDesc & " exists", strFieldDesc & " exists? " & boolExists & " (" & GUI_Object_Desc(obj) & ")"
End Function


'Verify if object not exists
'@param obj - object which property to verify and judge
'@param intSecsToWait - number of seconds to wait for object 
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateNotExists(obj, intSecsToWait, strFieldDesc)
	boolExists = GUI_Object_IsExistX(obj, intSecsToWait)
	FRM_VerifyFalse boolExists, "Verify " & strFieldDesc & " doesn't exist", strFieldDesc & " exists? " & boolExists & " (" & GUI_Object_Desc(obj) & ")"
End Function



'Verify if property "text" has value as expected.  The text is trimed before comparison
'@code
'    GUI_Object_ValidateTrimText(obj, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateTrimText(obj, strExpectedValue, strFieldDesc)
	GUI_Object_ValidateTrimText = GUI_Object_ValidateProperty(obj, "trimtext", strExpectedValue, strFieldDesc)
End Function



'Verify if property "text" as expected
'@code
'    GUI_Object_ValidateText(obj, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateText(obj, strExpectedValue, strFieldDesc)
	GUI_Object_ValidateText = GUI_Object_ValidateProperty(obj, "text", strExpectedValue, strFieldDesc)
End Function


'Verify if property "text" as expected. Compare values as Date
'@code
'    GUI_Object_ValidateTextAsDate(obj, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateTextAsDate(obj, strExpectedValue, strFieldDesc)

	strActualValue = obj.GetROProperty("text")
	
	boolMatch = False
	'Check Actual reslut whether equal to expect result
	If DateDiff("d", CDate(strActualValue), CDate(strExpectedValue)) = 0 Then
		boolMatch = True
	End If
	GUI_Object_ValidateProperty_Log boolMatch, obj, "text", strActualValue, strExpectedValue, strFieldDesc
	GUI_Object_ValidateTextAsDate = boolMatch
End Function


'Verify if property "value" as expected
'@code
'    GUI_Object_ValidateValue(obj, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateValue(obj, strExpectedValue, strFieldDesc)
	GUI_Object_ValidateValue = GUI_Object_ValidateProperty(obj, "value", strExpectedValue, strFieldDesc)
End Function



'Verify if property "value" as expected. Compare values as Date
'@code
'    GUI_Object_ValidateValueAsDate(obj, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateValueAsDate(obj, strExpectedValue, strFieldDesc)

	strActualValue = obj.GetROProperty("value")
	
	boolMatch = False
	'Check Actual reslut whether equal to expect result
	If DateDiff("d", CDate(strActualValue), CDate(strExpectedValue)) = 0 Then
		boolMatch = True
	End If
	GUI_Object_ValidateProperty_Log boolMatch, obj, "value", strActualValue, strExpectedValue, strFieldDesc
	GUI_Object_ValidateValueAsDate = boolMatch
End Function


'Verify selected in SwfTab item as expected
'@code
'    GUI_Object_ValidateSelection(obj, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - SwfTab object which property to verify and judge
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateSelection(obj, strExpectedValue, strFieldDesc)
	GUI_Object_ValidateSelection = GUI_Object_ValidateProperty(obj, "selected", strExpectedValue, strFieldDesc)
End Function



'Verify CheckBox Checked property as expected
'@code
'    GUI_Object_ValidateChecked(obj, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateChecked(obj, strExpectedValue, strFieldDesc)
	GUI_Object_ValidateChecked = GUI_Object_ValidateProperty(obj, "checked", strExpectedValue, strFieldDesc)
End Function


'Verify object is disabled or readonly
'@code
'    GUI_Object_ValidateDisabled(obj, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateDisabled(obj, strFieldDesc)

	strMicClass = obj.GetROProperty("micClass")
    print "strMicClass"&strMicClass
	If strMicClass = "WebEdit" Then
		strProperty = "readonly"
		strExpectedValue = 1			
	Elseif strMicClass = "WebList" OR strMicClass = "WebCheckBox" OR strMicClass = "WebButton" Then
		strProperty = "disabled"
		strExpectedValue = 1		
	Elseif strMicClass = "SwfCalendar" OR strMicClass = "SwfEdit" OR strMicClass = "SwfComboBox" OR strMicClass = "SwfButton" _
		OR strMicClass = "SwfCheckBox" OR strMicClass = "SwfEditor" OR strMicClass = "SwfRadioButton" OR strMicClass = "SwfObject" Then
		strProperty = "enabled"
		strExpectedValue = False			
	End If
    print "strProperty"&strProperty
    print "strExpectedValue"&strExpectedValue
	GUI_Object_ValidateDisabled = GUI_Object_ValidateProperty(obj, strProperty, strExpectedValue, strFieldDesc)
End Function


'Verify object is enabled
'@code
'    GUI_Object_ValidateEnabled(obj, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateEnabled(obj, strFieldDesc)

	strMicClass = obj.GetROProperty("micClass")
	If strMicClass = "WebEdit" Then
		strProperty = "readonly"
		strExpectedValue = 0		
	Elseif strMicClass = "WebList" OR strMicClass = "WebCheckBox" OR strMicClass = "WebButton" Then
		strProperty = "disabled"
		strExpectedValue = 0
	Elseif strMicClass = "SwfCalendar" OR strMicClass = "SwfEdit" OR strMicClass = "SwfComboBox" OR strMicClass = "SwfButton" _
		OR strMicClass = "SwfCheckBox" OR strMicClass = "SwfEditor" OR strMicClass = "SwfRadioButton" OR strMicClass = "SwfObject" Then
		strProperty = "enabled"
		strExpectedValue = True			
	End If
	GUI_Object_ValidateEnabled = GUI_Object_ValidateProperty(obj, strProperty, strExpectedValue, strFieldDesc)
End Function


'Verify a property of the object has expected value
'@code
'    GUI_Object_ValidateProperty(obj, strPropName, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strPropName - Object's property name
'@param strExpectedValue - Expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateProperty(obj, strPropName, strExpectedValue, strFieldDesc)

	Dim strActualValue
	
	If IsNull(strFieldDesc) Then
	    strFieldDesc = ""
	End If	
	boolTrim = False
    If NOT strPropName = "selected" Then
		If strPropName = "trimtext" Then
			boolTrim = True
			strPropName = "text"
		End If	
		strActualValue = Replace(CStr(obj.GetROProperty(strPropName)), vbcrlf, "")
    Else
		If obj.GetROProperty("micclass") = "SwfTab" Then
			strActualValue = obj.GetSelection
		End If	
    End If
	
	If boolTrim Then		
		strActualValue = Trim(strActualValue)			
	End If	
		
	boolMatch = False
	'Check Actual reslut whether equal to expect result
	If CStr(strActualValue) = CStr(strExpectedValue) Then
		boolMatch = True
	End If
	GUI_Object_ValidateProperty_Log boolMatch, obj, strPropName, strActualValue, strExpectedValue, strFieldDesc
	GUI_Object_ValidateProperty = boolMatch	
	
End Function



'Log message in report for when verifying a property of the object has expected value
'@param boolMatch 
'@param obj - object which property to verify and judge
'@param strPropName - Object's property name
'@param strExpectedValue - Expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateProperty_Log(boolMatch, obj, strPropName, strActualValue, strExpectedValue, strFieldDesc)

	If boolMatch Then
		'Success
		On Error Resume Next
		FRM_Logger_ReportPassEvent "Validate Property", "Verify " & strFieldDesc & " '"&strPropName&"' property of " & GUI_Object_Desc(obj)&", Actual Value="&strActualValue&", Expected Value="&strExpectedValue, Null
		On Error Goto 0						
	Else
		'Failed
		On Error Resume Next
		FRM_Logger_ReportFailEvent "Validate Property", "Verify " & strFieldDesc & " '"&strPropName&"' property of " & GUI_Object_Desc(obj)&", Actual Value="&strActualValue&", Expected Value="&strExpectedValue, Null
		On Error Goto 0
	End If
	
End Function 


'This function is for click on object 
'@code
'    GUI_Object_Click(obj, objType, objDesc)
'@endcode
'@param obj The object path
'@param objType The class of object
'@param objType The description of object

Function GUI_Object_Click(obj, objType, objDesc)
	
	On error resume next
	obj.Click 
	
	If err.number<>0 Then
		obj.object.BringToFront
		obj.Click 
	End If
	  On error goto 0

	FRM_Logger_ReportDebugEvent "Click on object " & objType, objDesc, null
	
End Function	



'Check if page is readonly by checking the array of object types provided
'Check children objects are readonly or not by MicClass
'@code
'   boolIsPageReadOnly = GUI_Object_IsContainerReadOnly(SwfWindow("swfname:=MainForm").Page("index:=0"), Array("WebEdit", "WebList", "WebButton"))
'@endcode
'@param objParent parent object
'@param arrMicClass an array of object micclass

Function GUI_Object_IsContainerReadOnly(objParent, arrMicClass)
	For intX = 0 to UBound(arrMicClass) 
		boolPageReadOnly = GUI_Object_AreChildrenReadOnly(objParent, arrMicClass(intX))
		If intX = 0 Then
			boolResult = boolPageReadOnly
		Else 
			boolResult = boolResult And boolPageReadOnly
		End If		
	Next 
	FRM_Logger_ReportInfoEvent "GUI_Object_IsContainerReadOnly", "Container is ReadOnly? " & boolResult, null
	GUI_Object_IsContainerReadOnly = boolResult
End Function


'Check children objects are readonly or not by MicClass
'@code
'   boolWebEditReadOnly = GUI_Object_AreChildrenReadOnly(SwfWindow("swfname:=MainForm").Page("index:=0"), "WebEdit")
'@endcode
'@param objParent parent object
'@param strMicClass micclass of the searched object

Function GUI_Object_AreChildrenReadOnly(objParent, strMicClass)

    FRM_Logger_ReportInfoEvent "GUI_Object_AreChildrenReadOnly", "Check if page children are readonly, strMicClass=" & strMicClass, null
	If objParent.Exist(1) Then
		Set objDesc = Description.Create()
		objDesc("micclass").value = strMicClass
		Set cl = objParent.ChildObjects(objDesc)   
		FRM_Logger_ReportInfoEvent "GUI_Object_AreChildrenReadOnly", "Total number of children found - " & cl.count, null
		For intIdx = 0 to cl.count - 1
			Set objChild = cl(intIdx)
			If strMicClass = "WebEdit" Then
				boolReadOnly = (objChild.GetROProperty("readonly") = 1)				
			Elseif strMicClass = "WebList" OR strMicClass = "WebCheckBox" OR strMicClass = "WebButton" Then
				boolReadOnly = (objChild.GetROProperty("disabled") = 1)
			Elseif strMicClass = "SwfCalendar" OR strMicClass = "SwfEdit" OR strMicClass = "SwfComboBox" OR strMicClass = "SwfButton" _
				OR strMicClass = "SwfCheckBox" OR strMicClass = "SwfEditor" Then
				boolReadOnly = (Not objChild.GetROProperty("enabled"))
			End If
			FRM_Logger_ReportDebugEvent "Child object readonly? " &boolReadOnly, "index="&intIdx&" "&GUI_Object_Desc(objChild), null
			If intIdx = 0 Then
				boolResult = boolReadOnly
			Else 
				boolResult = boolResult And boolReadOnly
			End If
		Next 
		GUI_Object_AreChildrenReadOnly = boolResult
		FRM_Logger_ReportInfoEvent "GUI_Object_AreChildrenReadOnly", "All children of MicClass ("&strMicClass&") are ReadOnly? " & boolResult, null
		Set cl = Nothing
		Set objDesc = Nothing		
	Else
		GUI_Object_AreChildrenReadOnly = False
		FRM_Logger_ReportInfoEvent "GUI_Object_AreChildrenReadOnly", "Parent object doesn't exist", null
	End If	
End Function


'Get the number of children that's of the provided micclass
'@code
'   boolWebEditReadOnly = GUI_Object_AreChildrenReadOnly(SwfWindow("swfname:=MainForm").Page("index:=0"), "WebEdit")
'@endcode
'@param objParent parent object
'@param strMicClass micclass of the searched object

Function GUI_Object_ChildrenCount(objParent, strMicClass)
	If objParent.Exist(1) Then
		Set objDesc = Description.Create()
		objDesc("micclass").value = strMicClass
		Set cl = objParent.ChildObjects(objDesc)  
		FRM_Logger_ReportInfoEvent "GUI_Object_ChildrenCount", "Total number of children found - " & cl.count, null
	End If
	GUI_Object_ChildrenCount = cl.count
End Function



'@ Get the property value of Runtime object
'@code
'    GUI_Object_GetPropertyValue(obj, strPropName)
'@endcode
'@param obj - object which property to verify and judge
'@param strPropName - Object's property name
Function GUI_Object_GetPropertyValue(obj, strPropName)
	GUI_Object_GetPropertyValue = obj.GetROProperty(strPropName)
End Function



'This function is Verify if property "title" as expected
'@code
'    GUI_Object_ValidateTitle(obj, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateTitle(obj, strExpectedValue, strFieldDesc)
	GUI_Object_ValidateTitle = GUI_Object_ValidateProperty(obj, "title", strExpectedValue, strFieldDesc)
End Function



'Verify if property "visible" as expected
'@code
'    GUI_Object_ValidateVisible(obj, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateVisible(obj, strExpectedValue, strFieldDesc)
	GUI_Object_ValidateVisible = GUI_Object_ValidateProperty(obj, "visible", strExpectedValue, strFieldDesc)
End Function



'Verify CheckBox UnChecked property as expected
'@code
'    GUI_Object_ValidateUnChecked(obj, strExpectedValue, strFieldDesc)
'@endcode
'@param obj - object which property to verify and judge
'@param strExpectedValue - expected value
'@param strFieldDesc - field description usually label for field

Function GUI_Object_ValidateUnChecked(obj, strExpectedValue, strFieldDesc)
	GUI_Object_ValidateUnChecked = GUI_Object_ValidateProperty(obj, "checked", strExpectedValue, strFieldDesc)
End Function


'This function will verify the text displayed an GUI and return boolean value . This function is used  as generic for webcheckbox,webedit,winedit . you can add any class of object
' in the switch case.
'@code
'    GUI_ValidateValueOfObject(Obj_ForValidation,Str_ExpectedValue)
'@endcode
'@param Obj_ForValidation - object is can be webedit,webcheckbox,webedit
'@param Str_ExpectedValue - expected value

Function GUI_ValidateValueOfObject(Obj_ForValidation,Str_ExpectedValue)
    Dim strMicClass , Str_ActualValue
    
	'Extracting the class of the object
    strMicClass=Ucase(Obj_ForValidation.GetROProperty("micclass"))
    
	'According to class object ,getting the actual value
    Select Case strMicClass
           Case "WINEDIT"
           Str_ActualValue=Obj_ForValidation.GetROProperty("text")
           Case "WEBEDIT"
           Str_ActualValue=Obj_ForValidation.GetROProperty("value")
           Case "WEBCHECKBOX"
           Str_ActualValue=Obj_ForValidation.GetROProperty("checked")
    End Select
    
	'Comaring the actual and exepected value , and returning true or false.
    If Str_ActualValue=Str_ExpectedValue Then        
   FRM_Logger_ReportPassEvent "Comparing the Actual and Expected value","Actual Value : "&Str_ActualValue&" Expected Value : "&Str_ExpectedValue,Null
   GUI_ValidateValueOfObject =true
    else       
  FRM_Logger_ReportFailEvent "Comparing the Actual and Expected value","Actual Value : "&Str_ActualValue&" Expected Value : "&Str_ExpectedValue,Null
  GUI_ValidateValueOfObject = false
    End If
    
End Function


'@}
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_Object.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_Object_Debug.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_Object_Debug GUI_Object
'
' List of functions here
' @code
'
'	Function GUI_Object_DebugChildren_ByMicClass(objParent, strMicClass)
'	Function GUI_Object_DebugChildren_ByMicClassIndex(objParent, strMicClass, intIndex)
'	Function GUI_Object_DebugChildren(objParent, objPropMap)
'	Function GUI_Object_DebugProperties(obj)
'	Function GUI_Object_WriteToDebugFile(strText)
'	Function GUI_Object_IdentificationProperties(strMicclass)
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''


'Debug object properties by MicClass
'@code
'   GUI_Object_DebugChildren_ByMicClass SwfWindow("swfname:=MainForm").Page("index:=0"), "WebEdit"
'@endcode
'@param objParent parent object
'@param strMicClass micclass of the searched object

Function GUI_Object_DebugChildren_ByMicClass(objParent, strMicClass)

    GUI_Object_WriteToDebugFile "GetROProperty for Object micClass=" & strMicClass 
    
    Set objPropMap = CreateObject("scripting.dictionary")
    objPropMap.add "micclass",strMicClass
    GUI_Object_DebugChildren objParent, objPropMap
    
End Function



'Debug object properties by MicClass and index
'@code
'   GUI_Object_DebugChildren_ByMicClassIndex SwfWindow("swfname:=MainForm").Page("index:=0"), "WebEdit", 4
'@endcode
'@param objParent parent object
'@param strMicClass micclass of the searched object
'@intIndex index of the searched object

Function GUI_Object_DebugChildren_ByMicClassIndex(objParent, strMicClass, intIndex)

    GUI_Object_WriteToDebugFile "GetROProperty for Object micClass=" & strMicClass & ", index=" & intIndex 
    
    Set objPropMap = CreateObject("scripting.dictionary")
    objPropMap.add "micclass",strMicClass
    
    Set desc = Description.Create()
    For each strKey in objPropMap
        If objPropMap.exists(strKey) Then desc(strKey).value = objPropMap(strKey)
    Next 
    
    Set cl = objParent.ChildObjects(desc)     
    If Cint(intIndex) <= cl.count Then 
        Set obj = cl(intIndex)    
        GUI_Object_DebugProperties obj
    End If
    Set cl = Nothing
    Set desc = Nothing    
End Function



'Debug object properties by provided properties
'@code
'   Set propMap = CreateObject("scripting.dictionary")
'   propMap.add "text", "Close"
'   propMap.add "micclass", "SwfButton"
'
'   GUI_Object_DebugChildren SwfWindow("swfname:=MainForm").SwfWindow("swfname:=SetUpContainer"), propMap
'@endcode
'@param objParent parent object
'@param objPropMap Dictionary object of properties

Function GUI_Object_DebugChildren(objParent, objPropMap)

    Set desc = Description.Create()
    For each strKey in objPropMap
        If objPropMap.exists(strKey) Then desc(strKey).value = objPropMap(strKey)
    Next 
    
    Set cl = objParent.ChildObjects(desc)   
    GUI_Object_WriteToDebugFile "Total number of children found - " & cl.count   
    For intIdx = 0 to cl.count - 1
        GUI_Object_WriteToDebugFile "!---- Object index " & intIdx & "----!"
        GUI_Object_DebugProperties( cl(intIdx) )
    Next 
    Set cl = Nothing
    Set desc = Nothing
End Function



'Debug runtime properties of an object
'@param obj object to be debugged

Function GUI_Object_DebugProperties(obj)

    On Error Resume Next
    'If GUI_Object_IsExist(obj) Then 
        
        arrNames = GUI_Object_IdentificationProperties(obj.GetROProperty("micclass"))
        For i = 0 to UBound(arrNames)
            'sNamesTO = sNamesTO & vbTab & arrNames(i) & ": " & obj.GetTOProperty(arrNames(i)) & ";" &vbTab
            sNamesRO = sNamesRO & vbTab & arrNames(i) & ": " & obj.GetROProperty(arrNames(i)) & ";" &vbTab                       
        Next
        'sNamesTO = sNamesTO 
        sNamesRO = sNamesRO 
        'GUI_Object_WriteToDebugFile "Object Test properties - " & sNamesTO
        GUI_Object_WriteToDebugFile "Object Runtime properties - " & sNamesRO 
        GUI_Object_WriteToDebugFile "==========================================================================="
    'End If
    If Err.Number <> 0 Then
        GUI_Object_WriteToDebugFile "Error trying to read object properties, Err.Number-" & Err.Number & ", Err.Description-" & Err.Description
    End If 
    On Error GoTo 0
    
End Function



'Log a text line to the file
'@param strText text to be written

Function GUI_Object_WriteToDebugFile(strText)

    strFileName = "GUObjectDebug-" & UTIL_Date_FormatDateByPattern(now, "mmddyyyy") & ".txt"
    strFilePath = FRM_RT_ReportDirPath + strFileName    
    UTIL_File_CreateTextFileIfNotExist strFilePath
    
    UTIL_File_AppendingText strFilePath, cstr(Time) & ": " & strText & vbNewLine
        
End Function 



'Get all the identificatio properties of a micclass
'@param strMicclass micclass

Function GUI_Object_IdentificationProperties(strMicclass)
    Const HKEY_LOCAL_MACHINE = &H80000002
    Set oReg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv")

    sKeyPath = "SOFTWARE\Mercury Interactive\QuickTest Professional\MicTest\Test Objects\" & strMicclass & "\Properties"
    oReg.EnumValues HKEY_LOCAL_MACHINE, sKeyPath, arrNames
    
    GUI_Object_IdentificationProperties = arrNames
    
End Function 


'@}''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_Object_Debug.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_TreeView.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_TreeView GUI_TreeView
'
' List of functions here
'
' @code
'
'   Function GUI_TreeView_ClickCheckBox(objTreeView, strSearchText, boolToBeChecked)
'	Function GUI_TreeView_SetItemState(obj, Item, State)
'	Function GUI_SwfTreeView_ValidateCheckBoxItemState(objTreeView, ItemText)
'	Function GUI_SwfTreeView_ValidateCheckBoxes(objTreeView, NodesToBeChecked)
'	Function GUI_SwfTreeView_SearchItem(objTreeView, strItemText)
'	Function GUI_SwfTreeView_ValidateCheckboxesItemStates(objTreeView,strItemsTextList,boolChecked)
'	Function GUI_SwfTreeView_SetCheckBoxItemStates(objMainView,strItemsList,boolChecked)
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''

'This function is used to search thru the list of swfTreeView and select the keyword and click on the checkbox
'@code
'    GUI_TreeView_ClickCheckBox(objTreeView, strSearchText, boolToBeChecked)
'@endcode
'@param objTreeView - The QTP object which is to be handled. Generally it is a TreeView
'@param strSearchText - Text displayed in the tree node
'@param boolToBeChecked - To check checkbox true / false

Function GUI_TreeView_ClickCheckBox(objTreeView, strSearchText, boolToBeChecked)

    Dim itemIndex, isExisted, arrCheckedIndexs, checkedIndex, isChecked, objWshShell,arrSearchText,strActualSearchText
    
    isExisted = False
	arrSearchText = Split(strSearchText,";")
	strActualSearchText=arrSearchText(UBound(arrSearchText))
    
	For i = 0 To objTreeView.GetItemsCount - 1
        strActualWord = objTreeView.GetItem(i)
        If strActualWord = strActualSearchText Then
            itemIndex = i
            isExisted = True
            Exit For
        End If
    Next
    
    If isExisted Then
        arrCheckedIndexs = Split(objTreeView.GetROProperty("checked"), ";")
        For Each checkedIndex In arrCheckedIndexs
            If CInt(checkedIndex) = itemIndex Then
                isChecked = True
                Exit For
            Else
                isChecked = False
            End If
        Next
    End If
    
    If boolToBeChecked <> isChecked Then
        objTreeView.Select strSearchText
		'Set objSettings = SwfWindow("swfname:=MainForm").SwfWindow("swfname:=SetUpContainer")
		'objSettings.SwfWindow("swfname:=PersonaSettingsMainForm").SwfWindow("swfname:=ToolsPage").SwfObject("swfname:=gcTreeView").SwfTreeView("swfname:=treeViewTabs").Select strSearchText
        Set objWshShell = CreateObject("WScript.Shell")
        objWshShell.SendKeys " "
        Set objWshShell = Nothing
    End If
End Function

'This function is used to set an item state of SwfTreeView object
'@code
'    GUI_TreeView_SetItemState(obj, Item, State)
'@endcode
'@parm obj - SwfTreeView object
'@param Item - The full path of the node whose check box you want to set.
'@param state - The state you want to set. It can have below possile values:
'				micChecked (1)--Selects the node check box.
'				micUnchecked (0)--Clears the node check box.
'				micClick (-1)--Clicks the node icon.
'				micDblClick (-2)--Double-clicks the node icon.
'
Function GUI_TreeView_SetItemState(obj, Item, State)

	GUI_Object_WaitTillExist obj
	obj.SetItemState Item, State
	
End Function



'This function is used to validate checkbox checked/Unchecked
'@code
'    GUI_SwfTreeView_ValidateCheckBoxes(objTreeView, NodesToBeChecked)
'@endcode
'@param objTreeView - SwfTreeView Object
'@param NodesToBeChecked - String Value to be checked
'		NodesToBeChecked if "All" validates all checkboxes in the Tree
'		NodesToBeChecked if "None" validates none of the checkboxes in the Tree

Function GUI_SwfTreeView_ValidateCheckBoxes(objTreeView, NodesToBeChecked)
	NumberofNodesInTree = objTreeView.GetItemsCount()
    CheckBoxesChecked =  objTreeView.GetCheckMarks()
    CheckBoxesDetails = Split (CheckBoxesChecked, ";")
    NodeDetails = Split(NodesToBeChecked, ";")
    blnDetailsAreMatched = True
    If(NodesToBeChecked = "All") and (NumberofNodesInTree - 1 <> UBound(CheckBoxesDetails)) then 
	    blnDetailsAreMatched = False
    ElseIf(NodesToBeChecked = "None" and UBound(CheckBoxesDetails) <> -1) then 
  	    blnDetailsAreMatched = False
    ElseIf (Instr(1,NodesToBeChecked,";",0)>0) Then
		For i = 0 To UBound(NodeDetails)
			CheckBoxStatus = GUI_SwfTreeView_ValidateCheckBoxItemState(objTreeView, objTreeView.GetItem(NodeDetails(i)))
			if(CheckBoxStatus = False) then 
				blnDetailsAreMatched = False
				FRM_Logger_ReportFailEvent "Checkbox unchecked","The tree view item: '"& objTreeView.GetItem(NodeDetails(i))&"' is unchecked",Null
			Else
				FRM_Logger_ReportPassEvent "Checkbox checked","The tree view item: '"& objTreeView.GetItem(NodeDetails(i))&"' is checked",Null
			End if
		Next
	End If
	GUI_SwfTreeView_ValidateCheckBoxes = blnDetailsAreMatched
End Function



'This function is used to validate if Specified Item ix checked/Unchecked
'@code
'	GUI_SwfTreeView_ValidateCheckBoxItemState(objTreeView, ItemText)
'@endcode
'@param objTreeView - SwfTreeView Object
'@param ItemText - check box item to validate

Function GUI_SwfTreeView_ValidateCheckBoxItemState(objTreeView, ItemText)
	NumberofNodesInTree = objTreeView.GetItemsCount()
	CheckBoxDetails =  objTreeView.GetCheckMarks()
	For ItemNumber = 0 To NumberofNodesInTree-1 Step 1
		strActualWord = objTreeView.GetItem(ItemNumber)
		if(ItemText = strActualWord) then
			Exit For
		End if
	Next
	If(InStr(CheckBoxDetails, ItemNumber) > 0) then
		GUI_SwfTreeView_ValidateCheckBoxItemState = True
	Else
		GUI_SwfTreeView_ValidateCheckBoxItemState = False
	End if
End Function

'This function is used to Search for Specified Item 
'@code
'	GUI_SwfTreeView_SearchItem(objTreeView, strItemText)
'@endcode
'@param objTreeView - SwfTreeView Object
'@param strItemText - check box item to validate

Function GUI_SwfTreeView_SearchItem(objTreeView, strItemText)
	Dim intNumOfNodesInTree,intItemNumber,boolStatus
	boolStatus = False
	intNumOfNodesInTree = objTreeView.GetItemsCount()
	For intItemNumber = 0 To intNumOfNodesInTree-1 Step 1
		strActualWord = objTreeView.GetItem(intItemNumber)
		if(strItemText = strActualWord) then
			boolStatus = True
			Exit For
		End if
	Next
	GUI_SwfTreeView_SearchItem = boolStatus
End Function



'This function is used to verify checkbox state of multiple SwfTreeView items
'@code
'	GUI_SwfTreeView_ValidateCheckboxesItemStates(objTreeView,strItemsTextList,boolChecked)
'@endcode
'@param objTreeView - SwfTreeView Object
'@param strItemsTextList - list of SwfTreeView item names to be verified
'@param boolChecked - "Yes"(To verify for checked state)/"No"(To verify for unchecked state)
Function GUI_SwfTreeView_ValidateCheckboxesItemStates(objTreeView,strItemsTextList,boolChecked)

	Dim arrStrInput,boolDetailsMatched
	
	'split input string based on new line feed
	arrStrInput = Split(strItemsTextList,vbLf)
	boolDetailsMatched = True
	Select Case boolChecked
	Case "Yes"
		For i=0 to UBound(arrStrInput) Step 1
			boolChecked = GUI_SwfTreeView_ValidateCheckBoxItemState(objTreeView,arrStrInput(i))
			If Not boolChecked Then
				boolDetailsMatched = False
			End If
			FRM_VerifyTrue boolChecked,"SwfTreeView item Checked","SwfTreeView item "& arrStrInput(i)& " is checked"	
		Next 
	Case "No"
		For i=0 to UBound(arrStrInput) Step 1
			boolChecked = GUI_SwfTreeView_ValidateCheckBoxItemState(objTreeView,arrStrInput(i))
			If boolChecked Then
				boolDetailsMatched = False
			End If
			FRM_VerifyFalse boolChecked,"SwfTreeView item UnChecked","SwfTreeView item "& arrStrInput(i)& " is unchecked"	
		Next
	Case Else
		FRM_Logger_ReportFailEvent "Specify correct arguments","Incorrect arguments are given",Null
	End Select
	
	GUI_SwfTreeView_ValidateCheckboxesItemStates = boolDetailsMatched

End Function


'This function is used for setting multiple checkbox items in SwfTreeView object
'@code
'	GUI_SwfTreeView_SetCheckBoxItemStates(objMainView,strItemsList,boolChecked)
'@endcode
'@param 
Function GUI_SwfTreeView_SetCheckBoxItemStates(objMainView,strItemsList,boolChecked)
	
	Dim arrInput	'item names to set checkbox state 
	Dim intItemIndex, strCount, intChecked
	
	Select Case strItemsList
		'For setting all checkbox items in SwfTreeView
		Case "All"
			strCount = objMainView.GetItemsCount()
			If boolChecked Then
				intChecked = 1
			Else
				intChecked = 0
			End If
			For intItemIndex = 0 To strCount-1 Step 1
				objMainView.SetItemState intItemIndex,intChecked
			Next
			
		'For setting selected checkbox items identified by names
		Case Else
			arrInput = Split(strItemsList,vbLf)
	
			For i = 0 To Ubound(arrInput) Step 1
			GUI_TreeView_ClickCheckBox objMainView,arrInput(i),boolChecked
			Next
		End Select
		
End Function


'@}
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_TreeView.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_Window.qfl" Start 
''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''
'@defgroup GUI_Window GUI_Window
'
' List of functions here
'
' @code
'
'   Function GUI_Window_Close(objMainView)
'@endcode
' @{
''''''''''''''''''''''''''''''''''''''''''

'This function is for Close the Window 
'@code
'    GUI_Window_Close(objMainView)
'@endcode
'@param objMainView The object path

Function GUI_Window_Close(objMainView)

    GUI_Object_WaitTillEnabled objMainView
    objMainView.Close
End Function




'@}''''''''''''''''''''''''''''''''''''''''''''''''''''
' File "D:\Core18_4\Core2P-18.4\Function Library\GUI\GUI_Window.qfl" End 
''''''''''''''''''''''''''''''''''''''''''''''''''''
